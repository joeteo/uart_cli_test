
uart_cli_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e04  08004e04  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08004e04  08004e04  00014e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e0c  08004e0c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e0c  08004e0c  00014e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08004e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          000000bc  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbee  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021c0  00000000  00000000  0002bce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002dea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b39  00000000  00000000  0002f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d062  00000000  00000000  00053c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d966e  00000000  00000000  00060cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a349  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e7c  00000000  00000000  0013a39c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004afc 	.word	0x08004afc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	08004afc 	.word	0x08004afc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	4b7c      	ldr	r3, [pc, #496]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a7b      	ldr	r2, [pc, #492]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b79      	ldr	r3, [pc, #484]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	61bb      	str	r3, [r7, #24]
 80005e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a74      	ldr	r2, [pc, #464]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b72      	ldr	r3, [pc, #456]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a6d      	ldr	r2, [pc, #436]	; (80007c0 <MX_GPIO_Init+0x20c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b6b      	ldr	r3, [pc, #428]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b67      	ldr	r3, [pc, #412]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a66      	ldr	r2, [pc, #408]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b64      	ldr	r3, [pc, #400]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b60      	ldr	r3, [pc, #384]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a5f      	ldr	r2, [pc, #380]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b5d      	ldr	r3, [pc, #372]	; (80007c0 <MX_GPIO_Init+0x20c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <MX_GPIO_Init+0x20c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a58      	ldr	r2, [pc, #352]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b56      	ldr	r3, [pc, #344]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f244 0181 	movw	r1, #16513	; 0x4081
 8000678:	4852      	ldr	r0, [pc, #328]	; (80007c4 <MX_GPIO_Init+0x210>)
 800067a:	f001 f927 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	4851      	ldr	r0, [pc, #324]	; (80007c8 <MX_GPIO_Init+0x214>)
 8000684:	f001 f922 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800068e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	484b      	ldr	r0, [pc, #300]	; (80007cc <MX_GPIO_Init+0x218>)
 80006a0:	f000 ff68 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4843      	ldr	r0, [pc, #268]	; (80007cc <MX_GPIO_Init+0x218>)
 80006c0:	f000 ff58 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c4:	2386      	movs	r3, #134	; 0x86
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	483c      	ldr	r0, [pc, #240]	; (80007d0 <MX_GPIO_Init+0x21c>)
 80006e0:	f000 ff48 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4831      	ldr	r0, [pc, #196]	; (80007c4 <MX_GPIO_Init+0x210>)
 80006fe:	f000 ff39 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000714:	230b      	movs	r3, #11
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4829      	ldr	r0, [pc, #164]	; (80007c4 <MX_GPIO_Init+0x210>)
 8000720:	f000 ff28 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4823      	ldr	r0, [pc, #140]	; (80007c8 <MX_GPIO_Init+0x214>)
 800073c:	f000 ff1a 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	481d      	ldr	r0, [pc, #116]	; (80007c8 <MX_GPIO_Init+0x214>)
 8000754:	f000 ff0e 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000758:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800076a:	230a      	movs	r3, #10
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <MX_GPIO_Init+0x21c>)
 8000776:	f000 fefd 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800077a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4810      	ldr	r0, [pc, #64]	; (80007d0 <MX_GPIO_Init+0x21c>)
 8000790:	f000 fef0 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000794:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0x214>)
 80007b2:	f000 fedf 	bl	8001574 <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40021800 	.word	0x40021800
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020000 	.word	0x40020000

080007d4 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80007dc:	1d39      	adds	r1, r7, #4
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	2201      	movs	r2, #1
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <__io_putchar+0x20>)
 80007e6:	f002 f87a 	bl	80028de <HAL_UART_Transmit>

  return ch;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000128 	.word	0x20000128

080007f8 <cmd_torque>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int cmd_torque(int argc, char* argv[])
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	if (argv[1] == NULL) {
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	3304      	adds	r3, #4
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <cmd_torque+0x1c>
		printf("wrong command pattern. \n");
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <cmd_torque+0x5c>)
 800080e:	f003 f975 	bl	8003afc <puts>
 8000812:	e01a      	b.n	800084a <cmd_torque+0x52>
	}
	else {
		if (!strcmp(argv[1], "on")) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	3304      	adds	r3, #4
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	490f      	ldr	r1, [pc, #60]	; (8000858 <cmd_torque+0x60>)
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fce7 	bl	80001f0 <strcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d103      	bne.n	8000830 <cmd_torque+0x38>
			printf("torque on. \n");
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <cmd_torque+0x64>)
 800082a:	f003 f967 	bl	8003afc <puts>
 800082e:	e00c      	b.n	800084a <cmd_torque+0x52>
		}
		else if (!strcmp(argv[1], "off")) {
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	3304      	adds	r3, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	490a      	ldr	r1, [pc, #40]	; (8000860 <cmd_torque+0x68>)
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fcd9 	bl	80001f0 <strcmp>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <cmd_torque+0x52>
			printf("torque off. \n");
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <cmd_torque+0x6c>)
 8000846:	f003 f959 	bl	8003afc <puts>
		}
	}

	return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	08004b14 	.word	0x08004b14
 8000858:	08004b2c 	.word	0x08004b2c
 800085c:	08004b30 	.word	0x08004b30
 8000860:	08004b3c 	.word	0x08004b3c
 8000864:	08004b40 	.word	0x08004b40

08000868 <cdm_pump>:

int cdm_pump(int argc, char* argv[])
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
	if (argv[1] == NULL) {
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d103      	bne.n	8000884 <cdm_pump+0x1c>
		printf("wrong command pattern. \n");
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <cdm_pump+0x5c>)
 800087e:	f003 f93d 	bl	8003afc <puts>
 8000882:	e01a      	b.n	80008ba <cdm_pump+0x52>
	}
	else {
		if (!strcmp(argv[1], "on")) {
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3304      	adds	r3, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	490f      	ldr	r1, [pc, #60]	; (80008c8 <cdm_pump+0x60>)
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fcaf 	bl	80001f0 <strcmp>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d103      	bne.n	80008a0 <cdm_pump+0x38>
			printf("pump on. \n");
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <cdm_pump+0x64>)
 800089a:	f003 f92f 	bl	8003afc <puts>
 800089e:	e00c      	b.n	80008ba <cdm_pump+0x52>
		}
		else if (!strcmp(argv[1], "off")) {
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	490a      	ldr	r1, [pc, #40]	; (80008d0 <cdm_pump+0x68>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fca1 	bl	80001f0 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <cdm_pump+0x52>
			printf("pump off. \n");
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <cdm_pump+0x6c>)
 80008b6:	f003 f921 	bl	8003afc <puts>
		}
	}

	return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08004b14 	.word	0x08004b14
 80008c8:	08004b2c 	.word	0x08004b2c
 80008cc:	08004b50 	.word	0x08004b50
 80008d0:	08004b3c 	.word	0x08004b3c
 80008d4:	08004b5c 	.word	0x08004b5c

080008d8 <cmd_conveyorBelt>:

int cmd_conveyorBelt(int argc, char* argv[])
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	if (argv[1] == NULL) {
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3304      	adds	r3, #4
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d103      	bne.n	80008f4 <cmd_conveyorBelt+0x1c>
		printf("wrong command pattern. \n");
 80008ec:	4824      	ldr	r0, [pc, #144]	; (8000980 <cmd_conveyorBelt+0xa8>)
 80008ee:	f003 f905 	bl	8003afc <puts>
 80008f2:	e03f      	b.n	8000974 <cmd_conveyorBelt+0x9c>
	}
	else {
		if (!strcmp(argv[1], "on")) {
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4922      	ldr	r1, [pc, #136]	; (8000984 <cmd_conveyorBelt+0xac>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc77 	bl	80001f0 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d128      	bne.n	800095a <cmd_conveyorBelt+0x82>
			if (argv[2] == NULL) {
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	3308      	adds	r3, #8
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <cmd_conveyorBelt+0x42>
				printf("wrong command pattern. \n");
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <cmd_conveyorBelt+0xa8>)
 8000914:	f003 f8f2 	bl	8003afc <puts>
 8000918:	e02c      	b.n	8000974 <cmd_conveyorBelt+0x9c>
			}
			else {
				if (!strcmp(argv[2], "right")) {
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	3308      	adds	r3, #8
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4919      	ldr	r1, [pc, #100]	; (8000988 <cmd_conveyorBelt+0xb0>)
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc64 	bl	80001f0 <strcmp>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d103      	bne.n	8000936 <cmd_conveyorBelt+0x5e>
					printf("conveyor belt turn endlessly right. \n");
 800092e:	4817      	ldr	r0, [pc, #92]	; (800098c <cmd_conveyorBelt+0xb4>)
 8000930:	f003 f8e4 	bl	8003afc <puts>
 8000934:	e01e      	b.n	8000974 <cmd_conveyorBelt+0x9c>
				}
				else if (!strcmp(argv[2], "left")) {
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3308      	adds	r3, #8
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4914      	ldr	r1, [pc, #80]	; (8000990 <cmd_conveyorBelt+0xb8>)
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc56 	bl	80001f0 <strcmp>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <cmd_conveyorBelt+0x7a>
					printf("conveyor belt turn endlessly left. \n");
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <cmd_conveyorBelt+0xbc>)
 800094c:	f003 f8d6 	bl	8003afc <puts>
 8000950:	e010      	b.n	8000974 <cmd_conveyorBelt+0x9c>
				}else {
					printf("wrong command pattern. \n");
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <cmd_conveyorBelt+0xa8>)
 8000954:	f003 f8d2 	bl	8003afc <puts>
 8000958:	e00c      	b.n	8000974 <cmd_conveyorBelt+0x9c>
				}
			}
		}
		else if (!strcmp(argv[1], "off")) {
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	3304      	adds	r3, #4
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	490d      	ldr	r1, [pc, #52]	; (8000998 <cmd_conveyorBelt+0xc0>)
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fc44 	bl	80001f0 <strcmp>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <cmd_conveyorBelt+0x9c>
			printf("conveyor belt stop. \n");
 800096e:	480b      	ldr	r0, [pc, #44]	; (800099c <cmd_conveyorBelt+0xc4>)
 8000970:	f003 f8c4 	bl	8003afc <puts>
		}
	}

	return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	08004b14 	.word	0x08004b14
 8000984:	08004b2c 	.word	0x08004b2c
 8000988:	08004b68 	.word	0x08004b68
 800098c:	08004b70 	.word	0x08004b70
 8000990:	08004b98 	.word	0x08004b98
 8000994:	08004ba0 	.word	0x08004ba0
 8000998:	08004b3c 	.word	0x08004b3c
 800099c:	08004bc4 	.word	0x08004bc4

080009a0 <cmd_pick>:

int cmd_pick(int argc, char* argv[])
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	printf("pick up item on the conveyor belt. \n");
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <cmd_pick+0x1c>)
 80009ac:	f003 f8a6 	bl	8003afc <puts>
	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08004bdc 	.word	0x08004bdc

080009c0 <cmd_throw>:

int cmd_throw(int argc, char* argv[])
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	printf("throw item away \n");
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <cmd_throw+0x1c>)
 80009cc:	f003 f896 	bl	8003afc <puts>
	return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	08004c00 	.word	0x08004c00

080009e0 <cmd_exit>:

int cmd_exit(int argc, char* argv[])
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	printf("exit command received \n");
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <cmd_exit+0x1c>)
 80009ec:	f003 f886 	bl	8003afc <puts>
	return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08004c14 	.word	0x08004c14

08000a00 <parse_input_string>:

void parse_input_string(char* input_string, int* argc, char* argv[])
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	int found_arg = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
	int argn = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]

	while (*input_string)
 8000a14:	e021      	b.n	8000a5a <parse_input_string+0x5a>
	{
		if (*input_string == '\n') {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b0a      	cmp	r3, #10
 8000a1c:	d103      	bne.n	8000a26 <parse_input_string+0x26>
			*input_string = '\0';
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
			break;
 8000a24:	e01d      	b.n	8000a62 <parse_input_string+0x62>
		}

		if (*input_string == ' ') {
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b20      	cmp	r3, #32
 8000a2c:	d105      	bne.n	8000a3a <parse_input_string+0x3a>
			found_arg = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
			*input_string = '\0';
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	e00c      	b.n	8000a54 <parse_input_string+0x54>
		}
		else if (found_arg) {
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d009      	beq.n	8000a54 <parse_input_string+0x54>
			argv[argn++] = input_string;
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	613a      	str	r2, [r7, #16]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	601a      	str	r2, [r3, #0]
			found_arg = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
		}
		input_string++;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
	while (*input_string)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1d9      	bne.n	8000a16 <parse_input_string+0x16>
	}

	*argc = argn;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <cmd_handler>:
	{"exit",	cmd_exit,	"exit command"},
	{0,0,0}
};

void cmd_handler(char* cmd)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	struct Command_List* pCmdList = CmdList;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <cmd_handler+0x80>)
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t command_found = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38

	int	  argc;
	char* argv[MAX_CMD_NUM] = { 0, };
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2228      	movs	r2, #40	; 0x28
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 ffbf 	bl	8003a10 <memset>

	parse_input_string(cmd, &argc, argv);
 8000a92:	f107 020c 	add.w	r2, r7, #12
 8000a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ffaf 	bl	8000a00 <parse_input_string>

	if (argc)
 8000aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d01a      	beq.n	8000ade <cmd_handler+0x6a>
	{
		while (pCmdList->cmd)
 8000aa8:	e015      	b.n	8000ad6 <cmd_handler+0x62>
		{
			if (!strcmp((const char*)pCmdList->cmd, (const char*)cmd))
 8000aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb9d 	bl	80001f0 <strcmp>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d109      	bne.n	8000ad0 <cmd_handler+0x5c>
			{
				command_found = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
				pCmdList->func(argc, argv);
 8000ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	4610      	mov	r0, r2
 8000acc:	4798      	blx	r3
				break;
 8000ace:	e006      	b.n	8000ade <cmd_handler+0x6a>
			}
			++pCmdList;
 8000ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad2:	330c      	adds	r3, #12
 8000ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (pCmdList->cmd)
 8000ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1e5      	bne.n	8000aaa <cmd_handler+0x36>
		}
	}
	if (command_found == 0) printf("command not found!\n");
 8000ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <cmd_handler+0x76>
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <cmd_handler+0x84>)
 8000ae6:	f003 f809 	bl	8003afc <puts>
}
 8000aea:	bf00      	nop
 8000aec:	3740      	adds	r7, #64	; 0x40
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000000 	.word	0x20000000
 8000af8:	08004d0c 	.word	0x08004d0c

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b02:	f000 fafd 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b06:	f000 f831 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0a:	f7ff fd53 	bl	80005b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b0e:	f000 fa53 	bl	8000fb8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000b12:	f000 f8ef 	bl	8000cf4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8000b16:	2201      	movs	r2, #1
 8000b18:	490f      	ldr	r1, [pc, #60]	; (8000b58 <main+0x5c>)
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <main+0x60>)
 8000b1c:	f001 ffb6 	bl	8002a8c <HAL_UART_Receive_IT>
  printf("=====================\r\n");
 8000b20:	480f      	ldr	r0, [pc, #60]	; (8000b60 <main+0x64>)
 8000b22:	f002 ffeb 	bl	8003afc <puts>
  printf("Command Line Interface\r\n");
 8000b26:	480f      	ldr	r0, [pc, #60]	; (8000b64 <main+0x68>)
 8000b28:	f002 ffe8 	bl	8003afc <puts>
  printf("=====================\r\n");
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <main+0x64>)
 8000b2e:	f002 ffe5 	bl	8003afc <puts>
  char temp[4]={0,};
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  sprintf(temp, ">> ");
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	490b      	ldr	r1, [pc, #44]	; (8000b68 <main+0x6c>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 ffe6 	bl	8003b0c <siprintf>
  HAL_UART_Transmit_IT(&huart3, (uint8_t*)temp, sizeof(temp));
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2204      	movs	r2, #4
 8000b44:	4619      	mov	r1, r3
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <main+0x60>)
 8000b48:	f001 ff5b 	bl	8002a02 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b50:	f000 fb48 	bl	80011e4 <HAL_Delay>
 8000b54:	e7fa      	b.n	8000b4c <main+0x50>
 8000b56:	bf00      	nop
 8000b58:	200000e0 	.word	0x200000e0
 8000b5c:	20000128 	.word	0x20000128
 8000b60:	08004d20 	.word	0x08004d20
 8000b64:	08004d38 	.word	0x08004d38
 8000b68:	08004d50 	.word	0x08004d50

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	; 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2230      	movs	r2, #48	; 0x30
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 ff48 	bl	8003a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b2c      	ldr	r3, [pc, #176]	; (8000c48 <SystemClock_Config+0xdc>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a2b      	ldr	r2, [pc, #172]	; (8000c48 <SystemClock_Config+0xdc>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <SystemClock_Config+0xdc>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <SystemClock_Config+0xe0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <SystemClock_Config+0xe0>)
 8000bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <SystemClock_Config+0xe0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be0:	2308      	movs	r3, #8
 8000be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000be4:	23b4      	movs	r3, #180	; 0xb4
 8000be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be8:	2302      	movs	r3, #2
 8000bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 fed3 	bl	80019a0 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c00:	f000 f872 	bl	8000ce8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c04:	f000 fe7c 	bl	8001900 <HAL_PWREx_EnableOverDrive>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c0e:	f000 f86b 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2105      	movs	r1, #5
 8000c30:	4618      	mov	r0, r3
 8000c32:	f001 f92d 	bl	8001e90 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c3c:	f000 f854 	bl	8000ce8 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3750      	adds	r7, #80	; 0x50
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1c      	ldr	r2, [pc, #112]	; (8000cd0 <HAL_UART_RxCpltCallback+0x80>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d132      	bne.n	8000cc8 <HAL_UART_RxCpltCallback+0x78>
		if(rx3_data != '\n' && bufindex < BUFSIZE)
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_UART_RxCpltCallback+0x84>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b0a      	cmp	r3, #10
 8000c68:	d00f      	beq.n	8000c8a <HAL_UART_RxCpltCallback+0x3a>
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_UART_RxCpltCallback+0x88>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b1d      	cmp	r3, #29
 8000c70:	d80b      	bhi.n	8000c8a <HAL_UART_RxCpltCallback+0x3a>
			rx3buf[bufindex++] = rx3_data;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_UART_RxCpltCallback+0x88>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	b2d1      	uxtb	r1, r2
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_UART_RxCpltCallback+0x88>)
 8000c7c:	7011      	strb	r1, [r2, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_UART_RxCpltCallback+0x84>)
 8000c82:	7819      	ldrb	r1, [r3, #0]
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_RxCpltCallback+0x8c>)
 8000c86:	5499      	strb	r1, [r3, r2]
 8000c88:	e019      	b.n	8000cbe <HAL_UART_RxCpltCallback+0x6e>
		else {
			cmd_handler((char*)rx3buf);
 8000c8a:	4814      	ldr	r0, [pc, #80]	; (8000cdc <HAL_UART_RxCpltCallback+0x8c>)
 8000c8c:	f7ff fef2 	bl	8000a74 <cmd_handler>
			char temp[4]={0,};
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
			sprintf(temp, ">> ");
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	4911      	ldr	r1, [pc, #68]	; (8000ce0 <HAL_UART_RxCpltCallback+0x90>)
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 ff36 	bl	8003b0c <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)temp, sizeof(temp));
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480e      	ldr	r0, [pc, #56]	; (8000ce4 <HAL_UART_RxCpltCallback+0x94>)
 8000caa:	f001 feaa 	bl	8002a02 <HAL_UART_Transmit_IT>
			memset(rx3buf,0,sizeof(rx3buf));
 8000cae:	221e      	movs	r2, #30
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	480a      	ldr	r0, [pc, #40]	; (8000cdc <HAL_UART_RxCpltCallback+0x8c>)
 8000cb4:	f002 feac 	bl	8003a10 <memset>
			bufindex=0;
 8000cb8:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_UART_RxCpltCallback+0x88>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
//
//				rx_start = 0;
//			}
//		}

		HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4904      	ldr	r1, [pc, #16]	; (8000cd4 <HAL_UART_RxCpltCallback+0x84>)
 8000cc2:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <HAL_UART_RxCpltCallback+0x94>)
 8000cc4:	f001 fee2 	bl	8002a8c <HAL_UART_Receive_IT>
	}

}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40004800 	.word	0x40004800
 8000cd4:	200000e0 	.word	0x200000e0
 8000cd8:	20000102 	.word	0x20000102
 8000cdc:	200000e4 	.word	0x200000e4
 8000ce0:	08004d50 	.word	0x08004d50
 8000ce4:	20000128 	.word	0x20000128

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_RTC_Init+0x44>)
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <MX_RTC_Init+0x48>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_RTC_Init+0x44>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_RTC_Init+0x44>)
 8000d06:	227f      	movs	r2, #127	; 0x7f
 8000d08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_RTC_Init+0x44>)
 8000d0c:	22ff      	movs	r2, #255	; 0xff
 8000d0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_RTC_Init+0x44>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_RTC_Init+0x44>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_RTC_Init+0x44>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_RTC_Init+0x44>)
 8000d24:	f001 fc94 	bl	8002650 <HAL_RTC_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000d2e:	f7ff ffdb 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000104 	.word	0x20000104
 8000d3c:	40002800 	.word	0x40002800

08000d40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08e      	sub	sp, #56	; 0x38
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	2230      	movs	r2, #48	; 0x30
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f002 fe5d 	bl	8003a10 <memset>
  if(rtcHandle->Instance==RTC)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <HAL_RTC_MspInit+0x4c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d111      	bne.n	8000d84 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d60:	2320      	movs	r3, #32
 8000d62:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 faae 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d7a:	f7ff ffb5 	bl	8000ce8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <HAL_RTC_MspInit+0x50>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d84:	bf00      	nop
 8000d86:	3738      	adds	r7, #56	; 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40002800 	.word	0x40002800
 8000d90:	42470e3c 	.word	0x42470e3c

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f9b8 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <USART3_IRQHandler+0x10>)
 8000e3e:	f001 fe55 	bl	8002aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000128 	.word	0x20000128

08000e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fc97 	bl	80007d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
	}
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f30:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <_sbrk+0x5c>)
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <_sbrk+0x60>)
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <_sbrk+0x64>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d102      	bne.n	8000f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <_sbrk+0x64>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <_sbrk+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d207      	bcs.n	8000f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f58:	f002 fd30 	bl	80039bc <__errno>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	220c      	movs	r2, #12
 8000f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	e009      	b.n	8000f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6e:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <_sbrk+0x64>)
 8000f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20030000 	.word	0x20030000
 8000f88:	00000400 	.word	0x00000400
 8000f8c:	20000124 	.word	0x20000124
 8000f90:	20000180 	.word	0x20000180

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <SystemInit+0x20>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a05      	ldr	r2, [pc, #20]	; (8000fb4 <SystemInit+0x20>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <MX_USART3_UART_Init+0x50>)
 8000fc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fdc:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fee:	4805      	ldr	r0, [pc, #20]	; (8001004 <MX_USART3_UART_Init+0x4c>)
 8000ff0:	f001 fc28 	bl	8002844 <HAL_UART_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ffa:	f7ff fe75 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000128 	.word	0x20000128
 8001008:	40004800 	.word	0x40004800

0800100c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <HAL_UART_MspInit+0x94>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d134      	bne.n	8001098 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_UART_MspInit+0x98>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <HAL_UART_MspInit+0x98>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_UART_MspInit+0x98>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_UART_MspInit+0x98>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_UART_MspInit+0x98>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_UART_MspInit+0x98>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001066:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001078:	2307      	movs	r3, #7
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <HAL_UART_MspInit+0x9c>)
 8001084:	f000 fa76 	bl	8001574 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2027      	movs	r0, #39	; 0x27
 800108e:	f000 f9a8 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001092:	2027      	movs	r0, #39	; 0x27
 8001094:	f000 f9c1 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	; 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40004800 	.word	0x40004800
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40020c00 	.word	0x40020c00

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b0:	480d      	ldr	r0, [pc, #52]	; (80010e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010b2:	490e      	ldr	r1, [pc, #56]	; (80010ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b4:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c8:	4c0b      	ldr	r4, [pc, #44]	; (80010f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d6:	f7ff ff5d 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010da:	f002 fc75 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fd0d 	bl	8000afc <main>
  bx  lr    
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80010f0:	08004e14 	.word	0x08004e14
  ldr r2, =_sbss
 80010f4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80010f8:	20000180 	.word	0x20000180

080010fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <HAL_Init+0x40>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_Init+0x40>)
 8001116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a07      	ldr	r2, [pc, #28]	; (8001140 <HAL_Init+0x40>)
 8001122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001128:	2003      	movs	r0, #3
 800112a:	f000 f94f 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112e:	2000      	movs	r0, #0
 8001130:	f000 f808 	bl	8001144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001134:	f7ff fe2e 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023c00 	.word	0x40023c00

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_InitTick+0x54>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x58>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fbb3 f3f1 	udiv	r3, r3, r1
 800115e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f967 	bl	8001436 <HAL_SYSTICK_Config>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e00e      	b.n	8001190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b0f      	cmp	r3, #15
 8001176:	d80a      	bhi.n	800118e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001178:	2200      	movs	r2, #0
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f000 f92f 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_InitTick+0x5c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
 800118c:	e000      	b.n	8001190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000054 	.word	0x20000054
 800119c:	2000005c 	.word	0x2000005c
 80011a0:	20000058 	.word	0x20000058

080011a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x20>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x24>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_IncTick+0x24>)
 80011b6:	6013      	str	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2000005c 	.word	0x2000005c
 80011c8:	2000016c 	.word	0x2000016c

080011cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return uwTick;
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_GetTick+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	2000016c 	.word	0x2000016c

080011e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ec:	f7ff ffee 	bl	80011cc <HAL_GetTick>
 80011f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011fc:	d005      	beq.n	800120a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_Delay+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120a:	bf00      	nop
 800120c:	f7ff ffde 	bl	80011cc <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	429a      	cmp	r2, r3
 800121a:	d8f7      	bhi.n	800120c <HAL_Delay+0x28>
  {
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000005c 	.word	0x2000005c

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff29 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff3e 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff8e 	bl	8001320 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff31 	bl	8001290 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff feb6 	bl	80011cc <HAL_GetTick>
 8001460:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d008      	beq.n	8001480 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e052      	b.n	8001526 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0216 	bic.w	r2, r2, #22
 800148e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d103      	bne.n	80014b0 <HAL_DMA_Abort+0x62>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0208 	bic.w	r2, r2, #8
 80014be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d0:	e013      	b.n	80014fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d2:	f7ff fe7b 	bl	80011cc <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d90c      	bls.n	80014fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2220      	movs	r2, #32
 80014e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e015      	b.n	8001526 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e4      	bne.n	80014d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150c:	223f      	movs	r2, #63	; 0x3f
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d004      	beq.n	800154c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e00c      	b.n	8001566 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2205      	movs	r2, #5
 8001550:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e177      	b.n	8001880 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8166 	bne.w	800187a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80c0 	beq.w	800187a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b66      	ldr	r3, [pc, #408]	; (8001898 <HAL_GPIO_Init+0x324>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a65      	ldr	r2, [pc, #404]	; (8001898 <HAL_GPIO_Init+0x324>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_GPIO_Init+0x324>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001716:	4a61      	ldr	r2, [pc, #388]	; (800189c <HAL_GPIO_Init+0x328>)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_GPIO_Init+0x32c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d037      	beq.n	80017b2 <HAL_GPIO_Init+0x23e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a57      	ldr	r2, [pc, #348]	; (80018a4 <HAL_GPIO_Init+0x330>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d031      	beq.n	80017ae <HAL_GPIO_Init+0x23a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a56      	ldr	r2, [pc, #344]	; (80018a8 <HAL_GPIO_Init+0x334>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d02b      	beq.n	80017aa <HAL_GPIO_Init+0x236>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a55      	ldr	r2, [pc, #340]	; (80018ac <HAL_GPIO_Init+0x338>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d025      	beq.n	80017a6 <HAL_GPIO_Init+0x232>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_GPIO_Init+0x33c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01f      	beq.n	80017a2 <HAL_GPIO_Init+0x22e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a53      	ldr	r2, [pc, #332]	; (80018b4 <HAL_GPIO_Init+0x340>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d019      	beq.n	800179e <HAL_GPIO_Init+0x22a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_GPIO_Init+0x344>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d013      	beq.n	800179a <HAL_GPIO_Init+0x226>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a51      	ldr	r2, [pc, #324]	; (80018bc <HAL_GPIO_Init+0x348>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d00d      	beq.n	8001796 <HAL_GPIO_Init+0x222>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a50      	ldr	r2, [pc, #320]	; (80018c0 <HAL_GPIO_Init+0x34c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d007      	beq.n	8001792 <HAL_GPIO_Init+0x21e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_GPIO_Init+0x350>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d101      	bne.n	800178e <HAL_GPIO_Init+0x21a>
 800178a:	2309      	movs	r3, #9
 800178c:	e012      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 800178e:	230a      	movs	r3, #10
 8001790:	e010      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 8001792:	2308      	movs	r3, #8
 8001794:	e00e      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 8001796:	2307      	movs	r3, #7
 8001798:	e00c      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 800179a:	2306      	movs	r3, #6
 800179c:	e00a      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 800179e:	2305      	movs	r3, #5
 80017a0:	e008      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x240>
 80017b2:	2300      	movs	r3, #0
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c4:	4935      	ldr	r1, [pc, #212]	; (800189c <HAL_GPIO_Init+0x328>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_GPIO_Init+0x354>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <HAL_GPIO_Init+0x354>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_GPIO_Init+0x354>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a29      	ldr	r2, [pc, #164]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184a:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_GPIO_Init+0x354>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_GPIO_Init+0x354>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3301      	adds	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	f67f ae84 	bls.w	8001590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40022000 	.word	0x40022000
 80018c4:	40022400 	.word	0x40022400
 80018c8:	40013c00 	.word	0x40013c00

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_PWREx_EnableOverDrive+0x90>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a1f      	ldr	r2, [pc, #124]	; (8001990 <HAL_PWREx_EnableOverDrive+0x90>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_PWREx_EnableOverDrive+0x90>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <HAL_PWREx_EnableOverDrive+0x94>)
 8001928:	2201      	movs	r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800192c:	f7ff fc4e 	bl	80011cc <HAL_GetTick>
 8001930:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001932:	e009      	b.n	8001948 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001934:	f7ff fc4a 	bl	80011cc <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001942:	d901      	bls.n	8001948 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e01f      	b.n	8001988 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_PWREx_EnableOverDrive+0x98>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d1ee      	bne.n	8001934 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800195c:	f7ff fc36 	bl	80011cc <HAL_GetTick>
 8001960:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001962:	e009      	b.n	8001978 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001964:	f7ff fc32 	bl	80011cc <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001972:	d901      	bls.n	8001978 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e007      	b.n	8001988 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <HAL_PWREx_EnableOverDrive+0x98>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001984:	d1ee      	bne.n	8001964 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	420e0040 	.word	0x420e0040
 8001998:	40007000 	.word	0x40007000
 800199c:	420e0044 	.word	0x420e0044

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e267      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d075      	beq.n	8001aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019be:	4b88      	ldr	r3, [pc, #544]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d00c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	4b85      	ldr	r3, [pc, #532]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d112      	bne.n	80019fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d6:	4b82      	ldr	r3, [pc, #520]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e2:	d10b      	bne.n	80019fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	4b7e      	ldr	r3, [pc, #504]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d05b      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x108>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d157      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e242      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a04:	d106      	bne.n	8001a14 <HAL_RCC_OscConfig+0x74>
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a75      	ldr	r2, [pc, #468]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e01d      	b.n	8001a50 <HAL_RCC_OscConfig+0xb0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x98>
 8001a1e:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6f      	ldr	r2, [pc, #444]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6c      	ldr	r2, [pc, #432]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0xb0>
 8001a38:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a68      	ldr	r2, [pc, #416]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b66      	ldr	r3, [pc, #408]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a65      	ldr	r2, [pc, #404]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d013      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fbb8 	bl	80011cc <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a60:	f7ff fbb4 	bl	80011cc <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e207      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	4b5b      	ldr	r3, [pc, #364]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0xc0>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fba4 	bl	80011cc <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fba0 	bl	80011cc <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1f3      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9a:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0xe8>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d063      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00b      	beq.n	8001ada <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac2:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d11c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d116      	bne.n	8001b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d005      	beq.n	8001af2 <HAL_RCC_OscConfig+0x152>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e1c7      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af2:	4b3b      	ldr	r3, [pc, #236]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4937      	ldr	r1, [pc, #220]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	e03a      	b.n	8001b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b10:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <HAL_RCC_OscConfig+0x244>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff fb59 	bl	80011cc <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fb55 	bl	80011cc <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e1a8      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4925      	ldr	r1, [pc, #148]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e015      	b.n	8001b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b52:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x244>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb38 	bl	80011cc <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b60:	f7ff fb34 	bl	80011cc <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e187      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d036      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d016      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_RCC_OscConfig+0x248>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff fb18 	bl	80011cc <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fb14 	bl	80011cc <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e167      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f0      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x200>
 8001bbe:	e01b      	b.n	8001bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_OscConfig+0x248>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff fb01 	bl	80011cc <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	e00e      	b.n	8001bec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bce:	f7ff fafd 	bl	80011cc <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d907      	bls.n	8001bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e150      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
 8001be0:	40023800 	.word	0x40023800
 8001be4:	42470000 	.word	0x42470000
 8001be8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	4b88      	ldr	r3, [pc, #544]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1ea      	bne.n	8001bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8097 	beq.w	8001d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b81      	ldr	r3, [pc, #516]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	4b7d      	ldr	r3, [pc, #500]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a7c      	ldr	r2, [pc, #496]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b74      	ldr	r3, [pc, #464]	; (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a73      	ldr	r2, [pc, #460]	; (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fabd 	bl	80011cc <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7ff fab9 	bl	80011cc <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e10c      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b6a      	ldr	r3, [pc, #424]	; (8001e14 <HAL_RCC_OscConfig+0x474>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x2ea>
 8001c7c:	4b64      	ldr	r3, [pc, #400]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c80:	4a63      	ldr	r2, [pc, #396]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6713      	str	r3, [r2, #112]	; 0x70
 8001c88:	e01c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x324>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x30c>
 8001c92:	4b5f      	ldr	r3, [pc, #380]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c96:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9e:	4b5c      	ldr	r3, [pc, #368]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a5b      	ldr	r2, [pc, #364]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	e00b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x324>
 8001cac:	4b58      	ldr	r3, [pc, #352]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4a57      	ldr	r2, [pc, #348]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb8:	4b55      	ldr	r3, [pc, #340]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	f023 0304 	bic.w	r3, r3, #4
 8001cc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d015      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fa7e 	bl	80011cc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fa7a 	bl	80011cc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0cb      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cea:	4b49      	ldr	r3, [pc, #292]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0ee      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x334>
 8001cf6:	e014      	b.n	8001d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf8:	f7ff fa68 	bl	80011cc <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7ff fa64 	bl	80011cc <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0b5      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ee      	bne.n	8001d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d22:	7dfb      	ldrb	r3, [r7, #23]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a1 	beq.w	8001e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d05c      	beq.n	8001e04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d141      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_RCC_OscConfig+0x478>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fa38 	bl	80011cc <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff fa34 	bl	80011cc <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e087      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	491b      	ldr	r1, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_RCC_OscConfig+0x478>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fa0d 	bl	80011cc <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff fa09 	bl	80011cc <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e05c      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x416>
 8001dd4:	e054      	b.n	8001e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_RCC_OscConfig+0x478>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f9f6 	bl	80011cc <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de4:	f7ff f9f2 	bl	80011cc <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e045      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_OscConfig+0x470>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x444>
 8001e02:	e03d      	b.n	8001e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e038      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000
 8001e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <HAL_RCC_OscConfig+0x4ec>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d028      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d121      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d11a      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d111      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	3b01      	subs	r3, #1
 8001e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0cc      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d90c      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b65      	ldr	r3, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d044      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d119      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e06f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e067      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4934      	ldr	r1, [pc, #208]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f80:	f7ff f924 	bl	80011cc <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff f920 	bl	80011cc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e04f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d20c      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490a      	ldr	r1, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f884 	bl	8001144 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00
 800204c:	40023800 	.word	0x40023800
 8002050:	08004d54 	.word	0x08004d54
 8002054:	20000054 	.word	0x20000054
 8002058:	20000058 	.word	0x20000058

0800205c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002060:	b094      	sub	sp, #80	; 0x50
 8002062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	647b      	str	r3, [r7, #68]	; 0x44
 8002068:	2300      	movs	r3, #0
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800206c:	2300      	movs	r3, #0
 800206e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <HAL_RCC_GetSysClockFreq+0x200>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d00d      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002080:	2b08      	cmp	r3, #8
 8002082:	f200 80e1 	bhi.w	8002248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x34>
 800208a:	2b04      	cmp	r3, #4
 800208c:	d003      	beq.n	8002096 <HAL_RCC_GetSysClockFreq+0x3a>
 800208e:	e0db      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002090:	4b73      	ldr	r3, [pc, #460]	; (8002260 <HAL_RCC_GetSysClockFreq+0x204>)
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002094:	e0db      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002096:	4b73      	ldr	r3, [pc, #460]	; (8002264 <HAL_RCC_GetSysClockFreq+0x208>)
 8002098:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800209a:	e0d8      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800209c:	4b6f      	ldr	r3, [pc, #444]	; (800225c <HAL_RCC_GetSysClockFreq+0x200>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020a6:	4b6d      	ldr	r3, [pc, #436]	; (800225c <HAL_RCC_GetSysClockFreq+0x200>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d063      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b2:	4b6a      	ldr	r3, [pc, #424]	; (800225c <HAL_RCC_GetSysClockFreq+0x200>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	099b      	lsrs	r3, r3, #6
 80020b8:	2200      	movs	r2, #0
 80020ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80020bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
 80020ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020ce:	4622      	mov	r2, r4
 80020d0:	462b      	mov	r3, r5
 80020d2:	f04f 0000 	mov.w	r0, #0
 80020d6:	f04f 0100 	mov.w	r1, #0
 80020da:	0159      	lsls	r1, r3, #5
 80020dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e0:	0150      	lsls	r0, r2, #5
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4621      	mov	r1, r4
 80020e8:	1a51      	subs	r1, r2, r1
 80020ea:	6139      	str	r1, [r7, #16]
 80020ec:	4629      	mov	r1, r5
 80020ee:	eb63 0301 	sbc.w	r3, r3, r1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002100:	4659      	mov	r1, fp
 8002102:	018b      	lsls	r3, r1, #6
 8002104:	4651      	mov	r1, sl
 8002106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800210a:	4651      	mov	r1, sl
 800210c:	018a      	lsls	r2, r1, #6
 800210e:	4651      	mov	r1, sl
 8002110:	ebb2 0801 	subs.w	r8, r2, r1
 8002114:	4659      	mov	r1, fp
 8002116:	eb63 0901 	sbc.w	r9, r3, r1
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800212a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800212e:	4690      	mov	r8, r2
 8002130:	4699      	mov	r9, r3
 8002132:	4623      	mov	r3, r4
 8002134:	eb18 0303 	adds.w	r3, r8, r3
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	462b      	mov	r3, r5
 800213c:	eb49 0303 	adc.w	r3, r9, r3
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800214e:	4629      	mov	r1, r5
 8002150:	024b      	lsls	r3, r1, #9
 8002152:	4621      	mov	r1, r4
 8002154:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002158:	4621      	mov	r1, r4
 800215a:	024a      	lsls	r2, r1, #9
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002162:	2200      	movs	r2, #0
 8002164:	62bb      	str	r3, [r7, #40]	; 0x28
 8002166:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800216c:	f7fe f8a0 	bl	80002b0 <__aeabi_uldivmod>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4613      	mov	r3, r2
 8002176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002178:	e058      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_RCC_GetSysClockFreq+0x200>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	099b      	lsrs	r3, r3, #6
 8002180:	2200      	movs	r2, #0
 8002182:	4618      	mov	r0, r3
 8002184:	4611      	mov	r1, r2
 8002186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800218a:	623b      	str	r3, [r7, #32]
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
 8002190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002194:	4642      	mov	r2, r8
 8002196:	464b      	mov	r3, r9
 8002198:	f04f 0000 	mov.w	r0, #0
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	0159      	lsls	r1, r3, #5
 80021a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021a6:	0150      	lsls	r0, r2, #5
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4641      	mov	r1, r8
 80021ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80021b2:	4649      	mov	r1, r9
 80021b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021cc:	ebb2 040a 	subs.w	r4, r2, sl
 80021d0:	eb63 050b 	sbc.w	r5, r3, fp
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	00eb      	lsls	r3, r5, #3
 80021de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e2:	00e2      	lsls	r2, r4, #3
 80021e4:	4614      	mov	r4, r2
 80021e6:	461d      	mov	r5, r3
 80021e8:	4643      	mov	r3, r8
 80021ea:	18e3      	adds	r3, r4, r3
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	464b      	mov	r3, r9
 80021f0:	eb45 0303 	adc.w	r3, r5, r3
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002202:	4629      	mov	r1, r5
 8002204:	028b      	lsls	r3, r1, #10
 8002206:	4621      	mov	r1, r4
 8002208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800220c:	4621      	mov	r1, r4
 800220e:	028a      	lsls	r2, r1, #10
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002216:	2200      	movs	r2, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	61fa      	str	r2, [r7, #28]
 800221c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002220:	f7fe f846 	bl	80002b0 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_GetSysClockFreq+0x200>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	3301      	adds	r3, #1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800223c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800223e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002246:	e002      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_RCC_GetSysClockFreq+0x204>)
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800224c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002250:	4618      	mov	r0, r3
 8002252:	3750      	adds	r7, #80	; 0x50
 8002254:	46bd      	mov	sp, r7
 8002256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	00f42400 	.word	0x00f42400
 8002264:	007a1200 	.word	0x007a1200

08002268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_RCC_GetHCLKFreq+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000054 	.word	0x20000054

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002284:	f7ff fff0 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0a9b      	lsrs	r3, r3, #10
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800229c:	4618      	mov	r0, r3
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08004d64 	.word	0x08004d64

080022a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022ac:	f7ff ffdc 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0b5b      	lsrs	r3, r3, #13
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4903      	ldr	r1, [pc, #12]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08004d64 	.word	0x08004d64

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10b      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002300:	2b00      	cmp	r3, #0
 8002302:	d075      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002304:	4b91      	ldr	r3, [pc, #580]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800230a:	f7fe ff5f 	bl	80011cc <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002312:	f7fe ff5b 	bl	80011cc <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e189      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002324:	4b8a      	ldr	r3, [pc, #552]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d009      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	019a      	lsls	r2, r3, #6
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	071b      	lsls	r3, r3, #28
 8002348:	4981      	ldr	r1, [pc, #516]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01f      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800235c:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800235e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002362:	0f1b      	lsrs	r3, r3, #28
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	019a      	lsls	r2, r3, #6
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	431a      	orrs	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	071b      	lsls	r3, r3, #28
 800237c:	4974      	ldr	r1, [pc, #464]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800237e:	4313      	orrs	r3, r2
 8002380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002384:	4b72      	ldr	r3, [pc, #456]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238a:	f023 021f 	bic.w	r2, r3, #31
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	3b01      	subs	r3, #1
 8002394:	496e      	ldr	r1, [pc, #440]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00d      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	019a      	lsls	r2, r3, #6
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	071b      	lsls	r3, r3, #28
 80023bc:	4964      	ldr	r1, [pc, #400]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023c4:	4b61      	ldr	r3, [pc, #388]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023ca:	f7fe feff 	bl	80011cc <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023d2:	f7fe fefb 	bl	80011cc <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e129      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002404:	2b00      	cmp	r3, #0
 8002406:	d079      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002408:	4b52      	ldr	r3, [pc, #328]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800240e:	f7fe fedd 	bl	80011cc <HAL_GetTick>
 8002412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002416:	f7fe fed9 	bl	80011cc <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e107      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002428:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002434:	d0ef      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d020      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	0f1b      	lsrs	r3, r3, #28
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	019a      	lsls	r2, r3, #6
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	431a      	orrs	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	071b      	lsls	r3, r3, #28
 8002462:	493b      	ldr	r1, [pc, #236]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002470:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	3b01      	subs	r3, #1
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	4934      	ldr	r1, [pc, #208]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01e      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002490:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	0e1b      	lsrs	r3, r3, #24
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	019a      	lsls	r2, r3, #6
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	061b      	lsls	r3, r3, #24
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	071b      	lsls	r3, r3, #28
 80024b0:	4927      	ldr	r1, [pc, #156]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	4922      	ldr	r1, [pc, #136]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024d4:	f7fe fe7a 	bl	80011cc <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024dc:	f7fe fe76 	bl	80011cc <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0a4      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024fa:	d1ef      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 808b 	beq.w	8002620 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002532:	f7fe fe4b 	bl	80011cc <HAL_GetTick>
 8002536:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002538:	e010      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fe47 	bl	80011cc <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d909      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e075      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800254c:	42470068 	.word	0x42470068
 8002550:	40023800 	.word	0x40023800
 8002554:	42470070 	.word	0x42470070
 8002558:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0e8      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002570:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d02f      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	429a      	cmp	r2, r3
 8002584:	d028      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002586:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002596:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800259c:	4a29      	ldr	r2, [pc, #164]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025a2:	4b28      	ldr	r3, [pc, #160]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d114      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe fe0d 	bl	80011cc <HAL_GetTick>
 80025b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe fe09 	bl	80011cc <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e035      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	4b1d      	ldr	r3, [pc, #116]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ee      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025e4:	d10d      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80025e6:	4b17      	ldr	r3, [pc, #92]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fa:	4912      	ldr	r1, [pc, #72]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]
 8002600:	e005      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002608:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800260c:	6093      	str	r3, [r2, #8]
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002610:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261a:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800261c:	4313      	orrs	r3, r2
 800261e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002634:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40007000 	.word	0x40007000
 8002644:	40023800 	.word	0x40023800
 8002648:	42470e40 	.word	0x42470e40
 800264c:	424711e0 	.word	0x424711e0

08002650 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e066      	b.n	8002734 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7f5b      	ldrb	r3, [r3, #29]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fb62 	bl	8000d40 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	22ca      	movs	r2, #202	; 0xca
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2253      	movs	r2, #83	; 0x53
 8002690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f87a 	bl	800278c <RTC_EnterInitMode>
 8002698:	4603      	mov	r3, r0
 800269a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d12c      	bne.n	80026fc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80026b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68d2      	ldr	r2, [r2, #12]
 80026dc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6919      	ldr	r1, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	041a      	lsls	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f881 	bl	80027fa <RTC_ExitInitMode>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d113      	bne.n	800272a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	22ff      	movs	r2, #255	; 0xff
 8002730:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002756:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002758:	f7fe fd38 	bl	80011cc <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800275e:	e009      	b.n	8002774 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002760:	f7fe fd34 	bl	80011cc <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276e:	d901      	bls.n	8002774 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e007      	b.n	8002784 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ee      	beq.n	8002760 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d122      	bne.n	80027f0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027ba:	f7fe fd07 	bl	80011cc <HAL_GetTick>
 80027be:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027c0:	e00c      	b.n	80027dc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027c2:	f7fe fd03 	bl	80011cc <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d0:	d904      	bls.n	80027dc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2204      	movs	r2, #4
 80027d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <RTC_EnterInitMode+0x64>
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d1e8      	bne.n	80027c2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002814:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff89 	bl	800273c <HAL_RTC_WaitForSynchro>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d004      	beq.n	800283a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e03f      	b.n	80028d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fbce 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002886:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fe23 	bl	80034d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800289c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b08a      	sub	sp, #40	; 0x28
 80028e2:	af02      	add	r7, sp, #8
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d17c      	bne.n	80029f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <HAL_UART_Transmit+0x2c>
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e075      	b.n	80029fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_UART_Transmit+0x3e>
 8002918:	2302      	movs	r3, #2
 800291a:	e06e      	b.n	80029fa <HAL_UART_Transmit+0x11c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	; 0x21
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002932:	f7fe fc4b 	bl	80011cc <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	88fa      	ldrh	r2, [r7, #6]
 800293c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	88fa      	ldrh	r2, [r7, #6]
 8002942:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d108      	bne.n	8002960 <HAL_UART_Transmit+0x82>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d104      	bne.n	8002960 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	61bb      	str	r3, [r7, #24]
 800295e:	e003      	b.n	8002968 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002970:	e02a      	b.n	80029c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 fb63 	bl	8003048 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e036      	b.n	80029fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	3302      	adds	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e007      	b.n	80029ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1cf      	bne.n	8002972 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2200      	movs	r2, #0
 80029da:	2140      	movs	r1, #64	; 0x40
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 fb33 	bl	8003048 <UART_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e006      	b.n	80029fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d130      	bne.n	8002a7e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UART_Transmit_IT+0x26>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e029      	b.n	8002a80 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Transmit_IT+0x38>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e022      	b.n	8002a80 <HAL_UART_Transmit_IT+0x7e>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	88fa      	ldrh	r2, [r7, #6]
 8002a52:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2221      	movs	r2, #33	; 0x21
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a78:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d11d      	bne.n	8002ae2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <HAL_UART_Receive_IT+0x26>
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e016      	b.n	8002ae4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_UART_Receive_IT+0x38>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e00f      	b.n	8002ae4 <HAL_UART_Receive_IT+0x58>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	68b9      	ldr	r1, [r7, #8]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fb23 	bl	8003124 <UART_Start_Receive_IT>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	e000      	b.n	8002ae4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0ba      	sub	sp, #232	; 0xe8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_UART_IRQHandler+0x66>
 8002b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fc07 	bl	800335e <UART_Receive_IT>
      return;
 8002b50:	e256      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80de 	beq.w	8002d18 <HAL_UART_IRQHandler+0x22c>
 8002b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d106      	bne.n	8002b76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80d1 	beq.w	8002d18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_UART_IRQHandler+0xae>
 8002b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f043 0201 	orr.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9e:	f003 0304 	and.w	r3, r3, #4
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00b      	beq.n	8002bbe <HAL_UART_IRQHandler+0xd2>
 8002ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d005      	beq.n	8002bbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0202 	orr.w	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00b      	beq.n	8002be2 <HAL_UART_IRQHandler+0xf6>
 8002bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f043 0204 	orr.w	r2, r3, #4
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d011      	beq.n	8002c12 <HAL_UART_IRQHandler+0x126>
 8002bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f043 0208 	orr.w	r2, r3, #8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 81ed 	beq.w	8002ff6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_UART_IRQHandler+0x14e>
 8002c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fb92 	bl	800335e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b40      	cmp	r3, #64	; 0x40
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_UART_IRQHandler+0x17a>
 8002c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d04f      	beq.n	8002d06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa9a 	bl	80031a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d141      	bne.n	8002cfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3314      	adds	r3, #20
 8002c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3314      	adds	r3, #20
 8002ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cb6:	e841 2300 	strex	r3, r2, [r1]
 8002cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1d9      	bne.n	8002c7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d013      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	4a7d      	ldr	r2, [pc, #500]	; (8002ec8 <HAL_UART_IRQHandler+0x3dc>)
 8002cd4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe fc27 	bl	800152e <HAL_DMA_Abort_IT>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	e00e      	b.n	8002d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f990 	bl	800301c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	e00a      	b.n	8002d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f98c 	bl	800301c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	e006      	b.n	8002d14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f988 	bl	800301c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d12:	e170      	b.n	8002ff6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d14:	bf00      	nop
    return;
 8002d16:	e16e      	b.n	8002ff6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 814a 	bne.w	8002fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8143 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 813c 	beq.w	8002fb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	f040 80b4 	bne.w	8002ecc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8140 	beq.w	8002ffa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d82:	429a      	cmp	r2, r3
 8002d84:	f080 8139 	bcs.w	8002ffa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9a:	f000 8088 	beq.w	8002eae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	330c      	adds	r3, #12
 8002da4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002db4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002de2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1d9      	bne.n	8002d9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3314      	adds	r3, #20
 8002df0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3314      	adds	r3, #20
 8002e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e1      	bne.n	8002dea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e30:	e853 3f00 	ldrex	r3, [r3]
 8002e34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3314      	adds	r3, #20
 8002e46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e3      	bne.n	8002e26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e7e:	f023 0310 	bic.w	r3, r3, #16
 8002e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e90:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e3      	bne.n	8002e6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fad0 	bl	800144e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f8b6 	bl	8003030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ec4:	e099      	b.n	8002ffa <HAL_UART_IRQHandler+0x50e>
 8002ec6:	bf00      	nop
 8002ec8:	08003267 	.word	0x08003267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 808b 	beq.w	8002ffe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8086 	beq.w	8002ffe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f16:	647a      	str	r2, [r7, #68]	; 0x44
 8002f18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e3      	bne.n	8002ef2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	e853 3f00 	ldrex	r3, [r3]
 8002f38:	623b      	str	r3, [r7, #32]
   return(result);
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3314      	adds	r3, #20
 8002f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f56:	e841 2300 	strex	r3, r2, [r1]
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e3      	bne.n	8002f2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	330c      	adds	r3, #12
 8002f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	e853 3f00 	ldrex	r3, [r3]
 8002f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0310 	bic.w	r3, r3, #16
 8002f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	330c      	adds	r3, #12
 8002f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f94:	61fa      	str	r2, [r7, #28]
 8002f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	69b9      	ldr	r1, [r7, #24]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	e841 2300 	strex	r3, r2, [r1]
 8002fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e3      	bne.n	8002f70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fac:	4619      	mov	r1, r3
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f83e 	bl	8003030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fb4:	e023      	b.n	8002ffe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x4ea>
 8002fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f95d 	bl	800328e <UART_Transmit_IT>
    return;
 8002fd4:	e014      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00e      	beq.n	8003000 <HAL_UART_IRQHandler+0x514>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f99d 	bl	800332e <UART_EndTransmit_IT>
    return;
 8002ff4:	e004      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
    return;
 8002ff6:	bf00      	nop
 8002ff8:	e002      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
      return;
 8002ffa:	bf00      	nop
 8002ffc:	e000      	b.n	8003000 <HAL_UART_IRQHandler+0x514>
      return;
 8002ffe:	bf00      	nop
  }
}
 8003000:	37e8      	adds	r7, #232	; 0xe8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop

08003008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b090      	sub	sp, #64	; 0x40
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	4613      	mov	r3, r2
 8003056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003058:	e050      	b.n	80030fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d04c      	beq.n	80030fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <UART_WaitOnFlagUntilTimeout+0x30>
 8003068:	f7fe f8b0 	bl	80011cc <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003074:	429a      	cmp	r2, r3
 8003076:	d241      	bcs.n	80030fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003098:	637a      	str	r2, [r7, #52]	; 0x34
 800309a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800309e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3314      	adds	r3, #20
 80030b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	613b      	str	r3, [r7, #16]
   return(result);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030cc:	623a      	str	r2, [r7, #32]
 80030ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	69f9      	ldr	r1, [r7, #28]
 80030d2:	6a3a      	ldr	r2, [r7, #32]
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e00f      	b.n	800311c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	4013      	ands	r3, r2
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	429a      	cmp	r2, r3
 800310a:	bf0c      	ite	eq
 800310c:	2301      	moveq	r3, #1
 800310e:	2300      	movne	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	429a      	cmp	r2, r3
 8003118:	d09f      	beq.n	800305a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3740      	adds	r7, #64	; 0x40
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	88fa      	ldrh	r2, [r7, #6]
 8003142:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2222      	movs	r2, #34	; 0x22
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003170:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0220 	orr.w	r2, r2, #32
 8003190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b095      	sub	sp, #84	; 0x54
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	e853 3f00 	ldrex	r3, [r3]
 80031b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	330c      	adds	r3, #12
 80031c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031c8:	643a      	str	r2, [r7, #64]	; 0x40
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e5      	bne.n	80031a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3314      	adds	r3, #20
 80031e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	e853 3f00 	ldrex	r3, [r3]
 80031ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f023 0301 	bic.w	r3, r3, #1
 80031f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003204:	e841 2300 	strex	r3, r2, [r1]
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e5      	bne.n	80031dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	2b01      	cmp	r3, #1
 8003216:	d119      	bne.n	800324c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	60bb      	str	r3, [r7, #8]
   return(result);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f023 0310 	bic.w	r3, r3, #16
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003238:	61ba      	str	r2, [r7, #24]
 800323a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	613b      	str	r3, [r7, #16]
   return(result);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e5      	bne.n	8003218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	; 0x30
}
 800325a:	bf00      	nop
 800325c:	3754      	adds	r7, #84	; 0x54
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff fecb 	bl	800301c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800328e:	b480      	push	{r7}
 8003290:	b085      	sub	sp, #20
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b21      	cmp	r3, #33	; 0x21
 80032a0:	d13e      	bne.n	8003320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032aa:	d114      	bne.n	80032d6 <UART_Transmit_IT+0x48>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d110      	bne.n	80032d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	1c9a      	adds	r2, r3, #2
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	e008      	b.n	80032e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6211      	str	r1, [r2, #32]
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10f      	bne.n	800331c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	e000      	b.n	8003322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003320:	2302      	movs	r3, #2
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fe5a 	bl	8003008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b08c      	sub	sp, #48	; 0x30
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b22      	cmp	r3, #34	; 0x22
 8003370:	f040 80ab 	bne.w	80034ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337c:	d117      	bne.n	80033ae <UART_Receive_IT+0x50>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d113      	bne.n	80033ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	b29b      	uxth	r3, r3
 8003398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339c:	b29a      	uxth	r2, r3
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	1c9a      	adds	r2, r3, #2
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	629a      	str	r2, [r3, #40]	; 0x28
 80033ac:	e026      	b.n	80033fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c0:	d007      	beq.n	80033d2 <UART_Receive_IT+0x74>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <UART_Receive_IT+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e008      	b.n	80033f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29b      	uxth	r3, r3
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	4619      	mov	r1, r3
 800340a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800340c:	2b00      	cmp	r3, #0
 800340e:	d15a      	bne.n	80034c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0220 	bic.w	r2, r2, #32
 800341e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800342e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	2b01      	cmp	r3, #1
 800344e:	d135      	bne.n	80034bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	613b      	str	r3, [r7, #16]
   return(result);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f023 0310 	bic.w	r3, r3, #16
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	623a      	str	r2, [r7, #32]
 8003478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	69f9      	ldr	r1, [r7, #28]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	61bb      	str	r3, [r7, #24]
   return(result);
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e5      	bne.n	8003456 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b10      	cmp	r3, #16
 8003496:	d10a      	bne.n	80034ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff fdbb 	bl	8003030 <HAL_UARTEx_RxEventCallback>
 80034ba:	e002      	b.n	80034c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fd fbc7 	bl	8000c50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e002      	b.n	80034cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3730      	adds	r7, #48	; 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d8:	b0c0      	sub	sp, #256	; 0x100
 80034da:	af00      	add	r7, sp, #0
 80034dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f0:	68d9      	ldr	r1, [r3, #12]
 80034f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	ea40 0301 	orr.w	r3, r0, r1
 80034fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	431a      	orrs	r2, r3
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800352c:	f021 010c 	bic.w	r1, r1, #12
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800353a:	430b      	orrs	r3, r1
 800353c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800353e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	6999      	ldr	r1, [r3, #24]
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	ea40 0301 	orr.w	r3, r0, r1
 800355a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <UART_SetConfig+0x2cc>)
 8003564:	429a      	cmp	r2, r3
 8003566:	d005      	beq.n	8003574 <UART_SetConfig+0xa0>
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4b8d      	ldr	r3, [pc, #564]	; (80037a4 <UART_SetConfig+0x2d0>)
 8003570:	429a      	cmp	r2, r3
 8003572:	d104      	bne.n	800357e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003574:	f7fe fe98 	bl	80022a8 <HAL_RCC_GetPCLK2Freq>
 8003578:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800357c:	e003      	b.n	8003586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800357e:	f7fe fe7f 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8003582:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003590:	f040 810c 	bne.w	80037ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003598:	2200      	movs	r2, #0
 800359a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800359e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035a6:	4622      	mov	r2, r4
 80035a8:	462b      	mov	r3, r5
 80035aa:	1891      	adds	r1, r2, r2
 80035ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ae:	415b      	adcs	r3, r3
 80035b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035b6:	4621      	mov	r1, r4
 80035b8:	eb12 0801 	adds.w	r8, r2, r1
 80035bc:	4629      	mov	r1, r5
 80035be:	eb43 0901 	adc.w	r9, r3, r1
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035d6:	4690      	mov	r8, r2
 80035d8:	4699      	mov	r9, r3
 80035da:	4623      	mov	r3, r4
 80035dc:	eb18 0303 	adds.w	r3, r8, r3
 80035e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035e4:	462b      	mov	r3, r5
 80035e6:	eb49 0303 	adc.w	r3, r9, r3
 80035ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003602:	460b      	mov	r3, r1
 8003604:	18db      	adds	r3, r3, r3
 8003606:	653b      	str	r3, [r7, #80]	; 0x50
 8003608:	4613      	mov	r3, r2
 800360a:	eb42 0303 	adc.w	r3, r2, r3
 800360e:	657b      	str	r3, [r7, #84]	; 0x54
 8003610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003618:	f7fc fe4a 	bl	80002b0 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <UART_SetConfig+0x2d4>)
 8003622:	fba3 2302 	umull	r2, r3, r3, r2
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	011c      	lsls	r4, r3, #4
 800362a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362e:	2200      	movs	r2, #0
 8003630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003634:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	1891      	adds	r1, r2, r2
 8003642:	64b9      	str	r1, [r7, #72]	; 0x48
 8003644:	415b      	adcs	r3, r3
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800364c:	4641      	mov	r1, r8
 800364e:	eb12 0a01 	adds.w	sl, r2, r1
 8003652:	4649      	mov	r1, r9
 8003654:	eb43 0b01 	adc.w	fp, r3, r1
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800366c:	4692      	mov	sl, r2
 800366e:	469b      	mov	fp, r3
 8003670:	4643      	mov	r3, r8
 8003672:	eb1a 0303 	adds.w	r3, sl, r3
 8003676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800367a:	464b      	mov	r3, r9
 800367c:	eb4b 0303 	adc.w	r3, fp, r3
 8003680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003690:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003698:	460b      	mov	r3, r1
 800369a:	18db      	adds	r3, r3, r3
 800369c:	643b      	str	r3, [r7, #64]	; 0x40
 800369e:	4613      	mov	r3, r2
 80036a0:	eb42 0303 	adc.w	r3, r2, r3
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
 80036a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ae:	f7fc fdff 	bl	80002b0 <__aeabi_uldivmod>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <UART_SetConfig+0x2d4>)
 80036ba:	fba3 2301 	umull	r2, r3, r3, r1
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2264      	movs	r2, #100	; 0x64
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	1acb      	subs	r3, r1, r3
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <UART_SetConfig+0x2d4>)
 80036d0:	fba3 2302 	umull	r2, r3, r3, r2
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036dc:	441c      	add	r4, r3
 80036de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036f0:	4642      	mov	r2, r8
 80036f2:	464b      	mov	r3, r9
 80036f4:	1891      	adds	r1, r2, r2
 80036f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80036f8:	415b      	adcs	r3, r3
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003700:	4641      	mov	r1, r8
 8003702:	1851      	adds	r1, r2, r1
 8003704:	6339      	str	r1, [r7, #48]	; 0x30
 8003706:	4649      	mov	r1, r9
 8003708:	414b      	adcs	r3, r1
 800370a:	637b      	str	r3, [r7, #52]	; 0x34
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003718:	4659      	mov	r1, fp
 800371a:	00cb      	lsls	r3, r1, #3
 800371c:	4651      	mov	r1, sl
 800371e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003722:	4651      	mov	r1, sl
 8003724:	00ca      	lsls	r2, r1, #3
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	4603      	mov	r3, r0
 800372c:	4642      	mov	r2, r8
 800372e:	189b      	adds	r3, r3, r2
 8003730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003734:	464b      	mov	r3, r9
 8003736:	460a      	mov	r2, r1
 8003738:	eb42 0303 	adc.w	r3, r2, r3
 800373c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800374c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003754:	460b      	mov	r3, r1
 8003756:	18db      	adds	r3, r3, r3
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
 800375a:	4613      	mov	r3, r2
 800375c:	eb42 0303 	adc.w	r3, r2, r3
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800376a:	f7fc fda1 	bl	80002b0 <__aeabi_uldivmod>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <UART_SetConfig+0x2d4>)
 8003774:	fba3 1302 	umull	r1, r3, r3, r2
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	2164      	movs	r1, #100	; 0x64
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	3332      	adds	r3, #50	; 0x32
 8003786:	4a08      	ldr	r2, [pc, #32]	; (80037a8 <UART_SetConfig+0x2d4>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	f003 0207 	and.w	r2, r3, #7
 8003792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4422      	add	r2, r4
 800379a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800379c:	e105      	b.n	80039aa <UART_SetConfig+0x4d6>
 800379e:	bf00      	nop
 80037a0:	40011000 	.word	0x40011000
 80037a4:	40011400 	.word	0x40011400
 80037a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037be:	4642      	mov	r2, r8
 80037c0:	464b      	mov	r3, r9
 80037c2:	1891      	adds	r1, r2, r2
 80037c4:	6239      	str	r1, [r7, #32]
 80037c6:	415b      	adcs	r3, r3
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ce:	4641      	mov	r1, r8
 80037d0:	1854      	adds	r4, r2, r1
 80037d2:	4649      	mov	r1, r9
 80037d4:	eb43 0501 	adc.w	r5, r3, r1
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	00eb      	lsls	r3, r5, #3
 80037e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037e6:	00e2      	lsls	r2, r4, #3
 80037e8:	4614      	mov	r4, r2
 80037ea:	461d      	mov	r5, r3
 80037ec:	4643      	mov	r3, r8
 80037ee:	18e3      	adds	r3, r4, r3
 80037f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037f4:	464b      	mov	r3, r9
 80037f6:	eb45 0303 	adc.w	r3, r5, r3
 80037fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800380a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800381a:	4629      	mov	r1, r5
 800381c:	008b      	lsls	r3, r1, #2
 800381e:	4621      	mov	r1, r4
 8003820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003824:	4621      	mov	r1, r4
 8003826:	008a      	lsls	r2, r1, #2
 8003828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800382c:	f7fc fd40 	bl	80002b0 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4b60      	ldr	r3, [pc, #384]	; (80039b8 <UART_SetConfig+0x4e4>)
 8003836:	fba3 2302 	umull	r2, r3, r3, r2
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	011c      	lsls	r4, r3, #4
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800384c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	61b9      	str	r1, [r7, #24]
 8003858:	415b      	adcs	r3, r3
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003860:	4641      	mov	r1, r8
 8003862:	1851      	adds	r1, r2, r1
 8003864:	6139      	str	r1, [r7, #16]
 8003866:	4649      	mov	r1, r9
 8003868:	414b      	adcs	r3, r1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003878:	4659      	mov	r1, fp
 800387a:	00cb      	lsls	r3, r1, #3
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003882:	4651      	mov	r1, sl
 8003884:	00ca      	lsls	r2, r1, #3
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	4603      	mov	r3, r0
 800388c:	4642      	mov	r2, r8
 800388e:	189b      	adds	r3, r3, r2
 8003890:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003894:	464b      	mov	r3, r9
 8003896:	460a      	mov	r2, r1
 8003898:	eb42 0303 	adc.w	r3, r2, r3
 800389c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80038aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038b8:	4649      	mov	r1, r9
 80038ba:	008b      	lsls	r3, r1, #2
 80038bc:	4641      	mov	r1, r8
 80038be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c2:	4641      	mov	r1, r8
 80038c4:	008a      	lsls	r2, r1, #2
 80038c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038ca:	f7fc fcf1 	bl	80002b0 <__aeabi_uldivmod>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <UART_SetConfig+0x4e4>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	2164      	movs	r1, #100	; 0x64
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	3332      	adds	r3, #50	; 0x32
 80038e6:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <UART_SetConfig+0x4e4>)
 80038e8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f2:	441c      	add	r4, r3
 80038f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f8:	2200      	movs	r2, #0
 80038fa:	673b      	str	r3, [r7, #112]	; 0x70
 80038fc:	677a      	str	r2, [r7, #116]	; 0x74
 80038fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003902:	4642      	mov	r2, r8
 8003904:	464b      	mov	r3, r9
 8003906:	1891      	adds	r1, r2, r2
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	415b      	adcs	r3, r3
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003912:	4641      	mov	r1, r8
 8003914:	1851      	adds	r1, r2, r1
 8003916:	6039      	str	r1, [r7, #0]
 8003918:	4649      	mov	r1, r9
 800391a:	414b      	adcs	r3, r1
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800392a:	4659      	mov	r1, fp
 800392c:	00cb      	lsls	r3, r1, #3
 800392e:	4651      	mov	r1, sl
 8003930:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003934:	4651      	mov	r1, sl
 8003936:	00ca      	lsls	r2, r1, #3
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	4603      	mov	r3, r0
 800393e:	4642      	mov	r2, r8
 8003940:	189b      	adds	r3, r3, r2
 8003942:	66bb      	str	r3, [r7, #104]	; 0x68
 8003944:	464b      	mov	r3, r9
 8003946:	460a      	mov	r2, r1
 8003948:	eb42 0303 	adc.w	r3, r2, r3
 800394c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	663b      	str	r3, [r7, #96]	; 0x60
 8003958:	667a      	str	r2, [r7, #100]	; 0x64
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003966:	4649      	mov	r1, r9
 8003968:	008b      	lsls	r3, r1, #2
 800396a:	4641      	mov	r1, r8
 800396c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003970:	4641      	mov	r1, r8
 8003972:	008a      	lsls	r2, r1, #2
 8003974:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003978:	f7fc fc9a 	bl	80002b0 <__aeabi_uldivmod>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <UART_SetConfig+0x4e4>)
 8003982:	fba3 1302 	umull	r1, r3, r3, r2
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2164      	movs	r1, #100	; 0x64
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	3332      	adds	r3, #50	; 0x32
 8003994:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <UART_SetConfig+0x4e4>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	f003 020f 	and.w	r2, r3, #15
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4422      	add	r2, r4
 80039a8:	609a      	str	r2, [r3, #8]
}
 80039aa:	bf00      	nop
 80039ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039b0:	46bd      	mov	sp, r7
 80039b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b6:	bf00      	nop
 80039b8:	51eb851f 	.word	0x51eb851f

080039bc <__errno>:
 80039bc:	4b01      	ldr	r3, [pc, #4]	; (80039c4 <__errno+0x8>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	20000060 	.word	0x20000060

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4d0d      	ldr	r5, [pc, #52]	; (8003a00 <__libc_init_array+0x38>)
 80039cc:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	2600      	movs	r6, #0
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	4d0b      	ldr	r5, [pc, #44]	; (8003a08 <__libc_init_array+0x40>)
 80039da:	4c0c      	ldr	r4, [pc, #48]	; (8003a0c <__libc_init_array+0x44>)
 80039dc:	f001 f88e 	bl	8004afc <_init>
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	2600      	movs	r6, #0
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08004e0c 	.word	0x08004e0c
 8003a04:	08004e0c 	.word	0x08004e0c
 8003a08:	08004e0c 	.word	0x08004e0c
 8003a0c:	08004e10 	.word	0x08004e10

08003a10 <memset>:
 8003a10:	4402      	add	r2, r0
 8003a12:	4603      	mov	r3, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <_puts_r>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	460e      	mov	r6, r1
 8003a24:	4605      	mov	r5, r0
 8003a26:	b118      	cbz	r0, 8003a30 <_puts_r+0x10>
 8003a28:	6983      	ldr	r3, [r0, #24]
 8003a2a:	b90b      	cbnz	r3, 8003a30 <_puts_r+0x10>
 8003a2c:	f000 fa68 	bl	8003f00 <__sinit>
 8003a30:	69ab      	ldr	r3, [r5, #24]
 8003a32:	68ac      	ldr	r4, [r5, #8]
 8003a34:	b913      	cbnz	r3, 8003a3c <_puts_r+0x1c>
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 fa62 	bl	8003f00 <__sinit>
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <_puts_r+0xd0>)
 8003a3e:	429c      	cmp	r4, r3
 8003a40:	d120      	bne.n	8003a84 <_puts_r+0x64>
 8003a42:	686c      	ldr	r4, [r5, #4]
 8003a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a46:	07db      	lsls	r3, r3, #31
 8003a48:	d405      	bmi.n	8003a56 <_puts_r+0x36>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	0598      	lsls	r0, r3, #22
 8003a4e:	d402      	bmi.n	8003a56 <_puts_r+0x36>
 8003a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a52:	f000 faf3 	bl	800403c <__retarget_lock_acquire_recursive>
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	0719      	lsls	r1, r3, #28
 8003a5a:	d51d      	bpl.n	8003a98 <_puts_r+0x78>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	b1db      	cbz	r3, 8003a98 <_puts_r+0x78>
 8003a60:	3e01      	subs	r6, #1
 8003a62:	68a3      	ldr	r3, [r4, #8]
 8003a64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	60a3      	str	r3, [r4, #8]
 8003a6c:	bb39      	cbnz	r1, 8003abe <_puts_r+0x9e>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	da38      	bge.n	8003ae4 <_puts_r+0xc4>
 8003a72:	4622      	mov	r2, r4
 8003a74:	210a      	movs	r1, #10
 8003a76:	4628      	mov	r0, r5
 8003a78:	f000 f868 	bl	8003b4c <__swbuf_r>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d011      	beq.n	8003aa4 <_puts_r+0x84>
 8003a80:	250a      	movs	r5, #10
 8003a82:	e011      	b.n	8003aa8 <_puts_r+0x88>
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <_puts_r+0xd4>)
 8003a86:	429c      	cmp	r4, r3
 8003a88:	d101      	bne.n	8003a8e <_puts_r+0x6e>
 8003a8a:	68ac      	ldr	r4, [r5, #8]
 8003a8c:	e7da      	b.n	8003a44 <_puts_r+0x24>
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <_puts_r+0xd8>)
 8003a90:	429c      	cmp	r4, r3
 8003a92:	bf08      	it	eq
 8003a94:	68ec      	ldreq	r4, [r5, #12]
 8003a96:	e7d5      	b.n	8003a44 <_puts_r+0x24>
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 f8a8 	bl	8003bf0 <__swsetup_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d0dd      	beq.n	8003a60 <_puts_r+0x40>
 8003aa4:	f04f 35ff 	mov.w	r5, #4294967295
 8003aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aaa:	07da      	lsls	r2, r3, #31
 8003aac:	d405      	bmi.n	8003aba <_puts_r+0x9a>
 8003aae:	89a3      	ldrh	r3, [r4, #12]
 8003ab0:	059b      	lsls	r3, r3, #22
 8003ab2:	d402      	bmi.n	8003aba <_puts_r+0x9a>
 8003ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ab6:	f000 fac2 	bl	800403e <__retarget_lock_release_recursive>
 8003aba:	4628      	mov	r0, r5
 8003abc:	bd70      	pop	{r4, r5, r6, pc}
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da04      	bge.n	8003acc <_puts_r+0xac>
 8003ac2:	69a2      	ldr	r2, [r4, #24]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	dc06      	bgt.n	8003ad6 <_puts_r+0xb6>
 8003ac8:	290a      	cmp	r1, #10
 8003aca:	d004      	beq.n	8003ad6 <_puts_r+0xb6>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	6022      	str	r2, [r4, #0]
 8003ad2:	7019      	strb	r1, [r3, #0]
 8003ad4:	e7c5      	b.n	8003a62 <_puts_r+0x42>
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f000 f837 	bl	8003b4c <__swbuf_r>
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d1bf      	bne.n	8003a62 <_puts_r+0x42>
 8003ae2:	e7df      	b.n	8003aa4 <_puts_r+0x84>
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	250a      	movs	r5, #10
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	6022      	str	r2, [r4, #0]
 8003aec:	701d      	strb	r5, [r3, #0]
 8003aee:	e7db      	b.n	8003aa8 <_puts_r+0x88>
 8003af0:	08004d90 	.word	0x08004d90
 8003af4:	08004db0 	.word	0x08004db0
 8003af8:	08004d70 	.word	0x08004d70

08003afc <puts>:
 8003afc:	4b02      	ldr	r3, [pc, #8]	; (8003b08 <puts+0xc>)
 8003afe:	4601      	mov	r1, r0
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	f7ff bf8d 	b.w	8003a20 <_puts_r>
 8003b06:	bf00      	nop
 8003b08:	20000060 	.word	0x20000060

08003b0c <siprintf>:
 8003b0c:	b40e      	push	{r1, r2, r3}
 8003b0e:	b500      	push	{lr}
 8003b10:	b09c      	sub	sp, #112	; 0x70
 8003b12:	ab1d      	add	r3, sp, #116	; 0x74
 8003b14:	9002      	str	r0, [sp, #8]
 8003b16:	9006      	str	r0, [sp, #24]
 8003b18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b1c:	4809      	ldr	r0, [pc, #36]	; (8003b44 <siprintf+0x38>)
 8003b1e:	9107      	str	r1, [sp, #28]
 8003b20:	9104      	str	r1, [sp, #16]
 8003b22:	4909      	ldr	r1, [pc, #36]	; (8003b48 <siprintf+0x3c>)
 8003b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b28:	9105      	str	r1, [sp, #20]
 8003b2a:	6800      	ldr	r0, [r0, #0]
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	a902      	add	r1, sp, #8
 8003b30:	f000 fc28 	bl	8004384 <_svfiprintf_r>
 8003b34:	9b02      	ldr	r3, [sp, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	b01c      	add	sp, #112	; 0x70
 8003b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b40:	b003      	add	sp, #12
 8003b42:	4770      	bx	lr
 8003b44:	20000060 	.word	0x20000060
 8003b48:	ffff0208 	.word	0xffff0208

08003b4c <__swbuf_r>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	460e      	mov	r6, r1
 8003b50:	4614      	mov	r4, r2
 8003b52:	4605      	mov	r5, r0
 8003b54:	b118      	cbz	r0, 8003b5e <__swbuf_r+0x12>
 8003b56:	6983      	ldr	r3, [r0, #24]
 8003b58:	b90b      	cbnz	r3, 8003b5e <__swbuf_r+0x12>
 8003b5a:	f000 f9d1 	bl	8003f00 <__sinit>
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <__swbuf_r+0x98>)
 8003b60:	429c      	cmp	r4, r3
 8003b62:	d12b      	bne.n	8003bbc <__swbuf_r+0x70>
 8003b64:	686c      	ldr	r4, [r5, #4]
 8003b66:	69a3      	ldr	r3, [r4, #24]
 8003b68:	60a3      	str	r3, [r4, #8]
 8003b6a:	89a3      	ldrh	r3, [r4, #12]
 8003b6c:	071a      	lsls	r2, r3, #28
 8003b6e:	d52f      	bpl.n	8003bd0 <__swbuf_r+0x84>
 8003b70:	6923      	ldr	r3, [r4, #16]
 8003b72:	b36b      	cbz	r3, 8003bd0 <__swbuf_r+0x84>
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	1ac0      	subs	r0, r0, r3
 8003b7a:	6963      	ldr	r3, [r4, #20]
 8003b7c:	b2f6      	uxtb	r6, r6
 8003b7e:	4283      	cmp	r3, r0
 8003b80:	4637      	mov	r7, r6
 8003b82:	dc04      	bgt.n	8003b8e <__swbuf_r+0x42>
 8003b84:	4621      	mov	r1, r4
 8003b86:	4628      	mov	r0, r5
 8003b88:	f000 f926 	bl	8003dd8 <_fflush_r>
 8003b8c:	bb30      	cbnz	r0, 8003bdc <__swbuf_r+0x90>
 8003b8e:	68a3      	ldr	r3, [r4, #8]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	60a3      	str	r3, [r4, #8]
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	6022      	str	r2, [r4, #0]
 8003b9a:	701e      	strb	r6, [r3, #0]
 8003b9c:	6963      	ldr	r3, [r4, #20]
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	4283      	cmp	r3, r0
 8003ba2:	d004      	beq.n	8003bae <__swbuf_r+0x62>
 8003ba4:	89a3      	ldrh	r3, [r4, #12]
 8003ba6:	07db      	lsls	r3, r3, #31
 8003ba8:	d506      	bpl.n	8003bb8 <__swbuf_r+0x6c>
 8003baa:	2e0a      	cmp	r6, #10
 8003bac:	d104      	bne.n	8003bb8 <__swbuf_r+0x6c>
 8003bae:	4621      	mov	r1, r4
 8003bb0:	4628      	mov	r0, r5
 8003bb2:	f000 f911 	bl	8003dd8 <_fflush_r>
 8003bb6:	b988      	cbnz	r0, 8003bdc <__swbuf_r+0x90>
 8003bb8:	4638      	mov	r0, r7
 8003bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <__swbuf_r+0x9c>)
 8003bbe:	429c      	cmp	r4, r3
 8003bc0:	d101      	bne.n	8003bc6 <__swbuf_r+0x7a>
 8003bc2:	68ac      	ldr	r4, [r5, #8]
 8003bc4:	e7cf      	b.n	8003b66 <__swbuf_r+0x1a>
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <__swbuf_r+0xa0>)
 8003bc8:	429c      	cmp	r4, r3
 8003bca:	bf08      	it	eq
 8003bcc:	68ec      	ldreq	r4, [r5, #12]
 8003bce:	e7ca      	b.n	8003b66 <__swbuf_r+0x1a>
 8003bd0:	4621      	mov	r1, r4
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	f000 f80c 	bl	8003bf0 <__swsetup_r>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	d0cb      	beq.n	8003b74 <__swbuf_r+0x28>
 8003bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8003be0:	e7ea      	b.n	8003bb8 <__swbuf_r+0x6c>
 8003be2:	bf00      	nop
 8003be4:	08004d90 	.word	0x08004d90
 8003be8:	08004db0 	.word	0x08004db0
 8003bec:	08004d70 	.word	0x08004d70

08003bf0 <__swsetup_r>:
 8003bf0:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <__swsetup_r+0xcc>)
 8003bf2:	b570      	push	{r4, r5, r6, lr}
 8003bf4:	681d      	ldr	r5, [r3, #0]
 8003bf6:	4606      	mov	r6, r0
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	b125      	cbz	r5, 8003c06 <__swsetup_r+0x16>
 8003bfc:	69ab      	ldr	r3, [r5, #24]
 8003bfe:	b913      	cbnz	r3, 8003c06 <__swsetup_r+0x16>
 8003c00:	4628      	mov	r0, r5
 8003c02:	f000 f97d 	bl	8003f00 <__sinit>
 8003c06:	4b2e      	ldr	r3, [pc, #184]	; (8003cc0 <__swsetup_r+0xd0>)
 8003c08:	429c      	cmp	r4, r3
 8003c0a:	d10f      	bne.n	8003c2c <__swsetup_r+0x3c>
 8003c0c:	686c      	ldr	r4, [r5, #4]
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c14:	0719      	lsls	r1, r3, #28
 8003c16:	d42c      	bmi.n	8003c72 <__swsetup_r+0x82>
 8003c18:	06dd      	lsls	r5, r3, #27
 8003c1a:	d411      	bmi.n	8003c40 <__swsetup_r+0x50>
 8003c1c:	2309      	movs	r3, #9
 8003c1e:	6033      	str	r3, [r6, #0]
 8003c20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c24:	81a3      	strh	r3, [r4, #12]
 8003c26:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2a:	e03e      	b.n	8003caa <__swsetup_r+0xba>
 8003c2c:	4b25      	ldr	r3, [pc, #148]	; (8003cc4 <__swsetup_r+0xd4>)
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	d101      	bne.n	8003c36 <__swsetup_r+0x46>
 8003c32:	68ac      	ldr	r4, [r5, #8]
 8003c34:	e7eb      	b.n	8003c0e <__swsetup_r+0x1e>
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <__swsetup_r+0xd8>)
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	bf08      	it	eq
 8003c3c:	68ec      	ldreq	r4, [r5, #12]
 8003c3e:	e7e6      	b.n	8003c0e <__swsetup_r+0x1e>
 8003c40:	0758      	lsls	r0, r3, #29
 8003c42:	d512      	bpl.n	8003c6a <__swsetup_r+0x7a>
 8003c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c46:	b141      	cbz	r1, 8003c5a <__swsetup_r+0x6a>
 8003c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c4c:	4299      	cmp	r1, r3
 8003c4e:	d002      	beq.n	8003c56 <__swsetup_r+0x66>
 8003c50:	4630      	mov	r0, r6
 8003c52:	f000 fa5b 	bl	800410c <_free_r>
 8003c56:	2300      	movs	r3, #0
 8003c58:	6363      	str	r3, [r4, #52]	; 0x34
 8003c5a:	89a3      	ldrh	r3, [r4, #12]
 8003c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c60:	81a3      	strh	r3, [r4, #12]
 8003c62:	2300      	movs	r3, #0
 8003c64:	6063      	str	r3, [r4, #4]
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	6923      	ldr	r3, [r4, #16]
 8003c74:	b94b      	cbnz	r3, 8003c8a <__swsetup_r+0x9a>
 8003c76:	89a3      	ldrh	r3, [r4, #12]
 8003c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d003      	beq.n	8003c8a <__swsetup_r+0x9a>
 8003c82:	4621      	mov	r1, r4
 8003c84:	4630      	mov	r0, r6
 8003c86:	f000 fa01 	bl	800408c <__smakebuf_r>
 8003c8a:	89a0      	ldrh	r0, [r4, #12]
 8003c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c90:	f010 0301 	ands.w	r3, r0, #1
 8003c94:	d00a      	beq.n	8003cac <__swsetup_r+0xbc>
 8003c96:	2300      	movs	r3, #0
 8003c98:	60a3      	str	r3, [r4, #8]
 8003c9a:	6963      	ldr	r3, [r4, #20]
 8003c9c:	425b      	negs	r3, r3
 8003c9e:	61a3      	str	r3, [r4, #24]
 8003ca0:	6923      	ldr	r3, [r4, #16]
 8003ca2:	b943      	cbnz	r3, 8003cb6 <__swsetup_r+0xc6>
 8003ca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ca8:	d1ba      	bne.n	8003c20 <__swsetup_r+0x30>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	0781      	lsls	r1, r0, #30
 8003cae:	bf58      	it	pl
 8003cb0:	6963      	ldrpl	r3, [r4, #20]
 8003cb2:	60a3      	str	r3, [r4, #8]
 8003cb4:	e7f4      	b.n	8003ca0 <__swsetup_r+0xb0>
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	e7f7      	b.n	8003caa <__swsetup_r+0xba>
 8003cba:	bf00      	nop
 8003cbc:	20000060 	.word	0x20000060
 8003cc0:	08004d90 	.word	0x08004d90
 8003cc4:	08004db0 	.word	0x08004db0
 8003cc8:	08004d70 	.word	0x08004d70

08003ccc <__sflush_r>:
 8003ccc:	898a      	ldrh	r2, [r1, #12]
 8003cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	0710      	lsls	r0, r2, #28
 8003cd6:	460c      	mov	r4, r1
 8003cd8:	d458      	bmi.n	8003d8c <__sflush_r+0xc0>
 8003cda:	684b      	ldr	r3, [r1, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	dc05      	bgt.n	8003cec <__sflush_r+0x20>
 8003ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	dc02      	bgt.n	8003cec <__sflush_r+0x20>
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	d0f9      	beq.n	8003ce6 <__sflush_r+0x1a>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cf8:	682f      	ldr	r7, [r5, #0]
 8003cfa:	602b      	str	r3, [r5, #0]
 8003cfc:	d032      	beq.n	8003d64 <__sflush_r+0x98>
 8003cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d00:	89a3      	ldrh	r3, [r4, #12]
 8003d02:	075a      	lsls	r2, r3, #29
 8003d04:	d505      	bpl.n	8003d12 <__sflush_r+0x46>
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	1ac0      	subs	r0, r0, r3
 8003d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d0c:	b10b      	cbz	r3, 8003d12 <__sflush_r+0x46>
 8003d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d10:	1ac0      	subs	r0, r0, r3
 8003d12:	2300      	movs	r3, #0
 8003d14:	4602      	mov	r2, r0
 8003d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d18:	6a21      	ldr	r1, [r4, #32]
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b0      	blx	r6
 8003d1e:	1c43      	adds	r3, r0, #1
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	d106      	bne.n	8003d32 <__sflush_r+0x66>
 8003d24:	6829      	ldr	r1, [r5, #0]
 8003d26:	291d      	cmp	r1, #29
 8003d28:	d82c      	bhi.n	8003d84 <__sflush_r+0xb8>
 8003d2a:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <__sflush_r+0x108>)
 8003d2c:	40ca      	lsrs	r2, r1
 8003d2e:	07d6      	lsls	r6, r2, #31
 8003d30:	d528      	bpl.n	8003d84 <__sflush_r+0xb8>
 8003d32:	2200      	movs	r2, #0
 8003d34:	6062      	str	r2, [r4, #4]
 8003d36:	04d9      	lsls	r1, r3, #19
 8003d38:	6922      	ldr	r2, [r4, #16]
 8003d3a:	6022      	str	r2, [r4, #0]
 8003d3c:	d504      	bpl.n	8003d48 <__sflush_r+0x7c>
 8003d3e:	1c42      	adds	r2, r0, #1
 8003d40:	d101      	bne.n	8003d46 <__sflush_r+0x7a>
 8003d42:	682b      	ldr	r3, [r5, #0]
 8003d44:	b903      	cbnz	r3, 8003d48 <__sflush_r+0x7c>
 8003d46:	6560      	str	r0, [r4, #84]	; 0x54
 8003d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d4a:	602f      	str	r7, [r5, #0]
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	d0ca      	beq.n	8003ce6 <__sflush_r+0x1a>
 8003d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d54:	4299      	cmp	r1, r3
 8003d56:	d002      	beq.n	8003d5e <__sflush_r+0x92>
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f000 f9d7 	bl	800410c <_free_r>
 8003d5e:	2000      	movs	r0, #0
 8003d60:	6360      	str	r0, [r4, #52]	; 0x34
 8003d62:	e7c1      	b.n	8003ce8 <__sflush_r+0x1c>
 8003d64:	6a21      	ldr	r1, [r4, #32]
 8003d66:	2301      	movs	r3, #1
 8003d68:	4628      	mov	r0, r5
 8003d6a:	47b0      	blx	r6
 8003d6c:	1c41      	adds	r1, r0, #1
 8003d6e:	d1c7      	bne.n	8003d00 <__sflush_r+0x34>
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0c4      	beq.n	8003d00 <__sflush_r+0x34>
 8003d76:	2b1d      	cmp	r3, #29
 8003d78:	d001      	beq.n	8003d7e <__sflush_r+0xb2>
 8003d7a:	2b16      	cmp	r3, #22
 8003d7c:	d101      	bne.n	8003d82 <__sflush_r+0xb6>
 8003d7e:	602f      	str	r7, [r5, #0]
 8003d80:	e7b1      	b.n	8003ce6 <__sflush_r+0x1a>
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	e7ad      	b.n	8003ce8 <__sflush_r+0x1c>
 8003d8c:	690f      	ldr	r7, [r1, #16]
 8003d8e:	2f00      	cmp	r7, #0
 8003d90:	d0a9      	beq.n	8003ce6 <__sflush_r+0x1a>
 8003d92:	0793      	lsls	r3, r2, #30
 8003d94:	680e      	ldr	r6, [r1, #0]
 8003d96:	bf08      	it	eq
 8003d98:	694b      	ldreq	r3, [r1, #20]
 8003d9a:	600f      	str	r7, [r1, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	2300      	movne	r3, #0
 8003da0:	eba6 0807 	sub.w	r8, r6, r7
 8003da4:	608b      	str	r3, [r1, #8]
 8003da6:	f1b8 0f00 	cmp.w	r8, #0
 8003daa:	dd9c      	ble.n	8003ce6 <__sflush_r+0x1a>
 8003dac:	6a21      	ldr	r1, [r4, #32]
 8003dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003db0:	4643      	mov	r3, r8
 8003db2:	463a      	mov	r2, r7
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b0      	blx	r6
 8003db8:	2800      	cmp	r0, #0
 8003dba:	dc06      	bgt.n	8003dca <__sflush_r+0xfe>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc2:	81a3      	strh	r3, [r4, #12]
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	e78e      	b.n	8003ce8 <__sflush_r+0x1c>
 8003dca:	4407      	add	r7, r0
 8003dcc:	eba8 0800 	sub.w	r8, r8, r0
 8003dd0:	e7e9      	b.n	8003da6 <__sflush_r+0xda>
 8003dd2:	bf00      	nop
 8003dd4:	20400001 	.word	0x20400001

08003dd8 <_fflush_r>:
 8003dd8:	b538      	push	{r3, r4, r5, lr}
 8003dda:	690b      	ldr	r3, [r1, #16]
 8003ddc:	4605      	mov	r5, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	b913      	cbnz	r3, 8003de8 <_fflush_r+0x10>
 8003de2:	2500      	movs	r5, #0
 8003de4:	4628      	mov	r0, r5
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	b118      	cbz	r0, 8003df2 <_fflush_r+0x1a>
 8003dea:	6983      	ldr	r3, [r0, #24]
 8003dec:	b90b      	cbnz	r3, 8003df2 <_fflush_r+0x1a>
 8003dee:	f000 f887 	bl	8003f00 <__sinit>
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <_fflush_r+0x6c>)
 8003df4:	429c      	cmp	r4, r3
 8003df6:	d11b      	bne.n	8003e30 <_fflush_r+0x58>
 8003df8:	686c      	ldr	r4, [r5, #4]
 8003dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0ef      	beq.n	8003de2 <_fflush_r+0xa>
 8003e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e04:	07d0      	lsls	r0, r2, #31
 8003e06:	d404      	bmi.n	8003e12 <_fflush_r+0x3a>
 8003e08:	0599      	lsls	r1, r3, #22
 8003e0a:	d402      	bmi.n	8003e12 <_fflush_r+0x3a>
 8003e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e0e:	f000 f915 	bl	800403c <__retarget_lock_acquire_recursive>
 8003e12:	4628      	mov	r0, r5
 8003e14:	4621      	mov	r1, r4
 8003e16:	f7ff ff59 	bl	8003ccc <__sflush_r>
 8003e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e1c:	07da      	lsls	r2, r3, #31
 8003e1e:	4605      	mov	r5, r0
 8003e20:	d4e0      	bmi.n	8003de4 <_fflush_r+0xc>
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	059b      	lsls	r3, r3, #22
 8003e26:	d4dd      	bmi.n	8003de4 <_fflush_r+0xc>
 8003e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e2a:	f000 f908 	bl	800403e <__retarget_lock_release_recursive>
 8003e2e:	e7d9      	b.n	8003de4 <_fflush_r+0xc>
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <_fflush_r+0x70>)
 8003e32:	429c      	cmp	r4, r3
 8003e34:	d101      	bne.n	8003e3a <_fflush_r+0x62>
 8003e36:	68ac      	ldr	r4, [r5, #8]
 8003e38:	e7df      	b.n	8003dfa <_fflush_r+0x22>
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <_fflush_r+0x74>)
 8003e3c:	429c      	cmp	r4, r3
 8003e3e:	bf08      	it	eq
 8003e40:	68ec      	ldreq	r4, [r5, #12]
 8003e42:	e7da      	b.n	8003dfa <_fflush_r+0x22>
 8003e44:	08004d90 	.word	0x08004d90
 8003e48:	08004db0 	.word	0x08004db0
 8003e4c:	08004d70 	.word	0x08004d70

08003e50 <std>:
 8003e50:	2300      	movs	r3, #0
 8003e52:	b510      	push	{r4, lr}
 8003e54:	4604      	mov	r4, r0
 8003e56:	e9c0 3300 	strd	r3, r3, [r0]
 8003e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e5e:	6083      	str	r3, [r0, #8]
 8003e60:	8181      	strh	r1, [r0, #12]
 8003e62:	6643      	str	r3, [r0, #100]	; 0x64
 8003e64:	81c2      	strh	r2, [r0, #14]
 8003e66:	6183      	str	r3, [r0, #24]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	305c      	adds	r0, #92	; 0x5c
 8003e6e:	f7ff fdcf 	bl	8003a10 <memset>
 8003e72:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <std+0x38>)
 8003e74:	6263      	str	r3, [r4, #36]	; 0x24
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <std+0x3c>)
 8003e78:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <std+0x40>)
 8003e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <std+0x44>)
 8003e80:	6224      	str	r4, [r4, #32]
 8003e82:	6323      	str	r3, [r4, #48]	; 0x30
 8003e84:	bd10      	pop	{r4, pc}
 8003e86:	bf00      	nop
 8003e88:	080048cd 	.word	0x080048cd
 8003e8c:	080048ef 	.word	0x080048ef
 8003e90:	08004927 	.word	0x08004927
 8003e94:	0800494b 	.word	0x0800494b

08003e98 <_cleanup_r>:
 8003e98:	4901      	ldr	r1, [pc, #4]	; (8003ea0 <_cleanup_r+0x8>)
 8003e9a:	f000 b8af 	b.w	8003ffc <_fwalk_reent>
 8003e9e:	bf00      	nop
 8003ea0:	08003dd9 	.word	0x08003dd9

08003ea4 <__sfmoreglue>:
 8003ea4:	b570      	push	{r4, r5, r6, lr}
 8003ea6:	2268      	movs	r2, #104	; 0x68
 8003ea8:	1e4d      	subs	r5, r1, #1
 8003eaa:	4355      	muls	r5, r2
 8003eac:	460e      	mov	r6, r1
 8003eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003eb2:	f000 f997 	bl	80041e4 <_malloc_r>
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	b140      	cbz	r0, 8003ecc <__sfmoreglue+0x28>
 8003eba:	2100      	movs	r1, #0
 8003ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8003ec0:	300c      	adds	r0, #12
 8003ec2:	60a0      	str	r0, [r4, #8]
 8003ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ec8:	f7ff fda2 	bl	8003a10 <memset>
 8003ecc:	4620      	mov	r0, r4
 8003ece:	bd70      	pop	{r4, r5, r6, pc}

08003ed0 <__sfp_lock_acquire>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__sfp_lock_acquire+0x8>)
 8003ed2:	f000 b8b3 	b.w	800403c <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	20000171 	.word	0x20000171

08003edc <__sfp_lock_release>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__sfp_lock_release+0x8>)
 8003ede:	f000 b8ae 	b.w	800403e <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	20000171 	.word	0x20000171

08003ee8 <__sinit_lock_acquire>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__sinit_lock_acquire+0x8>)
 8003eea:	f000 b8a7 	b.w	800403c <__retarget_lock_acquire_recursive>
 8003eee:	bf00      	nop
 8003ef0:	20000172 	.word	0x20000172

08003ef4 <__sinit_lock_release>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <__sinit_lock_release+0x8>)
 8003ef6:	f000 b8a2 	b.w	800403e <__retarget_lock_release_recursive>
 8003efa:	bf00      	nop
 8003efc:	20000172 	.word	0x20000172

08003f00 <__sinit>:
 8003f00:	b510      	push	{r4, lr}
 8003f02:	4604      	mov	r4, r0
 8003f04:	f7ff fff0 	bl	8003ee8 <__sinit_lock_acquire>
 8003f08:	69a3      	ldr	r3, [r4, #24]
 8003f0a:	b11b      	cbz	r3, 8003f14 <__sinit+0x14>
 8003f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f10:	f7ff bff0 	b.w	8003ef4 <__sinit_lock_release>
 8003f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f18:	6523      	str	r3, [r4, #80]	; 0x50
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <__sinit+0x68>)
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <__sinit+0x6c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f22:	42a3      	cmp	r3, r4
 8003f24:	bf04      	itt	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	61a3      	streq	r3, [r4, #24]
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 f820 	bl	8003f70 <__sfp>
 8003f30:	6060      	str	r0, [r4, #4]
 8003f32:	4620      	mov	r0, r4
 8003f34:	f000 f81c 	bl	8003f70 <__sfp>
 8003f38:	60a0      	str	r0, [r4, #8]
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	f000 f818 	bl	8003f70 <__sfp>
 8003f40:	2200      	movs	r2, #0
 8003f42:	60e0      	str	r0, [r4, #12]
 8003f44:	2104      	movs	r1, #4
 8003f46:	6860      	ldr	r0, [r4, #4]
 8003f48:	f7ff ff82 	bl	8003e50 <std>
 8003f4c:	68a0      	ldr	r0, [r4, #8]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	2109      	movs	r1, #9
 8003f52:	f7ff ff7d 	bl	8003e50 <std>
 8003f56:	68e0      	ldr	r0, [r4, #12]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	2112      	movs	r1, #18
 8003f5c:	f7ff ff78 	bl	8003e50 <std>
 8003f60:	2301      	movs	r3, #1
 8003f62:	61a3      	str	r3, [r4, #24]
 8003f64:	e7d2      	b.n	8003f0c <__sinit+0xc>
 8003f66:	bf00      	nop
 8003f68:	08004d6c 	.word	0x08004d6c
 8003f6c:	08003e99 	.word	0x08003e99

08003f70 <__sfp>:
 8003f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f72:	4607      	mov	r7, r0
 8003f74:	f7ff ffac 	bl	8003ed0 <__sfp_lock_acquire>
 8003f78:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <__sfp+0x84>)
 8003f7a:	681e      	ldr	r6, [r3, #0]
 8003f7c:	69b3      	ldr	r3, [r6, #24]
 8003f7e:	b913      	cbnz	r3, 8003f86 <__sfp+0x16>
 8003f80:	4630      	mov	r0, r6
 8003f82:	f7ff ffbd 	bl	8003f00 <__sinit>
 8003f86:	3648      	adds	r6, #72	; 0x48
 8003f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	d503      	bpl.n	8003f98 <__sfp+0x28>
 8003f90:	6833      	ldr	r3, [r6, #0]
 8003f92:	b30b      	cbz	r3, 8003fd8 <__sfp+0x68>
 8003f94:	6836      	ldr	r6, [r6, #0]
 8003f96:	e7f7      	b.n	8003f88 <__sfp+0x18>
 8003f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003f9c:	b9d5      	cbnz	r5, 8003fd4 <__sfp+0x64>
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <__sfp+0x88>)
 8003fa0:	60e3      	str	r3, [r4, #12]
 8003fa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8003fa8:	f000 f847 	bl	800403a <__retarget_lock_init_recursive>
 8003fac:	f7ff ff96 	bl	8003edc <__sfp_lock_release>
 8003fb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003fb8:	6025      	str	r5, [r4, #0]
 8003fba:	61a5      	str	r5, [r4, #24]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fc4:	f7ff fd24 	bl	8003a10 <memset>
 8003fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd4:	3468      	adds	r4, #104	; 0x68
 8003fd6:	e7d9      	b.n	8003f8c <__sfp+0x1c>
 8003fd8:	2104      	movs	r1, #4
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7ff ff62 	bl	8003ea4 <__sfmoreglue>
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	6030      	str	r0, [r6, #0]
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d1d5      	bne.n	8003f94 <__sfp+0x24>
 8003fe8:	f7ff ff78 	bl	8003edc <__sfp_lock_release>
 8003fec:	230c      	movs	r3, #12
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	e7ee      	b.n	8003fd0 <__sfp+0x60>
 8003ff2:	bf00      	nop
 8003ff4:	08004d6c 	.word	0x08004d6c
 8003ff8:	ffff0001 	.word	0xffff0001

08003ffc <_fwalk_reent>:
 8003ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004000:	4606      	mov	r6, r0
 8004002:	4688      	mov	r8, r1
 8004004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004008:	2700      	movs	r7, #0
 800400a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800400e:	f1b9 0901 	subs.w	r9, r9, #1
 8004012:	d505      	bpl.n	8004020 <_fwalk_reent+0x24>
 8004014:	6824      	ldr	r4, [r4, #0]
 8004016:	2c00      	cmp	r4, #0
 8004018:	d1f7      	bne.n	800400a <_fwalk_reent+0xe>
 800401a:	4638      	mov	r0, r7
 800401c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004020:	89ab      	ldrh	r3, [r5, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d907      	bls.n	8004036 <_fwalk_reent+0x3a>
 8004026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800402a:	3301      	adds	r3, #1
 800402c:	d003      	beq.n	8004036 <_fwalk_reent+0x3a>
 800402e:	4629      	mov	r1, r5
 8004030:	4630      	mov	r0, r6
 8004032:	47c0      	blx	r8
 8004034:	4307      	orrs	r7, r0
 8004036:	3568      	adds	r5, #104	; 0x68
 8004038:	e7e9      	b.n	800400e <_fwalk_reent+0x12>

0800403a <__retarget_lock_init_recursive>:
 800403a:	4770      	bx	lr

0800403c <__retarget_lock_acquire_recursive>:
 800403c:	4770      	bx	lr

0800403e <__retarget_lock_release_recursive>:
 800403e:	4770      	bx	lr

08004040 <__swhatbuf_r>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	460e      	mov	r6, r1
 8004044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004048:	2900      	cmp	r1, #0
 800404a:	b096      	sub	sp, #88	; 0x58
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	da08      	bge.n	8004064 <__swhatbuf_r+0x24>
 8004052:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	602a      	str	r2, [r5, #0]
 800405a:	061a      	lsls	r2, r3, #24
 800405c:	d410      	bmi.n	8004080 <__swhatbuf_r+0x40>
 800405e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004062:	e00e      	b.n	8004082 <__swhatbuf_r+0x42>
 8004064:	466a      	mov	r2, sp
 8004066:	f000 fc97 	bl	8004998 <_fstat_r>
 800406a:	2800      	cmp	r0, #0
 800406c:	dbf1      	blt.n	8004052 <__swhatbuf_r+0x12>
 800406e:	9a01      	ldr	r2, [sp, #4]
 8004070:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004074:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004078:	425a      	negs	r2, r3
 800407a:	415a      	adcs	r2, r3
 800407c:	602a      	str	r2, [r5, #0]
 800407e:	e7ee      	b.n	800405e <__swhatbuf_r+0x1e>
 8004080:	2340      	movs	r3, #64	; 0x40
 8004082:	2000      	movs	r0, #0
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	b016      	add	sp, #88	; 0x58
 8004088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800408c <__smakebuf_r>:
 800408c:	898b      	ldrh	r3, [r1, #12]
 800408e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004090:	079d      	lsls	r5, r3, #30
 8004092:	4606      	mov	r6, r0
 8004094:	460c      	mov	r4, r1
 8004096:	d507      	bpl.n	80040a8 <__smakebuf_r+0x1c>
 8004098:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	2301      	movs	r3, #1
 80040a2:	6163      	str	r3, [r4, #20]
 80040a4:	b002      	add	sp, #8
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	ab01      	add	r3, sp, #4
 80040aa:	466a      	mov	r2, sp
 80040ac:	f7ff ffc8 	bl	8004040 <__swhatbuf_r>
 80040b0:	9900      	ldr	r1, [sp, #0]
 80040b2:	4605      	mov	r5, r0
 80040b4:	4630      	mov	r0, r6
 80040b6:	f000 f895 	bl	80041e4 <_malloc_r>
 80040ba:	b948      	cbnz	r0, 80040d0 <__smakebuf_r+0x44>
 80040bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c0:	059a      	lsls	r2, r3, #22
 80040c2:	d4ef      	bmi.n	80040a4 <__smakebuf_r+0x18>
 80040c4:	f023 0303 	bic.w	r3, r3, #3
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	e7e3      	b.n	8004098 <__smakebuf_r+0xc>
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <__smakebuf_r+0x7c>)
 80040d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	6020      	str	r0, [r4, #0]
 80040d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040dc:	81a3      	strh	r3, [r4, #12]
 80040de:	9b00      	ldr	r3, [sp, #0]
 80040e0:	6163      	str	r3, [r4, #20]
 80040e2:	9b01      	ldr	r3, [sp, #4]
 80040e4:	6120      	str	r0, [r4, #16]
 80040e6:	b15b      	cbz	r3, 8004100 <__smakebuf_r+0x74>
 80040e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ec:	4630      	mov	r0, r6
 80040ee:	f000 fc65 	bl	80049bc <_isatty_r>
 80040f2:	b128      	cbz	r0, 8004100 <__smakebuf_r+0x74>
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	89a0      	ldrh	r0, [r4, #12]
 8004102:	4305      	orrs	r5, r0
 8004104:	81a5      	strh	r5, [r4, #12]
 8004106:	e7cd      	b.n	80040a4 <__smakebuf_r+0x18>
 8004108:	08003e99 	.word	0x08003e99

0800410c <_free_r>:
 800410c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800410e:	2900      	cmp	r1, #0
 8004110:	d044      	beq.n	800419c <_free_r+0x90>
 8004112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004116:	9001      	str	r0, [sp, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f1a1 0404 	sub.w	r4, r1, #4
 800411e:	bfb8      	it	lt
 8004120:	18e4      	addlt	r4, r4, r3
 8004122:	f000 fc95 	bl	8004a50 <__malloc_lock>
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <_free_r+0x94>)
 8004128:	9801      	ldr	r0, [sp, #4]
 800412a:	6813      	ldr	r3, [r2, #0]
 800412c:	b933      	cbnz	r3, 800413c <_free_r+0x30>
 800412e:	6063      	str	r3, [r4, #4]
 8004130:	6014      	str	r4, [r2, #0]
 8004132:	b003      	add	sp, #12
 8004134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004138:	f000 bc90 	b.w	8004a5c <__malloc_unlock>
 800413c:	42a3      	cmp	r3, r4
 800413e:	d908      	bls.n	8004152 <_free_r+0x46>
 8004140:	6825      	ldr	r5, [r4, #0]
 8004142:	1961      	adds	r1, r4, r5
 8004144:	428b      	cmp	r3, r1
 8004146:	bf01      	itttt	eq
 8004148:	6819      	ldreq	r1, [r3, #0]
 800414a:	685b      	ldreq	r3, [r3, #4]
 800414c:	1949      	addeq	r1, r1, r5
 800414e:	6021      	streq	r1, [r4, #0]
 8004150:	e7ed      	b.n	800412e <_free_r+0x22>
 8004152:	461a      	mov	r2, r3
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	b10b      	cbz	r3, 800415c <_free_r+0x50>
 8004158:	42a3      	cmp	r3, r4
 800415a:	d9fa      	bls.n	8004152 <_free_r+0x46>
 800415c:	6811      	ldr	r1, [r2, #0]
 800415e:	1855      	adds	r5, r2, r1
 8004160:	42a5      	cmp	r5, r4
 8004162:	d10b      	bne.n	800417c <_free_r+0x70>
 8004164:	6824      	ldr	r4, [r4, #0]
 8004166:	4421      	add	r1, r4
 8004168:	1854      	adds	r4, r2, r1
 800416a:	42a3      	cmp	r3, r4
 800416c:	6011      	str	r1, [r2, #0]
 800416e:	d1e0      	bne.n	8004132 <_free_r+0x26>
 8004170:	681c      	ldr	r4, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	6053      	str	r3, [r2, #4]
 8004176:	4421      	add	r1, r4
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	e7da      	b.n	8004132 <_free_r+0x26>
 800417c:	d902      	bls.n	8004184 <_free_r+0x78>
 800417e:	230c      	movs	r3, #12
 8004180:	6003      	str	r3, [r0, #0]
 8004182:	e7d6      	b.n	8004132 <_free_r+0x26>
 8004184:	6825      	ldr	r5, [r4, #0]
 8004186:	1961      	adds	r1, r4, r5
 8004188:	428b      	cmp	r3, r1
 800418a:	bf04      	itt	eq
 800418c:	6819      	ldreq	r1, [r3, #0]
 800418e:	685b      	ldreq	r3, [r3, #4]
 8004190:	6063      	str	r3, [r4, #4]
 8004192:	bf04      	itt	eq
 8004194:	1949      	addeq	r1, r1, r5
 8004196:	6021      	streq	r1, [r4, #0]
 8004198:	6054      	str	r4, [r2, #4]
 800419a:	e7ca      	b.n	8004132 <_free_r+0x26>
 800419c:	b003      	add	sp, #12
 800419e:	bd30      	pop	{r4, r5, pc}
 80041a0:	20000174 	.word	0x20000174

080041a4 <sbrk_aligned>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4e0e      	ldr	r6, [pc, #56]	; (80041e0 <sbrk_aligned+0x3c>)
 80041a8:	460c      	mov	r4, r1
 80041aa:	6831      	ldr	r1, [r6, #0]
 80041ac:	4605      	mov	r5, r0
 80041ae:	b911      	cbnz	r1, 80041b6 <sbrk_aligned+0x12>
 80041b0:	f000 fb7c 	bl	80048ac <_sbrk_r>
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	4621      	mov	r1, r4
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 fb77 	bl	80048ac <_sbrk_r>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	d00a      	beq.n	80041d8 <sbrk_aligned+0x34>
 80041c2:	1cc4      	adds	r4, r0, #3
 80041c4:	f024 0403 	bic.w	r4, r4, #3
 80041c8:	42a0      	cmp	r0, r4
 80041ca:	d007      	beq.n	80041dc <sbrk_aligned+0x38>
 80041cc:	1a21      	subs	r1, r4, r0
 80041ce:	4628      	mov	r0, r5
 80041d0:	f000 fb6c 	bl	80048ac <_sbrk_r>
 80041d4:	3001      	adds	r0, #1
 80041d6:	d101      	bne.n	80041dc <sbrk_aligned+0x38>
 80041d8:	f04f 34ff 	mov.w	r4, #4294967295
 80041dc:	4620      	mov	r0, r4
 80041de:	bd70      	pop	{r4, r5, r6, pc}
 80041e0:	20000178 	.word	0x20000178

080041e4 <_malloc_r>:
 80041e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e8:	1ccd      	adds	r5, r1, #3
 80041ea:	f025 0503 	bic.w	r5, r5, #3
 80041ee:	3508      	adds	r5, #8
 80041f0:	2d0c      	cmp	r5, #12
 80041f2:	bf38      	it	cc
 80041f4:	250c      	movcc	r5, #12
 80041f6:	2d00      	cmp	r5, #0
 80041f8:	4607      	mov	r7, r0
 80041fa:	db01      	blt.n	8004200 <_malloc_r+0x1c>
 80041fc:	42a9      	cmp	r1, r5
 80041fe:	d905      	bls.n	800420c <_malloc_r+0x28>
 8004200:	230c      	movs	r3, #12
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	2600      	movs	r6, #0
 8004206:	4630      	mov	r0, r6
 8004208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420c:	4e2e      	ldr	r6, [pc, #184]	; (80042c8 <_malloc_r+0xe4>)
 800420e:	f000 fc1f 	bl	8004a50 <__malloc_lock>
 8004212:	6833      	ldr	r3, [r6, #0]
 8004214:	461c      	mov	r4, r3
 8004216:	bb34      	cbnz	r4, 8004266 <_malloc_r+0x82>
 8004218:	4629      	mov	r1, r5
 800421a:	4638      	mov	r0, r7
 800421c:	f7ff ffc2 	bl	80041a4 <sbrk_aligned>
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	4604      	mov	r4, r0
 8004224:	d14d      	bne.n	80042c2 <_malloc_r+0xde>
 8004226:	6834      	ldr	r4, [r6, #0]
 8004228:	4626      	mov	r6, r4
 800422a:	2e00      	cmp	r6, #0
 800422c:	d140      	bne.n	80042b0 <_malloc_r+0xcc>
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	4631      	mov	r1, r6
 8004232:	4638      	mov	r0, r7
 8004234:	eb04 0803 	add.w	r8, r4, r3
 8004238:	f000 fb38 	bl	80048ac <_sbrk_r>
 800423c:	4580      	cmp	r8, r0
 800423e:	d13a      	bne.n	80042b6 <_malloc_r+0xd2>
 8004240:	6821      	ldr	r1, [r4, #0]
 8004242:	3503      	adds	r5, #3
 8004244:	1a6d      	subs	r5, r5, r1
 8004246:	f025 0503 	bic.w	r5, r5, #3
 800424a:	3508      	adds	r5, #8
 800424c:	2d0c      	cmp	r5, #12
 800424e:	bf38      	it	cc
 8004250:	250c      	movcc	r5, #12
 8004252:	4629      	mov	r1, r5
 8004254:	4638      	mov	r0, r7
 8004256:	f7ff ffa5 	bl	80041a4 <sbrk_aligned>
 800425a:	3001      	adds	r0, #1
 800425c:	d02b      	beq.n	80042b6 <_malloc_r+0xd2>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	442b      	add	r3, r5
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	e00e      	b.n	8004284 <_malloc_r+0xa0>
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	1b52      	subs	r2, r2, r5
 800426a:	d41e      	bmi.n	80042aa <_malloc_r+0xc6>
 800426c:	2a0b      	cmp	r2, #11
 800426e:	d916      	bls.n	800429e <_malloc_r+0xba>
 8004270:	1961      	adds	r1, r4, r5
 8004272:	42a3      	cmp	r3, r4
 8004274:	6025      	str	r5, [r4, #0]
 8004276:	bf18      	it	ne
 8004278:	6059      	strne	r1, [r3, #4]
 800427a:	6863      	ldr	r3, [r4, #4]
 800427c:	bf08      	it	eq
 800427e:	6031      	streq	r1, [r6, #0]
 8004280:	5162      	str	r2, [r4, r5]
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	4638      	mov	r0, r7
 8004286:	f104 060b 	add.w	r6, r4, #11
 800428a:	f000 fbe7 	bl	8004a5c <__malloc_unlock>
 800428e:	f026 0607 	bic.w	r6, r6, #7
 8004292:	1d23      	adds	r3, r4, #4
 8004294:	1af2      	subs	r2, r6, r3
 8004296:	d0b6      	beq.n	8004206 <_malloc_r+0x22>
 8004298:	1b9b      	subs	r3, r3, r6
 800429a:	50a3      	str	r3, [r4, r2]
 800429c:	e7b3      	b.n	8004206 <_malloc_r+0x22>
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	bf0c      	ite	eq
 80042a4:	6032      	streq	r2, [r6, #0]
 80042a6:	605a      	strne	r2, [r3, #4]
 80042a8:	e7ec      	b.n	8004284 <_malloc_r+0xa0>
 80042aa:	4623      	mov	r3, r4
 80042ac:	6864      	ldr	r4, [r4, #4]
 80042ae:	e7b2      	b.n	8004216 <_malloc_r+0x32>
 80042b0:	4634      	mov	r4, r6
 80042b2:	6876      	ldr	r6, [r6, #4]
 80042b4:	e7b9      	b.n	800422a <_malloc_r+0x46>
 80042b6:	230c      	movs	r3, #12
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	4638      	mov	r0, r7
 80042bc:	f000 fbce 	bl	8004a5c <__malloc_unlock>
 80042c0:	e7a1      	b.n	8004206 <_malloc_r+0x22>
 80042c2:	6025      	str	r5, [r4, #0]
 80042c4:	e7de      	b.n	8004284 <_malloc_r+0xa0>
 80042c6:	bf00      	nop
 80042c8:	20000174 	.word	0x20000174

080042cc <__ssputs_r>:
 80042cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	688e      	ldr	r6, [r1, #8]
 80042d2:	429e      	cmp	r6, r3
 80042d4:	4682      	mov	sl, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	4690      	mov	r8, r2
 80042da:	461f      	mov	r7, r3
 80042dc:	d838      	bhi.n	8004350 <__ssputs_r+0x84>
 80042de:	898a      	ldrh	r2, [r1, #12]
 80042e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042e4:	d032      	beq.n	800434c <__ssputs_r+0x80>
 80042e6:	6825      	ldr	r5, [r4, #0]
 80042e8:	6909      	ldr	r1, [r1, #16]
 80042ea:	eba5 0901 	sub.w	r9, r5, r1
 80042ee:	6965      	ldr	r5, [r4, #20]
 80042f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042f8:	3301      	adds	r3, #1
 80042fa:	444b      	add	r3, r9
 80042fc:	106d      	asrs	r5, r5, #1
 80042fe:	429d      	cmp	r5, r3
 8004300:	bf38      	it	cc
 8004302:	461d      	movcc	r5, r3
 8004304:	0553      	lsls	r3, r2, #21
 8004306:	d531      	bpl.n	800436c <__ssputs_r+0xa0>
 8004308:	4629      	mov	r1, r5
 800430a:	f7ff ff6b 	bl	80041e4 <_malloc_r>
 800430e:	4606      	mov	r6, r0
 8004310:	b950      	cbnz	r0, 8004328 <__ssputs_r+0x5c>
 8004312:	230c      	movs	r3, #12
 8004314:	f8ca 3000 	str.w	r3, [sl]
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800431e:	81a3      	strh	r3, [r4, #12]
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004328:	6921      	ldr	r1, [r4, #16]
 800432a:	464a      	mov	r2, r9
 800432c:	f000 fb68 	bl	8004a00 <memcpy>
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433a:	81a3      	strh	r3, [r4, #12]
 800433c:	6126      	str	r6, [r4, #16]
 800433e:	6165      	str	r5, [r4, #20]
 8004340:	444e      	add	r6, r9
 8004342:	eba5 0509 	sub.w	r5, r5, r9
 8004346:	6026      	str	r6, [r4, #0]
 8004348:	60a5      	str	r5, [r4, #8]
 800434a:	463e      	mov	r6, r7
 800434c:	42be      	cmp	r6, r7
 800434e:	d900      	bls.n	8004352 <__ssputs_r+0x86>
 8004350:	463e      	mov	r6, r7
 8004352:	6820      	ldr	r0, [r4, #0]
 8004354:	4632      	mov	r2, r6
 8004356:	4641      	mov	r1, r8
 8004358:	f000 fb60 	bl	8004a1c <memmove>
 800435c:	68a3      	ldr	r3, [r4, #8]
 800435e:	1b9b      	subs	r3, r3, r6
 8004360:	60a3      	str	r3, [r4, #8]
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	4433      	add	r3, r6
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	2000      	movs	r0, #0
 800436a:	e7db      	b.n	8004324 <__ssputs_r+0x58>
 800436c:	462a      	mov	r2, r5
 800436e:	f000 fb7b 	bl	8004a68 <_realloc_r>
 8004372:	4606      	mov	r6, r0
 8004374:	2800      	cmp	r0, #0
 8004376:	d1e1      	bne.n	800433c <__ssputs_r+0x70>
 8004378:	6921      	ldr	r1, [r4, #16]
 800437a:	4650      	mov	r0, sl
 800437c:	f7ff fec6 	bl	800410c <_free_r>
 8004380:	e7c7      	b.n	8004312 <__ssputs_r+0x46>
	...

08004384 <_svfiprintf_r>:
 8004384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004388:	4698      	mov	r8, r3
 800438a:	898b      	ldrh	r3, [r1, #12]
 800438c:	061b      	lsls	r3, r3, #24
 800438e:	b09d      	sub	sp, #116	; 0x74
 8004390:	4607      	mov	r7, r0
 8004392:	460d      	mov	r5, r1
 8004394:	4614      	mov	r4, r2
 8004396:	d50e      	bpl.n	80043b6 <_svfiprintf_r+0x32>
 8004398:	690b      	ldr	r3, [r1, #16]
 800439a:	b963      	cbnz	r3, 80043b6 <_svfiprintf_r+0x32>
 800439c:	2140      	movs	r1, #64	; 0x40
 800439e:	f7ff ff21 	bl	80041e4 <_malloc_r>
 80043a2:	6028      	str	r0, [r5, #0]
 80043a4:	6128      	str	r0, [r5, #16]
 80043a6:	b920      	cbnz	r0, 80043b2 <_svfiprintf_r+0x2e>
 80043a8:	230c      	movs	r3, #12
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	e0d1      	b.n	8004556 <_svfiprintf_r+0x1d2>
 80043b2:	2340      	movs	r3, #64	; 0x40
 80043b4:	616b      	str	r3, [r5, #20]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ba:	2320      	movs	r3, #32
 80043bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c4:	2330      	movs	r3, #48	; 0x30
 80043c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004570 <_svfiprintf_r+0x1ec>
 80043ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ce:	f04f 0901 	mov.w	r9, #1
 80043d2:	4623      	mov	r3, r4
 80043d4:	469a      	mov	sl, r3
 80043d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043da:	b10a      	cbz	r2, 80043e0 <_svfiprintf_r+0x5c>
 80043dc:	2a25      	cmp	r2, #37	; 0x25
 80043de:	d1f9      	bne.n	80043d4 <_svfiprintf_r+0x50>
 80043e0:	ebba 0b04 	subs.w	fp, sl, r4
 80043e4:	d00b      	beq.n	80043fe <_svfiprintf_r+0x7a>
 80043e6:	465b      	mov	r3, fp
 80043e8:	4622      	mov	r2, r4
 80043ea:	4629      	mov	r1, r5
 80043ec:	4638      	mov	r0, r7
 80043ee:	f7ff ff6d 	bl	80042cc <__ssputs_r>
 80043f2:	3001      	adds	r0, #1
 80043f4:	f000 80aa 	beq.w	800454c <_svfiprintf_r+0x1c8>
 80043f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043fa:	445a      	add	r2, fp
 80043fc:	9209      	str	r2, [sp, #36]	; 0x24
 80043fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 80a2 	beq.w	800454c <_svfiprintf_r+0x1c8>
 8004408:	2300      	movs	r3, #0
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004412:	f10a 0a01 	add.w	sl, sl, #1
 8004416:	9304      	str	r3, [sp, #16]
 8004418:	9307      	str	r3, [sp, #28]
 800441a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800441e:	931a      	str	r3, [sp, #104]	; 0x68
 8004420:	4654      	mov	r4, sl
 8004422:	2205      	movs	r2, #5
 8004424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004428:	4851      	ldr	r0, [pc, #324]	; (8004570 <_svfiprintf_r+0x1ec>)
 800442a:	f7fb fef1 	bl	8000210 <memchr>
 800442e:	9a04      	ldr	r2, [sp, #16]
 8004430:	b9d8      	cbnz	r0, 800446a <_svfiprintf_r+0xe6>
 8004432:	06d0      	lsls	r0, r2, #27
 8004434:	bf44      	itt	mi
 8004436:	2320      	movmi	r3, #32
 8004438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800443c:	0711      	lsls	r1, r2, #28
 800443e:	bf44      	itt	mi
 8004440:	232b      	movmi	r3, #43	; 0x2b
 8004442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004446:	f89a 3000 	ldrb.w	r3, [sl]
 800444a:	2b2a      	cmp	r3, #42	; 0x2a
 800444c:	d015      	beq.n	800447a <_svfiprintf_r+0xf6>
 800444e:	9a07      	ldr	r2, [sp, #28]
 8004450:	4654      	mov	r4, sl
 8004452:	2000      	movs	r0, #0
 8004454:	f04f 0c0a 	mov.w	ip, #10
 8004458:	4621      	mov	r1, r4
 800445a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800445e:	3b30      	subs	r3, #48	; 0x30
 8004460:	2b09      	cmp	r3, #9
 8004462:	d94e      	bls.n	8004502 <_svfiprintf_r+0x17e>
 8004464:	b1b0      	cbz	r0, 8004494 <_svfiprintf_r+0x110>
 8004466:	9207      	str	r2, [sp, #28]
 8004468:	e014      	b.n	8004494 <_svfiprintf_r+0x110>
 800446a:	eba0 0308 	sub.w	r3, r0, r8
 800446e:	fa09 f303 	lsl.w	r3, r9, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	46a2      	mov	sl, r4
 8004478:	e7d2      	b.n	8004420 <_svfiprintf_r+0x9c>
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	1d19      	adds	r1, r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	9103      	str	r1, [sp, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfbb      	ittet	lt
 8004486:	425b      	neglt	r3, r3
 8004488:	f042 0202 	orrlt.w	r2, r2, #2
 800448c:	9307      	strge	r3, [sp, #28]
 800448e:	9307      	strlt	r3, [sp, #28]
 8004490:	bfb8      	it	lt
 8004492:	9204      	strlt	r2, [sp, #16]
 8004494:	7823      	ldrb	r3, [r4, #0]
 8004496:	2b2e      	cmp	r3, #46	; 0x2e
 8004498:	d10c      	bne.n	80044b4 <_svfiprintf_r+0x130>
 800449a:	7863      	ldrb	r3, [r4, #1]
 800449c:	2b2a      	cmp	r3, #42	; 0x2a
 800449e:	d135      	bne.n	800450c <_svfiprintf_r+0x188>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	9203      	str	r2, [sp, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bfb8      	it	lt
 80044ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80044b0:	3402      	adds	r4, #2
 80044b2:	9305      	str	r3, [sp, #20]
 80044b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004580 <_svfiprintf_r+0x1fc>
 80044b8:	7821      	ldrb	r1, [r4, #0]
 80044ba:	2203      	movs	r2, #3
 80044bc:	4650      	mov	r0, sl
 80044be:	f7fb fea7 	bl	8000210 <memchr>
 80044c2:	b140      	cbz	r0, 80044d6 <_svfiprintf_r+0x152>
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	eba0 000a 	sub.w	r0, r0, sl
 80044ca:	fa03 f000 	lsl.w	r0, r3, r0
 80044ce:	9b04      	ldr	r3, [sp, #16]
 80044d0:	4303      	orrs	r3, r0
 80044d2:	3401      	adds	r4, #1
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044da:	4826      	ldr	r0, [pc, #152]	; (8004574 <_svfiprintf_r+0x1f0>)
 80044dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044e0:	2206      	movs	r2, #6
 80044e2:	f7fb fe95 	bl	8000210 <memchr>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d038      	beq.n	800455c <_svfiprintf_r+0x1d8>
 80044ea:	4b23      	ldr	r3, [pc, #140]	; (8004578 <_svfiprintf_r+0x1f4>)
 80044ec:	bb1b      	cbnz	r3, 8004536 <_svfiprintf_r+0x1b2>
 80044ee:	9b03      	ldr	r3, [sp, #12]
 80044f0:	3307      	adds	r3, #7
 80044f2:	f023 0307 	bic.w	r3, r3, #7
 80044f6:	3308      	adds	r3, #8
 80044f8:	9303      	str	r3, [sp, #12]
 80044fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044fc:	4433      	add	r3, r6
 80044fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004500:	e767      	b.n	80043d2 <_svfiprintf_r+0x4e>
 8004502:	fb0c 3202 	mla	r2, ip, r2, r3
 8004506:	460c      	mov	r4, r1
 8004508:	2001      	movs	r0, #1
 800450a:	e7a5      	b.n	8004458 <_svfiprintf_r+0xd4>
 800450c:	2300      	movs	r3, #0
 800450e:	3401      	adds	r4, #1
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	4619      	mov	r1, r3
 8004514:	f04f 0c0a 	mov.w	ip, #10
 8004518:	4620      	mov	r0, r4
 800451a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800451e:	3a30      	subs	r2, #48	; 0x30
 8004520:	2a09      	cmp	r2, #9
 8004522:	d903      	bls.n	800452c <_svfiprintf_r+0x1a8>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0c5      	beq.n	80044b4 <_svfiprintf_r+0x130>
 8004528:	9105      	str	r1, [sp, #20]
 800452a:	e7c3      	b.n	80044b4 <_svfiprintf_r+0x130>
 800452c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004530:	4604      	mov	r4, r0
 8004532:	2301      	movs	r3, #1
 8004534:	e7f0      	b.n	8004518 <_svfiprintf_r+0x194>
 8004536:	ab03      	add	r3, sp, #12
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	462a      	mov	r2, r5
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <_svfiprintf_r+0x1f8>)
 800453e:	a904      	add	r1, sp, #16
 8004540:	4638      	mov	r0, r7
 8004542:	f3af 8000 	nop.w
 8004546:	1c42      	adds	r2, r0, #1
 8004548:	4606      	mov	r6, r0
 800454a:	d1d6      	bne.n	80044fa <_svfiprintf_r+0x176>
 800454c:	89ab      	ldrh	r3, [r5, #12]
 800454e:	065b      	lsls	r3, r3, #25
 8004550:	f53f af2c 	bmi.w	80043ac <_svfiprintf_r+0x28>
 8004554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004556:	b01d      	add	sp, #116	; 0x74
 8004558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800455c:	ab03      	add	r3, sp, #12
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	462a      	mov	r2, r5
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <_svfiprintf_r+0x1f8>)
 8004564:	a904      	add	r1, sp, #16
 8004566:	4638      	mov	r0, r7
 8004568:	f000 f87a 	bl	8004660 <_printf_i>
 800456c:	e7eb      	b.n	8004546 <_svfiprintf_r+0x1c2>
 800456e:	bf00      	nop
 8004570:	08004dd0 	.word	0x08004dd0
 8004574:	08004dda 	.word	0x08004dda
 8004578:	00000000 	.word	0x00000000
 800457c:	080042cd 	.word	0x080042cd
 8004580:	08004dd6 	.word	0x08004dd6

08004584 <_printf_common>:
 8004584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004588:	4616      	mov	r6, r2
 800458a:	4699      	mov	r9, r3
 800458c:	688a      	ldr	r2, [r1, #8]
 800458e:	690b      	ldr	r3, [r1, #16]
 8004590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004594:	4293      	cmp	r3, r2
 8004596:	bfb8      	it	lt
 8004598:	4613      	movlt	r3, r2
 800459a:	6033      	str	r3, [r6, #0]
 800459c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045a0:	4607      	mov	r7, r0
 80045a2:	460c      	mov	r4, r1
 80045a4:	b10a      	cbz	r2, 80045aa <_printf_common+0x26>
 80045a6:	3301      	adds	r3, #1
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	0699      	lsls	r1, r3, #26
 80045ae:	bf42      	ittt	mi
 80045b0:	6833      	ldrmi	r3, [r6, #0]
 80045b2:	3302      	addmi	r3, #2
 80045b4:	6033      	strmi	r3, [r6, #0]
 80045b6:	6825      	ldr	r5, [r4, #0]
 80045b8:	f015 0506 	ands.w	r5, r5, #6
 80045bc:	d106      	bne.n	80045cc <_printf_common+0x48>
 80045be:	f104 0a19 	add.w	sl, r4, #25
 80045c2:	68e3      	ldr	r3, [r4, #12]
 80045c4:	6832      	ldr	r2, [r6, #0]
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	42ab      	cmp	r3, r5
 80045ca:	dc26      	bgt.n	800461a <_printf_common+0x96>
 80045cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045d0:	1e13      	subs	r3, r2, #0
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	bf18      	it	ne
 80045d6:	2301      	movne	r3, #1
 80045d8:	0692      	lsls	r2, r2, #26
 80045da:	d42b      	bmi.n	8004634 <_printf_common+0xb0>
 80045dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045e0:	4649      	mov	r1, r9
 80045e2:	4638      	mov	r0, r7
 80045e4:	47c0      	blx	r8
 80045e6:	3001      	adds	r0, #1
 80045e8:	d01e      	beq.n	8004628 <_printf_common+0xa4>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	68e5      	ldr	r5, [r4, #12]
 80045ee:	6832      	ldr	r2, [r6, #0]
 80045f0:	f003 0306 	and.w	r3, r3, #6
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	bf08      	it	eq
 80045f8:	1aad      	subeq	r5, r5, r2
 80045fa:	68a3      	ldr	r3, [r4, #8]
 80045fc:	6922      	ldr	r2, [r4, #16]
 80045fe:	bf0c      	ite	eq
 8004600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004604:	2500      	movne	r5, #0
 8004606:	4293      	cmp	r3, r2
 8004608:	bfc4      	itt	gt
 800460a:	1a9b      	subgt	r3, r3, r2
 800460c:	18ed      	addgt	r5, r5, r3
 800460e:	2600      	movs	r6, #0
 8004610:	341a      	adds	r4, #26
 8004612:	42b5      	cmp	r5, r6
 8004614:	d11a      	bne.n	800464c <_printf_common+0xc8>
 8004616:	2000      	movs	r0, #0
 8004618:	e008      	b.n	800462c <_printf_common+0xa8>
 800461a:	2301      	movs	r3, #1
 800461c:	4652      	mov	r2, sl
 800461e:	4649      	mov	r1, r9
 8004620:	4638      	mov	r0, r7
 8004622:	47c0      	blx	r8
 8004624:	3001      	adds	r0, #1
 8004626:	d103      	bne.n	8004630 <_printf_common+0xac>
 8004628:	f04f 30ff 	mov.w	r0, #4294967295
 800462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004630:	3501      	adds	r5, #1
 8004632:	e7c6      	b.n	80045c2 <_printf_common+0x3e>
 8004634:	18e1      	adds	r1, r4, r3
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	2030      	movs	r0, #48	; 0x30
 800463a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800463e:	4422      	add	r2, r4
 8004640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004648:	3302      	adds	r3, #2
 800464a:	e7c7      	b.n	80045dc <_printf_common+0x58>
 800464c:	2301      	movs	r3, #1
 800464e:	4622      	mov	r2, r4
 8004650:	4649      	mov	r1, r9
 8004652:	4638      	mov	r0, r7
 8004654:	47c0      	blx	r8
 8004656:	3001      	adds	r0, #1
 8004658:	d0e6      	beq.n	8004628 <_printf_common+0xa4>
 800465a:	3601      	adds	r6, #1
 800465c:	e7d9      	b.n	8004612 <_printf_common+0x8e>
	...

08004660 <_printf_i>:
 8004660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004664:	7e0f      	ldrb	r7, [r1, #24]
 8004666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004668:	2f78      	cmp	r7, #120	; 0x78
 800466a:	4691      	mov	r9, r2
 800466c:	4680      	mov	r8, r0
 800466e:	460c      	mov	r4, r1
 8004670:	469a      	mov	sl, r3
 8004672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004676:	d807      	bhi.n	8004688 <_printf_i+0x28>
 8004678:	2f62      	cmp	r7, #98	; 0x62
 800467a:	d80a      	bhi.n	8004692 <_printf_i+0x32>
 800467c:	2f00      	cmp	r7, #0
 800467e:	f000 80d8 	beq.w	8004832 <_printf_i+0x1d2>
 8004682:	2f58      	cmp	r7, #88	; 0x58
 8004684:	f000 80a3 	beq.w	80047ce <_printf_i+0x16e>
 8004688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800468c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004690:	e03a      	b.n	8004708 <_printf_i+0xa8>
 8004692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004696:	2b15      	cmp	r3, #21
 8004698:	d8f6      	bhi.n	8004688 <_printf_i+0x28>
 800469a:	a101      	add	r1, pc, #4	; (adr r1, 80046a0 <_printf_i+0x40>)
 800469c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046a0:	080046f9 	.word	0x080046f9
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	08004689 	.word	0x08004689
 80046ac:	08004689 	.word	0x08004689
 80046b0:	08004689 	.word	0x08004689
 80046b4:	08004689 	.word	0x08004689
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	08004689 	.word	0x08004689
 80046c0:	08004689 	.word	0x08004689
 80046c4:	08004689 	.word	0x08004689
 80046c8:	08004689 	.word	0x08004689
 80046cc:	08004819 	.word	0x08004819
 80046d0:	0800473d 	.word	0x0800473d
 80046d4:	080047fb 	.word	0x080047fb
 80046d8:	08004689 	.word	0x08004689
 80046dc:	08004689 	.word	0x08004689
 80046e0:	0800483b 	.word	0x0800483b
 80046e4:	08004689 	.word	0x08004689
 80046e8:	0800473d 	.word	0x0800473d
 80046ec:	08004689 	.word	0x08004689
 80046f0:	08004689 	.word	0x08004689
 80046f4:	08004803 	.word	0x08004803
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	1d1a      	adds	r2, r3, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	602a      	str	r2, [r5, #0]
 8004700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004708:	2301      	movs	r3, #1
 800470a:	e0a3      	b.n	8004854 <_printf_i+0x1f4>
 800470c:	6820      	ldr	r0, [r4, #0]
 800470e:	6829      	ldr	r1, [r5, #0]
 8004710:	0606      	lsls	r6, r0, #24
 8004712:	f101 0304 	add.w	r3, r1, #4
 8004716:	d50a      	bpl.n	800472e <_printf_i+0xce>
 8004718:	680e      	ldr	r6, [r1, #0]
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	2e00      	cmp	r6, #0
 800471e:	da03      	bge.n	8004728 <_printf_i+0xc8>
 8004720:	232d      	movs	r3, #45	; 0x2d
 8004722:	4276      	negs	r6, r6
 8004724:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004728:	485e      	ldr	r0, [pc, #376]	; (80048a4 <_printf_i+0x244>)
 800472a:	230a      	movs	r3, #10
 800472c:	e019      	b.n	8004762 <_printf_i+0x102>
 800472e:	680e      	ldr	r6, [r1, #0]
 8004730:	602b      	str	r3, [r5, #0]
 8004732:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004736:	bf18      	it	ne
 8004738:	b236      	sxthne	r6, r6
 800473a:	e7ef      	b.n	800471c <_printf_i+0xbc>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	6820      	ldr	r0, [r4, #0]
 8004740:	1d19      	adds	r1, r3, #4
 8004742:	6029      	str	r1, [r5, #0]
 8004744:	0601      	lsls	r1, r0, #24
 8004746:	d501      	bpl.n	800474c <_printf_i+0xec>
 8004748:	681e      	ldr	r6, [r3, #0]
 800474a:	e002      	b.n	8004752 <_printf_i+0xf2>
 800474c:	0646      	lsls	r6, r0, #25
 800474e:	d5fb      	bpl.n	8004748 <_printf_i+0xe8>
 8004750:	881e      	ldrh	r6, [r3, #0]
 8004752:	4854      	ldr	r0, [pc, #336]	; (80048a4 <_printf_i+0x244>)
 8004754:	2f6f      	cmp	r7, #111	; 0x6f
 8004756:	bf0c      	ite	eq
 8004758:	2308      	moveq	r3, #8
 800475a:	230a      	movne	r3, #10
 800475c:	2100      	movs	r1, #0
 800475e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004762:	6865      	ldr	r5, [r4, #4]
 8004764:	60a5      	str	r5, [r4, #8]
 8004766:	2d00      	cmp	r5, #0
 8004768:	bfa2      	ittt	ge
 800476a:	6821      	ldrge	r1, [r4, #0]
 800476c:	f021 0104 	bicge.w	r1, r1, #4
 8004770:	6021      	strge	r1, [r4, #0]
 8004772:	b90e      	cbnz	r6, 8004778 <_printf_i+0x118>
 8004774:	2d00      	cmp	r5, #0
 8004776:	d04d      	beq.n	8004814 <_printf_i+0x1b4>
 8004778:	4615      	mov	r5, r2
 800477a:	fbb6 f1f3 	udiv	r1, r6, r3
 800477e:	fb03 6711 	mls	r7, r3, r1, r6
 8004782:	5dc7      	ldrb	r7, [r0, r7]
 8004784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004788:	4637      	mov	r7, r6
 800478a:	42bb      	cmp	r3, r7
 800478c:	460e      	mov	r6, r1
 800478e:	d9f4      	bls.n	800477a <_printf_i+0x11a>
 8004790:	2b08      	cmp	r3, #8
 8004792:	d10b      	bne.n	80047ac <_printf_i+0x14c>
 8004794:	6823      	ldr	r3, [r4, #0]
 8004796:	07de      	lsls	r6, r3, #31
 8004798:	d508      	bpl.n	80047ac <_printf_i+0x14c>
 800479a:	6923      	ldr	r3, [r4, #16]
 800479c:	6861      	ldr	r1, [r4, #4]
 800479e:	4299      	cmp	r1, r3
 80047a0:	bfde      	ittt	le
 80047a2:	2330      	movle	r3, #48	; 0x30
 80047a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047ac:	1b52      	subs	r2, r2, r5
 80047ae:	6122      	str	r2, [r4, #16]
 80047b0:	f8cd a000 	str.w	sl, [sp]
 80047b4:	464b      	mov	r3, r9
 80047b6:	aa03      	add	r2, sp, #12
 80047b8:	4621      	mov	r1, r4
 80047ba:	4640      	mov	r0, r8
 80047bc:	f7ff fee2 	bl	8004584 <_printf_common>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d14c      	bne.n	800485e <_printf_i+0x1fe>
 80047c4:	f04f 30ff 	mov.w	r0, #4294967295
 80047c8:	b004      	add	sp, #16
 80047ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ce:	4835      	ldr	r0, [pc, #212]	; (80048a4 <_printf_i+0x244>)
 80047d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047d4:	6829      	ldr	r1, [r5, #0]
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80047dc:	6029      	str	r1, [r5, #0]
 80047de:	061d      	lsls	r5, r3, #24
 80047e0:	d514      	bpl.n	800480c <_printf_i+0x1ac>
 80047e2:	07df      	lsls	r7, r3, #31
 80047e4:	bf44      	itt	mi
 80047e6:	f043 0320 	orrmi.w	r3, r3, #32
 80047ea:	6023      	strmi	r3, [r4, #0]
 80047ec:	b91e      	cbnz	r6, 80047f6 <_printf_i+0x196>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	f023 0320 	bic.w	r3, r3, #32
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	2310      	movs	r3, #16
 80047f8:	e7b0      	b.n	800475c <_printf_i+0xfc>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	f043 0320 	orr.w	r3, r3, #32
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	2378      	movs	r3, #120	; 0x78
 8004804:	4828      	ldr	r0, [pc, #160]	; (80048a8 <_printf_i+0x248>)
 8004806:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800480a:	e7e3      	b.n	80047d4 <_printf_i+0x174>
 800480c:	0659      	lsls	r1, r3, #25
 800480e:	bf48      	it	mi
 8004810:	b2b6      	uxthmi	r6, r6
 8004812:	e7e6      	b.n	80047e2 <_printf_i+0x182>
 8004814:	4615      	mov	r5, r2
 8004816:	e7bb      	b.n	8004790 <_printf_i+0x130>
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	6826      	ldr	r6, [r4, #0]
 800481c:	6961      	ldr	r1, [r4, #20]
 800481e:	1d18      	adds	r0, r3, #4
 8004820:	6028      	str	r0, [r5, #0]
 8004822:	0635      	lsls	r5, r6, #24
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	d501      	bpl.n	800482c <_printf_i+0x1cc>
 8004828:	6019      	str	r1, [r3, #0]
 800482a:	e002      	b.n	8004832 <_printf_i+0x1d2>
 800482c:	0670      	lsls	r0, r6, #25
 800482e:	d5fb      	bpl.n	8004828 <_printf_i+0x1c8>
 8004830:	8019      	strh	r1, [r3, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	6123      	str	r3, [r4, #16]
 8004836:	4615      	mov	r5, r2
 8004838:	e7ba      	b.n	80047b0 <_printf_i+0x150>
 800483a:	682b      	ldr	r3, [r5, #0]
 800483c:	1d1a      	adds	r2, r3, #4
 800483e:	602a      	str	r2, [r5, #0]
 8004840:	681d      	ldr	r5, [r3, #0]
 8004842:	6862      	ldr	r2, [r4, #4]
 8004844:	2100      	movs	r1, #0
 8004846:	4628      	mov	r0, r5
 8004848:	f7fb fce2 	bl	8000210 <memchr>
 800484c:	b108      	cbz	r0, 8004852 <_printf_i+0x1f2>
 800484e:	1b40      	subs	r0, r0, r5
 8004850:	6060      	str	r0, [r4, #4]
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	2300      	movs	r3, #0
 8004858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485c:	e7a8      	b.n	80047b0 <_printf_i+0x150>
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	462a      	mov	r2, r5
 8004862:	4649      	mov	r1, r9
 8004864:	4640      	mov	r0, r8
 8004866:	47d0      	blx	sl
 8004868:	3001      	adds	r0, #1
 800486a:	d0ab      	beq.n	80047c4 <_printf_i+0x164>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	079b      	lsls	r3, r3, #30
 8004870:	d413      	bmi.n	800489a <_printf_i+0x23a>
 8004872:	68e0      	ldr	r0, [r4, #12]
 8004874:	9b03      	ldr	r3, [sp, #12]
 8004876:	4298      	cmp	r0, r3
 8004878:	bfb8      	it	lt
 800487a:	4618      	movlt	r0, r3
 800487c:	e7a4      	b.n	80047c8 <_printf_i+0x168>
 800487e:	2301      	movs	r3, #1
 8004880:	4632      	mov	r2, r6
 8004882:	4649      	mov	r1, r9
 8004884:	4640      	mov	r0, r8
 8004886:	47d0      	blx	sl
 8004888:	3001      	adds	r0, #1
 800488a:	d09b      	beq.n	80047c4 <_printf_i+0x164>
 800488c:	3501      	adds	r5, #1
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	9903      	ldr	r1, [sp, #12]
 8004892:	1a5b      	subs	r3, r3, r1
 8004894:	42ab      	cmp	r3, r5
 8004896:	dcf2      	bgt.n	800487e <_printf_i+0x21e>
 8004898:	e7eb      	b.n	8004872 <_printf_i+0x212>
 800489a:	2500      	movs	r5, #0
 800489c:	f104 0619 	add.w	r6, r4, #25
 80048a0:	e7f5      	b.n	800488e <_printf_i+0x22e>
 80048a2:	bf00      	nop
 80048a4:	08004de1 	.word	0x08004de1
 80048a8:	08004df2 	.word	0x08004df2

080048ac <_sbrk_r>:
 80048ac:	b538      	push	{r3, r4, r5, lr}
 80048ae:	4d06      	ldr	r5, [pc, #24]	; (80048c8 <_sbrk_r+0x1c>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	4604      	mov	r4, r0
 80048b4:	4608      	mov	r0, r1
 80048b6:	602b      	str	r3, [r5, #0]
 80048b8:	f7fc fb36 	bl	8000f28 <_sbrk>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d102      	bne.n	80048c6 <_sbrk_r+0x1a>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b103      	cbz	r3, 80048c6 <_sbrk_r+0x1a>
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	bd38      	pop	{r3, r4, r5, pc}
 80048c8:	2000017c 	.word	0x2000017c

080048cc <__sread>:
 80048cc:	b510      	push	{r4, lr}
 80048ce:	460c      	mov	r4, r1
 80048d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d4:	f000 f8f8 	bl	8004ac8 <_read_r>
 80048d8:	2800      	cmp	r0, #0
 80048da:	bfab      	itete	ge
 80048dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048de:	89a3      	ldrhlt	r3, [r4, #12]
 80048e0:	181b      	addge	r3, r3, r0
 80048e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048e6:	bfac      	ite	ge
 80048e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80048ea:	81a3      	strhlt	r3, [r4, #12]
 80048ec:	bd10      	pop	{r4, pc}

080048ee <__swrite>:
 80048ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f2:	461f      	mov	r7, r3
 80048f4:	898b      	ldrh	r3, [r1, #12]
 80048f6:	05db      	lsls	r3, r3, #23
 80048f8:	4605      	mov	r5, r0
 80048fa:	460c      	mov	r4, r1
 80048fc:	4616      	mov	r6, r2
 80048fe:	d505      	bpl.n	800490c <__swrite+0x1e>
 8004900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004904:	2302      	movs	r3, #2
 8004906:	2200      	movs	r2, #0
 8004908:	f000 f868 	bl	80049dc <_lseek_r>
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004912:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	4632      	mov	r2, r6
 800491a:	463b      	mov	r3, r7
 800491c:	4628      	mov	r0, r5
 800491e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004922:	f000 b817 	b.w	8004954 <_write_r>

08004926 <__sseek>:
 8004926:	b510      	push	{r4, lr}
 8004928:	460c      	mov	r4, r1
 800492a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492e:	f000 f855 	bl	80049dc <_lseek_r>
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	89a3      	ldrh	r3, [r4, #12]
 8004936:	bf15      	itete	ne
 8004938:	6560      	strne	r0, [r4, #84]	; 0x54
 800493a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800493e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004942:	81a3      	strheq	r3, [r4, #12]
 8004944:	bf18      	it	ne
 8004946:	81a3      	strhne	r3, [r4, #12]
 8004948:	bd10      	pop	{r4, pc}

0800494a <__sclose>:
 800494a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494e:	f000 b813 	b.w	8004978 <_close_r>
	...

08004954 <_write_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d07      	ldr	r5, [pc, #28]	; (8004974 <_write_r+0x20>)
 8004958:	4604      	mov	r4, r0
 800495a:	4608      	mov	r0, r1
 800495c:	4611      	mov	r1, r2
 800495e:	2200      	movs	r2, #0
 8004960:	602a      	str	r2, [r5, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	f7fc fa8f 	bl	8000e86 <_write>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_write_r+0x1e>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	b103      	cbz	r3, 8004972 <_write_r+0x1e>
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	2000017c 	.word	0x2000017c

08004978 <_close_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4d06      	ldr	r5, [pc, #24]	; (8004994 <_close_r+0x1c>)
 800497c:	2300      	movs	r3, #0
 800497e:	4604      	mov	r4, r0
 8004980:	4608      	mov	r0, r1
 8004982:	602b      	str	r3, [r5, #0]
 8004984:	f7fc fa9b 	bl	8000ebe <_close>
 8004988:	1c43      	adds	r3, r0, #1
 800498a:	d102      	bne.n	8004992 <_close_r+0x1a>
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	b103      	cbz	r3, 8004992 <_close_r+0x1a>
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	bd38      	pop	{r3, r4, r5, pc}
 8004994:	2000017c 	.word	0x2000017c

08004998 <_fstat_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4d07      	ldr	r5, [pc, #28]	; (80049b8 <_fstat_r+0x20>)
 800499c:	2300      	movs	r3, #0
 800499e:	4604      	mov	r4, r0
 80049a0:	4608      	mov	r0, r1
 80049a2:	4611      	mov	r1, r2
 80049a4:	602b      	str	r3, [r5, #0]
 80049a6:	f7fc fa96 	bl	8000ed6 <_fstat>
 80049aa:	1c43      	adds	r3, r0, #1
 80049ac:	d102      	bne.n	80049b4 <_fstat_r+0x1c>
 80049ae:	682b      	ldr	r3, [r5, #0]
 80049b0:	b103      	cbz	r3, 80049b4 <_fstat_r+0x1c>
 80049b2:	6023      	str	r3, [r4, #0]
 80049b4:	bd38      	pop	{r3, r4, r5, pc}
 80049b6:	bf00      	nop
 80049b8:	2000017c 	.word	0x2000017c

080049bc <_isatty_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4d06      	ldr	r5, [pc, #24]	; (80049d8 <_isatty_r+0x1c>)
 80049c0:	2300      	movs	r3, #0
 80049c2:	4604      	mov	r4, r0
 80049c4:	4608      	mov	r0, r1
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	f7fc fa95 	bl	8000ef6 <_isatty>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d102      	bne.n	80049d6 <_isatty_r+0x1a>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b103      	cbz	r3, 80049d6 <_isatty_r+0x1a>
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	2000017c 	.word	0x2000017c

080049dc <_lseek_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d07      	ldr	r5, [pc, #28]	; (80049fc <_lseek_r+0x20>)
 80049e0:	4604      	mov	r4, r0
 80049e2:	4608      	mov	r0, r1
 80049e4:	4611      	mov	r1, r2
 80049e6:	2200      	movs	r2, #0
 80049e8:	602a      	str	r2, [r5, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7fc fa8e 	bl	8000f0c <_lseek>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_lseek_r+0x1e>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_lseek_r+0x1e>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	2000017c 	.word	0x2000017c

08004a00 <memcpy>:
 8004a00:	440a      	add	r2, r1
 8004a02:	4291      	cmp	r1, r2
 8004a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a08:	d100      	bne.n	8004a0c <memcpy+0xc>
 8004a0a:	4770      	bx	lr
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a16:	4291      	cmp	r1, r2
 8004a18:	d1f9      	bne.n	8004a0e <memcpy+0xe>
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <memmove>:
 8004a1c:	4288      	cmp	r0, r1
 8004a1e:	b510      	push	{r4, lr}
 8004a20:	eb01 0402 	add.w	r4, r1, r2
 8004a24:	d902      	bls.n	8004a2c <memmove+0x10>
 8004a26:	4284      	cmp	r4, r0
 8004a28:	4623      	mov	r3, r4
 8004a2a:	d807      	bhi.n	8004a3c <memmove+0x20>
 8004a2c:	1e43      	subs	r3, r0, #1
 8004a2e:	42a1      	cmp	r1, r4
 8004a30:	d008      	beq.n	8004a44 <memmove+0x28>
 8004a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a3a:	e7f8      	b.n	8004a2e <memmove+0x12>
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4601      	mov	r1, r0
 8004a40:	428a      	cmp	r2, r1
 8004a42:	d100      	bne.n	8004a46 <memmove+0x2a>
 8004a44:	bd10      	pop	{r4, pc}
 8004a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a4e:	e7f7      	b.n	8004a40 <memmove+0x24>

08004a50 <__malloc_lock>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__malloc_lock+0x8>)
 8004a52:	f7ff baf3 	b.w	800403c <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	20000170 	.word	0x20000170

08004a5c <__malloc_unlock>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__malloc_unlock+0x8>)
 8004a5e:	f7ff baee 	b.w	800403e <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	20000170 	.word	0x20000170

08004a68 <_realloc_r>:
 8004a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a6c:	4680      	mov	r8, r0
 8004a6e:	4614      	mov	r4, r2
 8004a70:	460e      	mov	r6, r1
 8004a72:	b921      	cbnz	r1, 8004a7e <_realloc_r+0x16>
 8004a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a78:	4611      	mov	r1, r2
 8004a7a:	f7ff bbb3 	b.w	80041e4 <_malloc_r>
 8004a7e:	b92a      	cbnz	r2, 8004a8c <_realloc_r+0x24>
 8004a80:	f7ff fb44 	bl	800410c <_free_r>
 8004a84:	4625      	mov	r5, r4
 8004a86:	4628      	mov	r0, r5
 8004a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8c:	f000 f82e 	bl	8004aec <_malloc_usable_size_r>
 8004a90:	4284      	cmp	r4, r0
 8004a92:	4607      	mov	r7, r0
 8004a94:	d802      	bhi.n	8004a9c <_realloc_r+0x34>
 8004a96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a9a:	d812      	bhi.n	8004ac2 <_realloc_r+0x5a>
 8004a9c:	4621      	mov	r1, r4
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	f7ff fba0 	bl	80041e4 <_malloc_r>
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d0ed      	beq.n	8004a86 <_realloc_r+0x1e>
 8004aaa:	42bc      	cmp	r4, r7
 8004aac:	4622      	mov	r2, r4
 8004aae:	4631      	mov	r1, r6
 8004ab0:	bf28      	it	cs
 8004ab2:	463a      	movcs	r2, r7
 8004ab4:	f7ff ffa4 	bl	8004a00 <memcpy>
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4640      	mov	r0, r8
 8004abc:	f7ff fb26 	bl	800410c <_free_r>
 8004ac0:	e7e1      	b.n	8004a86 <_realloc_r+0x1e>
 8004ac2:	4635      	mov	r5, r6
 8004ac4:	e7df      	b.n	8004a86 <_realloc_r+0x1e>
	...

08004ac8 <_read_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4d07      	ldr	r5, [pc, #28]	; (8004ae8 <_read_r+0x20>)
 8004acc:	4604      	mov	r4, r0
 8004ace:	4608      	mov	r0, r1
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	602a      	str	r2, [r5, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f7fc f9b8 	bl	8000e4c <_read>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_read_r+0x1e>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_read_r+0x1e>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	2000017c 	.word	0x2000017c

08004aec <_malloc_usable_size_r>:
 8004aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af0:	1f18      	subs	r0, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bfbc      	itt	lt
 8004af6:	580b      	ldrlt	r3, [r1, r0]
 8004af8:	18c0      	addlt	r0, r0, r3
 8004afa:	4770      	bx	lr

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr

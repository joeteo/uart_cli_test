
uart_cli_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e08  08004e08  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08004e08  08004e08  00014e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e10  08004e10  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          000000bc  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000180  20000180  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bbfb  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021d1  00000000  00000000  0002bcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008d0  00000000  00000000  0002e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c61  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d06e  00000000  00000000  00053db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9e95  00000000  00000000  00060e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013acbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e7c  00000000  00000000  0013ad0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004b00 	.word	0x08004b00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	08004b00 	.word	0x08004b00

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	; 0x30
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 031c 	add.w	r3, r7, #28
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
 80005ce:	4b7c      	ldr	r3, [pc, #496]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a7b      	ldr	r2, [pc, #492]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b79      	ldr	r3, [pc, #484]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	61bb      	str	r3, [r7, #24]
 80005e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a74      	ldr	r2, [pc, #464]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b72      	ldr	r3, [pc, #456]	; (80007c0 <MX_GPIO_Init+0x20c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b6e      	ldr	r3, [pc, #440]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a6d      	ldr	r2, [pc, #436]	; (80007c0 <MX_GPIO_Init+0x20c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b6b      	ldr	r3, [pc, #428]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b67      	ldr	r3, [pc, #412]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a66      	ldr	r2, [pc, #408]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000628:	f043 0302 	orr.w	r3, r3, #2
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b64      	ldr	r3, [pc, #400]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b60      	ldr	r3, [pc, #384]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a5f      	ldr	r2, [pc, #380]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b5d      	ldr	r3, [pc, #372]	; (80007c0 <MX_GPIO_Init+0x20c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <MX_GPIO_Init+0x20c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a58      	ldr	r2, [pc, #352]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b56      	ldr	r3, [pc, #344]	; (80007c0 <MX_GPIO_Init+0x20c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f244 0181 	movw	r1, #16513	; 0x4081
 8000678:	4852      	ldr	r0, [pc, #328]	; (80007c4 <MX_GPIO_Init+0x210>)
 800067a:	f001 f929 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	4851      	ldr	r0, [pc, #324]	; (80007c8 <MX_GPIO_Init+0x214>)
 8000684:	f001 f924 	bl	80018d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800068e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	484b      	ldr	r0, [pc, #300]	; (80007cc <MX_GPIO_Init+0x218>)
 80006a0:	f000 ff6a 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4843      	ldr	r0, [pc, #268]	; (80007cc <MX_GPIO_Init+0x218>)
 80006c0:	f000 ff5a 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c4:	2386      	movs	r3, #134	; 0x86
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	483c      	ldr	r0, [pc, #240]	; (80007d0 <MX_GPIO_Init+0x21c>)
 80006e0:	f000 ff4a 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006e4:	f244 0381 	movw	r3, #16513	; 0x4081
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	4831      	ldr	r0, [pc, #196]	; (80007c4 <MX_GPIO_Init+0x210>)
 80006fe:	f000 ff3b 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000714:	230b      	movs	r3, #11
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4829      	ldr	r0, [pc, #164]	; (80007c4 <MX_GPIO_Init+0x210>)
 8000720:	f000 ff2a 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000724:	2340      	movs	r3, #64	; 0x40
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000728:	2301      	movs	r3, #1
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4823      	ldr	r0, [pc, #140]	; (80007c8 <MX_GPIO_Init+0x214>)
 800073c:	f000 ff1c 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	481d      	ldr	r0, [pc, #116]	; (80007c8 <MX_GPIO_Init+0x214>)
 8000754:	f000 ff10 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000758:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800075c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800076a:	230a      	movs	r3, #10
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4619      	mov	r1, r3
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <MX_GPIO_Init+0x21c>)
 8000776:	f000 feff 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800077a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4810      	ldr	r0, [pc, #64]	; (80007d0 <MX_GPIO_Init+0x21c>)
 8000790:	f000 fef2 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000794:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_GPIO_Init+0x214>)
 80007b2:	f000 fee1 	bl	8001578 <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40021800 	.word	0x40021800
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020000 	.word	0x40020000

080007d4 <__io_putchar>:
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80007dc:	1d39      	adds	r1, r7, #4
 80007de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e2:	2201      	movs	r2, #1
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <__io_putchar+0x20>)
 80007e6:	f002 f87c 	bl	80028e2 <HAL_UART_Transmit>

  return ch;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000128 	.word	0x20000128

080007f8 <cmd_torque>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int cmd_torque(int argc, char* argv[])
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	if (argv[1] == NULL) {
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	3304      	adds	r3, #4
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d103      	bne.n	8000814 <cmd_torque+0x1c>
		printf("wrong command pattern. \n");
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <cmd_torque+0x5c>)
 800080e:	f003 f977 	bl	8003b00 <puts>
 8000812:	e01a      	b.n	800084a <cmd_torque+0x52>
	}
	else {
		if (!strcmp(argv[1], "on")) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	3304      	adds	r3, #4
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	490f      	ldr	r1, [pc, #60]	; (8000858 <cmd_torque+0x60>)
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fce7 	bl	80001f0 <strcmp>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d103      	bne.n	8000830 <cmd_torque+0x38>
			printf("torque on. \n");
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <cmd_torque+0x64>)
 800082a:	f003 f969 	bl	8003b00 <puts>
 800082e:	e00c      	b.n	800084a <cmd_torque+0x52>
		}
		else if (!strcmp(argv[1], "off")) {
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	3304      	adds	r3, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	490a      	ldr	r1, [pc, #40]	; (8000860 <cmd_torque+0x68>)
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fcd9 	bl	80001f0 <strcmp>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d102      	bne.n	800084a <cmd_torque+0x52>
			printf("torque off. \n");
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <cmd_torque+0x6c>)
 8000846:	f003 f95b 	bl	8003b00 <puts>
		}
	}

	return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	08004b18 	.word	0x08004b18
 8000858:	08004b30 	.word	0x08004b30
 800085c:	08004b34 	.word	0x08004b34
 8000860:	08004b40 	.word	0x08004b40
 8000864:	08004b44 	.word	0x08004b44

08000868 <cdm_pump>:

int cdm_pump(int argc, char* argv[])
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
	if (argv[1] == NULL) {
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d103      	bne.n	8000884 <cdm_pump+0x1c>
		printf("wrong command pattern. \n");
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <cdm_pump+0x5c>)
 800087e:	f003 f93f 	bl	8003b00 <puts>
 8000882:	e01a      	b.n	80008ba <cdm_pump+0x52>
	}
	else {
		if (!strcmp(argv[1], "on")) {
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3304      	adds	r3, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	490f      	ldr	r1, [pc, #60]	; (80008c8 <cdm_pump+0x60>)
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fcaf 	bl	80001f0 <strcmp>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d103      	bne.n	80008a0 <cdm_pump+0x38>
			printf("pump on. \n");
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <cdm_pump+0x64>)
 800089a:	f003 f931 	bl	8003b00 <puts>
 800089e:	e00c      	b.n	80008ba <cdm_pump+0x52>
		}
		else if (!strcmp(argv[1], "off")) {
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	3304      	adds	r3, #4
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	490a      	ldr	r1, [pc, #40]	; (80008d0 <cdm_pump+0x68>)
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fca1 	bl	80001f0 <strcmp>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <cdm_pump+0x52>
			printf("pump off. \n");
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <cdm_pump+0x6c>)
 80008b6:	f003 f923 	bl	8003b00 <puts>
		}
	}

	return 0;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	08004b18 	.word	0x08004b18
 80008c8:	08004b30 	.word	0x08004b30
 80008cc:	08004b54 	.word	0x08004b54
 80008d0:	08004b40 	.word	0x08004b40
 80008d4:	08004b60 	.word	0x08004b60

080008d8 <cmd_conveyorBelt>:

int cmd_conveyorBelt(int argc, char* argv[])
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	if (argv[1] == NULL) {
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	3304      	adds	r3, #4
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d103      	bne.n	80008f4 <cmd_conveyorBelt+0x1c>
		printf("wrong command pattern. \n");
 80008ec:	4824      	ldr	r0, [pc, #144]	; (8000980 <cmd_conveyorBelt+0xa8>)
 80008ee:	f003 f907 	bl	8003b00 <puts>
 80008f2:	e03f      	b.n	8000974 <cmd_conveyorBelt+0x9c>
	}
	else {
		if (!strcmp(argv[1], "on")) {
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4922      	ldr	r1, [pc, #136]	; (8000984 <cmd_conveyorBelt+0xac>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc77 	bl	80001f0 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d128      	bne.n	800095a <cmd_conveyorBelt+0x82>
			if (argv[2] == NULL) {
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	3308      	adds	r3, #8
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d103      	bne.n	800091a <cmd_conveyorBelt+0x42>
				printf("wrong command pattern. \n");
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <cmd_conveyorBelt+0xa8>)
 8000914:	f003 f8f4 	bl	8003b00 <puts>
 8000918:	e02c      	b.n	8000974 <cmd_conveyorBelt+0x9c>
			}
			else {
				if (!strcmp(argv[2], "right")) {
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	3308      	adds	r3, #8
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4919      	ldr	r1, [pc, #100]	; (8000988 <cmd_conveyorBelt+0xb0>)
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fc64 	bl	80001f0 <strcmp>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d103      	bne.n	8000936 <cmd_conveyorBelt+0x5e>
					printf("conveyor belt turn endlessly right. \n");
 800092e:	4817      	ldr	r0, [pc, #92]	; (800098c <cmd_conveyorBelt+0xb4>)
 8000930:	f003 f8e6 	bl	8003b00 <puts>
 8000934:	e01e      	b.n	8000974 <cmd_conveyorBelt+0x9c>
				}
				else if (!strcmp(argv[2], "left")) {
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3308      	adds	r3, #8
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4914      	ldr	r1, [pc, #80]	; (8000990 <cmd_conveyorBelt+0xb8>)
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fc56 	bl	80001f0 <strcmp>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <cmd_conveyorBelt+0x7a>
					printf("conveyor belt turn endlessly left. \n");
 800094a:	4812      	ldr	r0, [pc, #72]	; (8000994 <cmd_conveyorBelt+0xbc>)
 800094c:	f003 f8d8 	bl	8003b00 <puts>
 8000950:	e010      	b.n	8000974 <cmd_conveyorBelt+0x9c>
				}else {
					printf("wrong command pattern. \n");
 8000952:	480b      	ldr	r0, [pc, #44]	; (8000980 <cmd_conveyorBelt+0xa8>)
 8000954:	f003 f8d4 	bl	8003b00 <puts>
 8000958:	e00c      	b.n	8000974 <cmd_conveyorBelt+0x9c>
				}
			}
		}
		else if (!strcmp(argv[1], "off")) {
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	3304      	adds	r3, #4
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	490d      	ldr	r1, [pc, #52]	; (8000998 <cmd_conveyorBelt+0xc0>)
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fc44 	bl	80001f0 <strcmp>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <cmd_conveyorBelt+0x9c>
			printf("conveyor belt stop. \n");
 800096e:	480b      	ldr	r0, [pc, #44]	; (800099c <cmd_conveyorBelt+0xc4>)
 8000970:	f003 f8c6 	bl	8003b00 <puts>
		}
	}

	return 0;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	08004b18 	.word	0x08004b18
 8000984:	08004b30 	.word	0x08004b30
 8000988:	08004b6c 	.word	0x08004b6c
 800098c:	08004b74 	.word	0x08004b74
 8000990:	08004b9c 	.word	0x08004b9c
 8000994:	08004ba4 	.word	0x08004ba4
 8000998:	08004b40 	.word	0x08004b40
 800099c:	08004bc8 	.word	0x08004bc8

080009a0 <cmd_pick>:

int cmd_pick(int argc, char* argv[])
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
	printf("pick up item on the conveyor belt. \n");
 80009aa:	4804      	ldr	r0, [pc, #16]	; (80009bc <cmd_pick+0x1c>)
 80009ac:	f003 f8a8 	bl	8003b00 <puts>
	return 0;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	08004be0 	.word	0x08004be0

080009c0 <cmd_throw>:

int cmd_throw(int argc, char* argv[])
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
	printf("throw item away \n");
 80009ca:	4804      	ldr	r0, [pc, #16]	; (80009dc <cmd_throw+0x1c>)
 80009cc:	f003 f898 	bl	8003b00 <puts>
	return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	08004c04 	.word	0x08004c04

080009e0 <cmd_exit>:

int cmd_exit(int argc, char* argv[])
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
	printf("exit command received \n");
 80009ea:	4804      	ldr	r0, [pc, #16]	; (80009fc <cmd_exit+0x1c>)
 80009ec:	f003 f888 	bl	8003b00 <puts>
	return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08004c18 	.word	0x08004c18

08000a00 <parse_input_string>:

void parse_input_string(char* input_string, int* argc, char* argv[])
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	int found_arg = 1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
	int argn = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]

	while (*input_string)
 8000a14:	e021      	b.n	8000a5a <parse_input_string+0x5a>
	{
		if (*input_string == '\n') {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b0a      	cmp	r3, #10
 8000a1c:	d103      	bne.n	8000a26 <parse_input_string+0x26>
			*input_string = '\0';
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
			break;
 8000a24:	e01d      	b.n	8000a62 <parse_input_string+0x62>
		}

		if (*input_string == ' ') {
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b20      	cmp	r3, #32
 8000a2c:	d105      	bne.n	8000a3a <parse_input_string+0x3a>
			found_arg = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
			*input_string = '\0';
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
 8000a38:	e00c      	b.n	8000a54 <parse_input_string+0x54>
		}
		else if (found_arg) {
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d009      	beq.n	8000a54 <parse_input_string+0x54>
			argv[argn++] = input_string;
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	613a      	str	r2, [r7, #16]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	601a      	str	r2, [r3, #0]
			found_arg = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
		}
		input_string++;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
	while (*input_string)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1d9      	bne.n	8000a16 <parse_input_string+0x16>
	}

	*argc = argn;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <cmd_handler>:
	{"exit",	cmd_exit,	"exit command"},
	{0,0,0}
};

void cmd_handler(char* cmd)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b090      	sub	sp, #64	; 0x40
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	struct Command_List* pCmdList = CmdList;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <cmd_handler+0x84>)
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t i = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t command_found = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38

	int	  argc;
	char* argv[MAX_CMD_NUM] = { 0, };
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2228      	movs	r2, #40	; 0x28
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 ffbf 	bl	8003a14 <memset>

	parse_input_string(cmd, &argc, argv);
 8000a96:	f107 0208 	add.w	r2, r7, #8
 8000a9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ffad 	bl	8000a00 <parse_input_string>

	if (argc)
 8000aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d01a      	beq.n	8000ae2 <cmd_handler+0x6e>
	{
		while (pCmdList->cmd)
 8000aac:	e015      	b.n	8000ada <cmd_handler+0x66>
		{
			if (!strcmp((const char*)pCmdList->cmd, (const char*)cmd))
 8000aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fb9b 	bl	80001f0 <strcmp>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d109      	bne.n	8000ad4 <cmd_handler+0x60>
			{
				command_found = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
				pCmdList->func(argc, argv);
 8000ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aca:	f107 0108 	add.w	r1, r7, #8
 8000ace:	4610      	mov	r0, r2
 8000ad0:	4798      	blx	r3
				break;
 8000ad2:	e006      	b.n	8000ae2 <cmd_handler+0x6e>
			}
			++pCmdList;
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ad6:	330c      	adds	r3, #12
 8000ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
		while (pCmdList->cmd)
 8000ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d1e5      	bne.n	8000aae <cmd_handler+0x3a>
		}
	}
	if (command_found == 0) printf("command not found!\n");
 8000ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <cmd_handler+0x7a>
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <cmd_handler+0x88>)
 8000aea:	f003 f809 	bl	8003b00 <puts>
}
 8000aee:	bf00      	nop
 8000af0:	3740      	adds	r7, #64	; 0x40
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000000 	.word	0x20000000
 8000afc:	08004d10 	.word	0x08004d10

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f000 fafd 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f831 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f7ff fd51 	bl	80005b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b12:	f000 fa53 	bl	8000fbc <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000b16:	f000 f8ef 	bl	8000cf8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	490f      	ldr	r1, [pc, #60]	; (8000b5c <main+0x5c>)
 8000b1e:	4810      	ldr	r0, [pc, #64]	; (8000b60 <main+0x60>)
 8000b20:	f001 ffb6 	bl	8002a90 <HAL_UART_Receive_IT>
  printf("=====================\r\n");
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <main+0x64>)
 8000b26:	f002 ffeb 	bl	8003b00 <puts>
  printf("Command Line Interface\r\n");
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <main+0x68>)
 8000b2c:	f002 ffe8 	bl	8003b00 <puts>
  printf("=====================\r\n");
 8000b30:	480c      	ldr	r0, [pc, #48]	; (8000b64 <main+0x64>)
 8000b32:	f002 ffe5 	bl	8003b00 <puts>
  char temp[4]={0,};
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sprintf(temp, ">> ");
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	490b      	ldr	r1, [pc, #44]	; (8000b6c <main+0x6c>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 ffe6 	bl	8003b10 <siprintf>
  HAL_UART_Transmit_IT(&huart3, (uint8_t*)temp, sizeof(temp));
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2204      	movs	r2, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <main+0x60>)
 8000b4c:	f001 ff5b 	bl	8002a06 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b54:	f000 fb48 	bl	80011e8 <HAL_Delay>
 8000b58:	e7fa      	b.n	8000b50 <main+0x50>
 8000b5a:	bf00      	nop
 8000b5c:	200000e0 	.word	0x200000e0
 8000b60:	20000128 	.word	0x20000128
 8000b64:	08004d24 	.word	0x08004d24
 8000b68:	08004d3c 	.word	0x08004d3c
 8000b6c:	08004d54 	.word	0x08004d54

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b094      	sub	sp, #80	; 0x50
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2230      	movs	r2, #48	; 0x30
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 ff48 	bl	8003a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 030c 	add.w	r3, r7, #12
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <SystemClock_Config+0xdc>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a2b      	ldr	r2, [pc, #172]	; (8000c4c <SystemClock_Config+0xdc>)
 8000b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <SystemClock_Config+0xdc>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <SystemClock_Config+0xe0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a25      	ldr	r2, [pc, #148]	; (8000c50 <SystemClock_Config+0xe0>)
 8000bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <SystemClock_Config+0xe0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000bcc:	2306      	movs	r3, #6
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be4:	2308      	movs	r3, #8
 8000be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000be8:	23b4      	movs	r3, #180	; 0xb4
 8000bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fed3 	bl	80019a4 <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c04:	f000 f872 	bl	8000cec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c08:	f000 fe7c 	bl	8001904 <HAL_PWREx_EnableOverDrive>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c12:	f000 f86b 	bl	8000cec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2105      	movs	r1, #5
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 f92d 	bl	8001e94 <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c40:	f000 f854 	bl	8000cec <Error_Handler>
  }
}
 8000c44:	bf00      	nop
 8000c46:	3750      	adds	r7, #80	; 0x50
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1c      	ldr	r2, [pc, #112]	; (8000cd4 <HAL_UART_RxCpltCallback+0x80>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d132      	bne.n	8000ccc <HAL_UART_RxCpltCallback+0x78>
		if(rx3_data != '\n' && bufindex < BUFSIZE)
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_UART_RxCpltCallback+0x84>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0a      	cmp	r3, #10
 8000c6c:	d00f      	beq.n	8000c8e <HAL_UART_RxCpltCallback+0x3a>
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_UART_RxCpltCallback+0x88>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b1d      	cmp	r3, #29
 8000c74:	d80b      	bhi.n	8000c8e <HAL_UART_RxCpltCallback+0x3a>
			rx3buf[bufindex++] = rx3_data;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_RxCpltCallback+0x88>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	b2d1      	uxtb	r1, r2
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <HAL_UART_RxCpltCallback+0x88>)
 8000c80:	7011      	strb	r1, [r2, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_UART_RxCpltCallback+0x84>)
 8000c86:	7819      	ldrb	r1, [r3, #0]
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_RxCpltCallback+0x8c>)
 8000c8a:	5499      	strb	r1, [r3, r2]
 8000c8c:	e019      	b.n	8000cc2 <HAL_UART_RxCpltCallback+0x6e>
		else {
			cmd_handler((char*)rx3buf);
 8000c8e:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <HAL_UART_RxCpltCallback+0x8c>)
 8000c90:	f7ff fef0 	bl	8000a74 <cmd_handler>
			char temp[4]={0,};
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
			sprintf(temp, ">> ");
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4911      	ldr	r1, [pc, #68]	; (8000ce4 <HAL_UART_RxCpltCallback+0x90>)
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 ff36 	bl	8003b10 <siprintf>
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)temp, sizeof(temp));
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2204      	movs	r2, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	480e      	ldr	r0, [pc, #56]	; (8000ce8 <HAL_UART_RxCpltCallback+0x94>)
 8000cae:	f001 feaa 	bl	8002a06 <HAL_UART_Transmit_IT>
			memset(rx3buf,0,sizeof(rx3buf));
 8000cb2:	221e      	movs	r2, #30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <HAL_UART_RxCpltCallback+0x8c>)
 8000cb8:	f002 feac 	bl	8003a14 <memset>
			bufindex=0;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <HAL_UART_RxCpltCallback+0x88>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
//
//				rx_start = 0;
//			}
//		}

		HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4904      	ldr	r1, [pc, #16]	; (8000cd8 <HAL_UART_RxCpltCallback+0x84>)
 8000cc6:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <HAL_UART_RxCpltCallback+0x94>)
 8000cc8:	f001 fee2 	bl	8002a90 <HAL_UART_Receive_IT>
	}

}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	200000e0 	.word	0x200000e0
 8000cdc:	20000102 	.word	0x20000102
 8000ce0:	200000e4 	.word	0x200000e4
 8000ce4:	08004d54 	.word	0x08004d54
 8000ce8:	20000128 	.word	0x20000128

08000cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf0:	b672      	cpsid	i
}
 8000cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <Error_Handler+0x8>
	...

08000cf8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_RTC_Init+0x44>)
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <MX_RTC_Init+0x48>)
 8000d00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_RTC_Init+0x44>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_RTC_Init+0x44>)
 8000d0a:	227f      	movs	r2, #127	; 0x7f
 8000d0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_RTC_Init+0x44>)
 8000d10:	22ff      	movs	r2, #255	; 0xff
 8000d12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_RTC_Init+0x44>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_RTC_Init+0x44>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_RTC_Init+0x44>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_RTC_Init+0x44>)
 8000d28:	f001 fc94 	bl	8002654 <HAL_RTC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000d32:	f7ff ffdb 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000104 	.word	0x20000104
 8000d40:	40002800 	.word	0x40002800

08000d44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2230      	movs	r2, #48	; 0x30
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 fe5d 	bl	8003a14 <memset>
  if(rtcHandle->Instance==RTC)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <HAL_RTC_MspInit+0x4c>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d111      	bne.n	8000d88 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d64:	2320      	movs	r3, #32
 8000d66:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 faae 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d7e:	f7ff ffb5 	bl	8000cec <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <HAL_RTC_MspInit+0x50>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3738      	adds	r7, #56	; 0x38
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40002800 	.word	0x40002800
 8000d94:	42470e3c 	.word	0x42470e3c

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 f9b8 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <USART3_IRQHandler+0x10>)
 8000e42:	f001 fe55 	bl	8002af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000128 	.word	0x20000128

08000e50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	e00a      	b.n	8000e78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e62:	f3af 8000 	nop.w
 8000e66:	4601      	mov	r1, r0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	60ba      	str	r2, [r7, #8]
 8000e6e:	b2ca      	uxtb	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf0      	blt.n	8000e62 <_read+0x12>
	}

return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e009      	b.n	8000eb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	60ba      	str	r2, [r7, #8]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc95 	bl	80007d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	3301      	adds	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dbf1      	blt.n	8000e9c <_write+0x12>
	}
	return len;
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_close>:

int _close(int file)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eea:	605a      	str	r2, [r3, #4]
	return 0;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <_isatty>:

int _isatty(int file)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	return 1;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f34:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <_sbrk+0x5c>)
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <_sbrk+0x60>)
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_sbrk+0x64>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d102      	bne.n	8000f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <_sbrk+0x64>)
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <_sbrk+0x68>)
 8000f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d207      	bcs.n	8000f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f5c:	f002 fd30 	bl	80039c0 <__errno>
 8000f60:	4603      	mov	r3, r0
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20030000 	.word	0x20030000
 8000f8c:	00000400 	.word	0x00000400
 8000f90:	20000124 	.word	0x20000124
 8000f94:	20000180 	.word	0x20000180

08000f98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <SystemInit+0x20>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <SystemInit+0x20>)
 8000fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fc2:	4a12      	ldr	r2, [pc, #72]	; (800100c <MX_USART3_UART_Init+0x50>)
 8000fc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_USART3_UART_Init+0x4c>)
 8000ff4:	f001 fc28 	bl	8002848 <HAL_UART_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ffe:	f7ff fe75 	bl	8000cec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000128 	.word	0x20000128
 800100c:	40004800 	.word	0x40004800

08001010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_UART_MspInit+0x94>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d134      	bne.n	800109c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_UART_MspInit+0x98>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <HAL_UART_MspInit+0x98>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_UART_MspInit+0x98>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0x98>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_UART_MspInit+0x98>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_UART_MspInit+0x98>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800106a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800107c:	2307      	movs	r3, #7
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4809      	ldr	r0, [pc, #36]	; (80010ac <HAL_UART_MspInit+0x9c>)
 8001088:	f000 fa76 	bl	8001578 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	2027      	movs	r0, #39	; 0x27
 8001092:	f000 f9a8 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001096:	2027      	movs	r0, #39	; 0x27
 8001098:	f000 f9c1 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800109c:	bf00      	nop
 800109e:	3728      	adds	r7, #40	; 0x28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40004800 	.word	0x40004800
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020c00 	.word	0x40020c00

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010b6:	490e      	ldr	r1, [pc, #56]	; (80010f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010cc:	4c0b      	ldr	r4, [pc, #44]	; (80010fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010da:	f7ff ff5d 	bl	8000f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f002 fc75 	bl	80039cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fd0d 	bl	8000b00 <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80010f4:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 80010f8:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80010fc:	20000180 	.word	0x20000180

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f94f 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fe2e 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f967 	bl	800143a <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f92f 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000054 	.word	0x20000054
 80011a0:	2000005c 	.word	0x2000005c
 80011a4:	20000058 	.word	0x20000058

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2000005c 	.word	0x2000005c
 80011cc:	2000016c 	.word	0x2000016c

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000016c 	.word	0x2000016c

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000005c 	.word	0x2000005c

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b084      	sub	sp, #16
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff feb6 	bl	80011d0 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d008      	beq.n	8001484 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e052      	b.n	800152a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0216 	bic.w	r2, r2, #22
 8001492:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d103      	bne.n	80014b4 <HAL_DMA_Abort+0x62>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0208 	bic.w	r2, r2, #8
 80014c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d4:	e013      	b.n	80014fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014d6:	f7ff fe7b 	bl	80011d0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d90c      	bls.n	80014fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2220      	movs	r2, #32
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2203      	movs	r2, #3
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e015      	b.n	800152a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1e4      	bne.n	80014d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001510:	223f      	movs	r2, #63	; 0x3f
 8001512:	409a      	lsls	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d004      	beq.n	8001550 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e00c      	b.n	800156a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2205      	movs	r2, #5
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e177      	b.n	8001884 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 8166 	bne.w	800187e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d005      	beq.n	80015ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d130      	bne.n	800162c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 0201 	and.w	r2, r3, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b03      	cmp	r3, #3
 8001636:	d017      	beq.n	8001668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d123      	bne.n	80016bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80c0 	beq.w	800187e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_GPIO_Init+0x324>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_GPIO_Init+0x324>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_GPIO_Init+0x324>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171a:	4a61      	ldr	r2, [pc, #388]	; (80018a0 <HAL_GPIO_Init+0x328>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_GPIO_Init+0x32c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d037      	beq.n	80017b6 <HAL_GPIO_Init+0x23e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <HAL_GPIO_Init+0x330>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d031      	beq.n	80017b2 <HAL_GPIO_Init+0x23a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a56      	ldr	r2, [pc, #344]	; (80018ac <HAL_GPIO_Init+0x334>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d02b      	beq.n	80017ae <HAL_GPIO_Init+0x236>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_GPIO_Init+0x338>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d025      	beq.n	80017aa <HAL_GPIO_Init+0x232>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a54      	ldr	r2, [pc, #336]	; (80018b4 <HAL_GPIO_Init+0x33c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01f      	beq.n	80017a6 <HAL_GPIO_Init+0x22e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <HAL_GPIO_Init+0x340>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d019      	beq.n	80017a2 <HAL_GPIO_Init+0x22a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x344>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x348>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00d      	beq.n	800179a <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x34c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d007      	beq.n	8001796 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x350>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_GPIO_Init+0x21a>
 800178e:	2309      	movs	r3, #9
 8001790:	e012      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001792:	230a      	movs	r3, #10
 8001794:	e010      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 8001796:	2308      	movs	r3, #8
 8001798:	e00e      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179a:	2307      	movs	r3, #7
 800179c:	e00c      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00a      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a2:	2305      	movs	r3, #5
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017a6:	2304      	movs	r3, #4
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x240>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c8:	4935      	ldr	r1, [pc, #212]	; (80018a0 <HAL_GPIO_Init+0x328>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_GPIO_Init+0x354>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a34      	ldr	r2, [pc, #208]	; (80018cc <HAL_GPIO_Init+0x354>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a29      	ldr	r2, [pc, #164]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_GPIO_Init+0x354>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <HAL_GPIO_Init+0x354>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_GPIO_Init+0x354>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f ae84 	bls.w	8001594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021c00 	.word	0x40021c00
 80018c4:	40022000 	.word	0x40022000
 80018c8:	40022400 	.word	0x40022400
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
 80018dc:	4613      	mov	r3, r2
 80018de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018e0:	787b      	ldrb	r3, [r7, #1]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e6:	887a      	ldrh	r2, [r7, #2]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ec:	e003      	b.n	80018f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ee:	887b      	ldrh	r3, [r7, #2]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_PWREx_EnableOverDrive+0x90>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <HAL_PWREx_EnableOverDrive+0x90>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_PWREx_EnableOverDrive+0x90>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_PWREx_EnableOverDrive+0x94>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001930:	f7ff fc4e 	bl	80011d0 <HAL_GetTick>
 8001934:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001936:	e009      	b.n	800194c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001938:	f7ff fc4a 	bl	80011d0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001946:	d901      	bls.n	800194c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e01f      	b.n	800198c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <HAL_PWREx_EnableOverDrive+0x98>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d1ee      	bne.n	8001938 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001960:	f7ff fc36 	bl	80011d0 <HAL_GetTick>
 8001964:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001966:	e009      	b.n	800197c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001968:	f7ff fc32 	bl	80011d0 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001976:	d901      	bls.n	800197c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e007      	b.n	800198c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_PWREx_EnableOverDrive+0x98>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001988:	d1ee      	bne.n	8001968 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	420e0040 	.word	0x420e0040
 800199c:	40007000 	.word	0x40007000
 80019a0:	420e0044 	.word	0x420e0044

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e267      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d075      	beq.n	8001aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c2:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d00c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ce:	4b85      	ldr	r3, [pc, #532]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d112      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019da:	4b82      	ldr	r3, [pc, #520]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e6:	d10b      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	4b7e      	ldr	r3, [pc, #504]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d05b      	beq.n	8001aac <HAL_RCC_OscConfig+0x108>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d157      	bne.n	8001aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e242      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x74>
 8001a0a:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a75      	ldr	r2, [pc, #468]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xb0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6f      	ldr	r2, [pc, #444]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6c      	ldr	r2, [pc, #432]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xb0>
 8001a3c:	4b69      	ldr	r3, [pc, #420]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a68      	ldr	r2, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fbb8 	bl	80011d0 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fbb4 	bl	80011d0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e207      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b5b      	ldr	r3, [pc, #364]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xc0>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fba4 	bl	80011d0 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fba0 	bl	80011d0 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1f3      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b51      	ldr	r3, [pc, #324]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0xe8>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aba:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad2:	4b44      	ldr	r3, [pc, #272]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b41      	ldr	r3, [pc, #260]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x152>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1c7      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4937      	ldr	r1, [pc, #220]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <HAL_RCC_OscConfig+0x244>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fb59 	bl	80011d0 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fb55 	bl	80011d0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1a8      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4925      	ldr	r1, [pc, #148]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <HAL_RCC_OscConfig+0x244>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb38 	bl	80011d0 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fb34 	bl	80011d0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e187      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d036      	beq.n	8001bfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_RCC_OscConfig+0x248>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fb18 	bl	80011d0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fb14 	bl	80011d0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e167      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_OscConfig+0x240>)
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x200>
 8001bc2:	e01b      	b.n	8001bfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_RCC_OscConfig+0x248>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fb01 	bl	80011d0 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	e00e      	b.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fafd 	bl	80011d0 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d907      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e150      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
 8001be4:	40023800 	.word	0x40023800
 8001be8:	42470000 	.word	0x42470000
 8001bec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ea      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 8097 	beq.w	8001d38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10f      	bne.n	8001c3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b7d      	ldr	r3, [pc, #500]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a7c      	ldr	r2, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b7a      	ldr	r3, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c36:	2301      	movs	r3, #1
 8001c38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b77      	ldr	r3, [pc, #476]	; (8001e18 <HAL_RCC_OscConfig+0x474>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d118      	bne.n	8001c78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c46:	4b74      	ldr	r3, [pc, #464]	; (8001e18 <HAL_RCC_OscConfig+0x474>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a73      	ldr	r2, [pc, #460]	; (8001e18 <HAL_RCC_OscConfig+0x474>)
 8001c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c52:	f7ff fabd 	bl	80011d0 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5a:	f7ff fab9 	bl	80011d0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e10c      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6c:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <HAL_RCC_OscConfig+0x474>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2ea>
 8001c80:	4b64      	ldr	r3, [pc, #400]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a63      	ldr	r2, [pc, #396]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x324>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b05      	cmp	r3, #5
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x30c>
 8001c96:	4b5f      	ldr	r3, [pc, #380]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	4a5e      	ldr	r2, [pc, #376]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca2:	4b5c      	ldr	r3, [pc, #368]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	4a5b      	ldr	r2, [pc, #364]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6713      	str	r3, [r2, #112]	; 0x70
 8001cae:	e00b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x324>
 8001cb0:	4b58      	ldr	r3, [pc, #352]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	4a57      	ldr	r2, [pc, #348]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbc:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a54      	ldr	r2, [pc, #336]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f023 0304 	bic.w	r3, r3, #4
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d015      	beq.n	8001cfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fa7e 	bl	80011d0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fa7a 	bl	80011d0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e0cb      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cee:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0ee      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fa68 	bl	80011d0 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d04:	f7ff fa64 	bl	80011d0 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e0b5      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ee      	bne.n	8001d04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a38      	ldr	r2, [pc, #224]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80a1 	beq.w	8001e84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b08      	cmp	r3, #8
 8001d4c:	d05c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d141      	bne.n	8001dda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d56:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_RCC_OscConfig+0x478>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fa38 	bl	80011d0 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d64:	f7ff fa34 	bl	80011d0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e087      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	491b      	ldr	r1, [pc, #108]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x478>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fa0d 	bl	80011d0 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fa09 	bl	80011d0 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e05c      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x416>
 8001dd8:	e054      	b.n	8001e84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_RCC_OscConfig+0x478>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff f9f6 	bl	80011d0 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f9f2 	bl	80011d0 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e045      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x470>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x444>
 8001e06:	e03d      	b.n	8001e84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e038      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
 8001e14:	40023800 	.word	0x40023800
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_RCC_OscConfig+0x4ec>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d028      	beq.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d121      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d11a      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d111      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0cc      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 030f 	and.w	r3, r3, #15
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d90c      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d044      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d119      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e067      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b37      	ldr	r3, [pc, #220]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4934      	ldr	r1, [pc, #208]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7ff f924 	bl	80011d0 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7ff f920 	bl	80011d0 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d20c      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490a      	ldr	r1, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff f884 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00
 8002050:	40023800 	.word	0x40023800
 8002054:	08004d58 	.word	0x08004d58
 8002058:	20000054 	.word	0x20000054
 800205c:	20000058 	.word	0x20000058

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002064:	b094      	sub	sp, #80	; 0x50
 8002066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	647b      	str	r3, [r7, #68]	; 0x44
 800206c:	2300      	movs	r3, #0
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002070:	2300      	movs	r3, #0
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002078:	4b79      	ldr	r3, [pc, #484]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d00d      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002084:	2b08      	cmp	r3, #8
 8002086:	f200 80e1 	bhi.w	800224c <HAL_RCC_GetSysClockFreq+0x1ec>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 800208e:	2b04      	cmp	r3, #4
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x3a>
 8002092:	e0db      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b73      	ldr	r3, [pc, #460]	; (8002264 <HAL_RCC_GetSysClockFreq+0x204>)
 8002096:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002098:	e0db      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_GetSysClockFreq+0x208>)
 800209c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800209e:	e0d8      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a0:	4b6f      	ldr	r3, [pc, #444]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020aa:	4b6d      	ldr	r3, [pc, #436]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d063      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	2200      	movs	r2, #0
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
 80020c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
 80020ca:	2300      	movs	r3, #0
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
 80020ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020d2:	4622      	mov	r2, r4
 80020d4:	462b      	mov	r3, r5
 80020d6:	f04f 0000 	mov.w	r0, #0
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	0159      	lsls	r1, r3, #5
 80020e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e4:	0150      	lsls	r0, r2, #5
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4621      	mov	r1, r4
 80020ec:	1a51      	subs	r1, r2, r1
 80020ee:	6139      	str	r1, [r7, #16]
 80020f0:	4629      	mov	r1, r5
 80020f2:	eb63 0301 	sbc.w	r3, r3, r1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002104:	4659      	mov	r1, fp
 8002106:	018b      	lsls	r3, r1, #6
 8002108:	4651      	mov	r1, sl
 800210a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800210e:	4651      	mov	r1, sl
 8002110:	018a      	lsls	r2, r1, #6
 8002112:	4651      	mov	r1, sl
 8002114:	ebb2 0801 	subs.w	r8, r2, r1
 8002118:	4659      	mov	r1, fp
 800211a:	eb63 0901 	sbc.w	r9, r3, r1
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800212a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800212e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002132:	4690      	mov	r8, r2
 8002134:	4699      	mov	r9, r3
 8002136:	4623      	mov	r3, r4
 8002138:	eb18 0303 	adds.w	r3, r8, r3
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	462b      	mov	r3, r5
 8002140:	eb49 0303 	adc.w	r3, r9, r3
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002152:	4629      	mov	r1, r5
 8002154:	024b      	lsls	r3, r1, #9
 8002156:	4621      	mov	r1, r4
 8002158:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800215c:	4621      	mov	r1, r4
 800215e:	024a      	lsls	r2, r1, #9
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002166:	2200      	movs	r2, #0
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 800216a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800216c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002170:	f7fe f89e 	bl	80002b0 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4613      	mov	r3, r2
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800217c:	e058      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	099b      	lsrs	r3, r3, #6
 8002184:	2200      	movs	r2, #0
 8002186:	4618      	mov	r0, r3
 8002188:	4611      	mov	r1, r2
 800218a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800218e:	623b      	str	r3, [r7, #32]
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
 8002194:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002198:	4642      	mov	r2, r8
 800219a:	464b      	mov	r3, r9
 800219c:	f04f 0000 	mov.w	r0, #0
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	0159      	lsls	r1, r3, #5
 80021a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021aa:	0150      	lsls	r0, r2, #5
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4641      	mov	r1, r8
 80021b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021b6:	4649      	mov	r1, r9
 80021b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021d0:	ebb2 040a 	subs.w	r4, r2, sl
 80021d4:	eb63 050b 	sbc.w	r5, r3, fp
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	00eb      	lsls	r3, r5, #3
 80021e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e6:	00e2      	lsls	r2, r4, #3
 80021e8:	4614      	mov	r4, r2
 80021ea:	461d      	mov	r5, r3
 80021ec:	4643      	mov	r3, r8
 80021ee:	18e3      	adds	r3, r4, r3
 80021f0:	603b      	str	r3, [r7, #0]
 80021f2:	464b      	mov	r3, r9
 80021f4:	eb45 0303 	adc.w	r3, r5, r3
 80021f8:	607b      	str	r3, [r7, #4]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002206:	4629      	mov	r1, r5
 8002208:	028b      	lsls	r3, r1, #10
 800220a:	4621      	mov	r1, r4
 800220c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002210:	4621      	mov	r1, r4
 8002212:	028a      	lsls	r2, r1, #10
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800221a:	2200      	movs	r2, #0
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	61fa      	str	r2, [r7, #28]
 8002220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002224:	f7fe f844 	bl	80002b0 <__aeabi_uldivmod>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4613      	mov	r3, r2
 800222e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002230:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <HAL_RCC_GetSysClockFreq+0x200>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	3301      	adds	r3, #1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002240:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800224a:	e002      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <HAL_RCC_GetSysClockFreq+0x204>)
 800224e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002254:	4618      	mov	r0, r3
 8002256:	3750      	adds	r7, #80	; 0x50
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	00f42400 	.word	0x00f42400
 8002268:	007a1200 	.word	0x007a1200

0800226c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_RCC_GetHCLKFreq+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000054 	.word	0x20000054

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002288:	f7ff fff0 	bl	800226c <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0a9b      	lsrs	r3, r3, #10
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08004d68 	.word	0x08004d68

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022b0:	f7ff ffdc 	bl	800226c <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0b5b      	lsrs	r3, r3, #13
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08004d68 	.word	0x08004d68

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	d075      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002308:	4b91      	ldr	r3, [pc, #580]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800230e:	f7fe ff5f 	bl	80011d0 <HAL_GetTick>
 8002312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002316:	f7fe ff5b 	bl	80011d0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e189      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002328:	4b8a      	ldr	r3, [pc, #552]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	019a      	lsls	r2, r3, #6
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	071b      	lsls	r3, r3, #28
 800234c:	4981      	ldr	r1, [pc, #516]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01f      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002360:	4b7c      	ldr	r3, [pc, #496]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002366:	0f1b      	lsrs	r3, r3, #28
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	019a      	lsls	r2, r3, #6
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	431a      	orrs	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	071b      	lsls	r3, r3, #28
 8002380:	4974      	ldr	r1, [pc, #464]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002388:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800238a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238e:	f023 021f 	bic.w	r2, r3, #31
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	3b01      	subs	r3, #1
 8002398:	496e      	ldr	r1, [pc, #440]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	019a      	lsls	r2, r3, #6
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	071b      	lsls	r3, r3, #28
 80023c0:	4964      	ldr	r1, [pc, #400]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023ce:	f7fe feff 	bl	80011d0 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023d6:	f7fe fefb 	bl	80011d0 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e129      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023e8:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d105      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002408:	2b00      	cmp	r3, #0
 800240a:	d079      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800240c:	4b52      	ldr	r3, [pc, #328]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002412:	f7fe fedd 	bl	80011d0 <HAL_GetTick>
 8002416:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002418:	e008      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800241a:	f7fe fed9 	bl	80011d0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e107      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800242c:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002438:	d0ef      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002446:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	0f1b      	lsrs	r3, r3, #28
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	019a      	lsls	r2, r3, #6
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	061b      	lsls	r3, r3, #24
 8002460:	431a      	orrs	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	493b      	ldr	r1, [pc, #236]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800246e:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002474:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	3b01      	subs	r3, #1
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	4934      	ldr	r1, [pc, #208]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01e      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249a:	0e1b      	lsrs	r3, r3, #24
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	019a      	lsls	r2, r3, #6
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	071b      	lsls	r3, r3, #28
 80024b4:	4927      	ldr	r1, [pc, #156]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024bc:	4b25      	ldr	r3, [pc, #148]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	4922      	ldr	r1, [pc, #136]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80024d4:	2201      	movs	r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fe7a 	bl	80011d0 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024e0:	f7fe fe76 	bl	80011d0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0a4      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024fe:	d1ef      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 808b 	beq.w	8002624 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002534:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002536:	f7fe fe4b 	bl	80011d0 <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800253c:	e010      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800253e:	f7fe fe47 	bl	80011d0 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d909      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e075      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002550:	42470068 	.word	0x42470068
 8002554:	40023800 	.word	0x40023800
 8002558:	42470070 	.word	0x42470070
 800255c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0e8      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800256c:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002574:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d02f      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	429a      	cmp	r2, r3
 8002588:	d028      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800259a:	4b2c      	ldr	r3, [pc, #176]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025a0:	4a29      	ldr	r2, [pc, #164]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d114      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fe0d 	bl	80011d0 <HAL_GetTick>
 80025b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fe09 	bl	80011d0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e035      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ee      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025e8:	d10d      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fe:	4912      	ldr	r1, [pc, #72]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]
 8002604:	e005      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800260c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002610:	6093      	str	r3, [r2, #8]
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002614:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	490a      	ldr	r1, [pc, #40]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002620:	4313      	orrs	r3, r2
 8002622:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8002638:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40007000 	.word	0x40007000
 8002648:	40023800 	.word	0x40023800
 800264c:	42470e40 	.word	0x42470e40
 8002650:	424711e0 	.word	0x424711e0

08002654 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e066      	b.n	8002738 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7f5b      	ldrb	r3, [r3, #29]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fb62 	bl	8000d44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	22ca      	movs	r2, #202	; 0xca
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2253      	movs	r2, #83	; 0x53
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f87a 	bl	8002790 <RTC_EnterInitMode>
 800269c:	4603      	mov	r3, r0
 800269e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d12c      	bne.n	8002700 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80026b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026b8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68d2      	ldr	r2, [r2, #12]
 80026e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6919      	ldr	r1, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f881 	bl	80027fe <RTC_ExitInitMode>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d113      	bne.n	800272e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	22ff      	movs	r2, #255	; 0xff
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800275a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800275c:	f7fe fd38 	bl	80011d0 <HAL_GetTick>
 8002760:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002762:	e009      	b.n	8002778 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002764:	f7fe fd34 	bl	80011d0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002772:	d901      	bls.n	8002778 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e007      	b.n	8002788 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ee      	beq.n	8002764 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d122      	bne.n	80027f4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027bc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027be:	f7fe fd07 	bl	80011d0 <HAL_GetTick>
 80027c2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027c4:	e00c      	b.n	80027e0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027c6:	f7fe fd03 	bl	80011d0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d4:	d904      	bls.n	80027e0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <RTC_EnterInitMode+0x64>
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d1e8      	bne.n	80027c6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002818:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10a      	bne.n	800283e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff ff89 	bl	8002740 <HAL_RTC_WaitForSynchro>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2204      	movs	r2, #4
 8002838:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e03f      	b.n	80028da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fbce 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fe23 	bl	80034d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b08a      	sub	sp, #40	; 0x28
 80028e6:	af02      	add	r7, sp, #8
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d17c      	bne.n	80029fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_Transmit+0x2c>
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e075      	b.n	80029fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_UART_Transmit+0x3e>
 800291c:	2302      	movs	r3, #2
 800291e:	e06e      	b.n	80029fe <HAL_UART_Transmit+0x11c>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2221      	movs	r2, #33	; 0x21
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002936:	f7fe fc4b 	bl	80011d0 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	88fa      	ldrh	r2, [r7, #6]
 8002940:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002950:	d108      	bne.n	8002964 <HAL_UART_Transmit+0x82>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d104      	bne.n	8002964 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e003      	b.n	800296c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002974:	e02a      	b.n	80029cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	2180      	movs	r1, #128	; 0x80
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fb63 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e036      	b.n	80029fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	3302      	adds	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e007      	b.n	80029be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	3301      	adds	r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1cf      	bne.n	8002976 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2200      	movs	r2, #0
 80029de:	2140      	movs	r1, #64	; 0x40
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fb33 	bl	800304c <UART_WaitOnFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e006      	b.n	80029fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3720      	adds	r7, #32
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	4613      	mov	r3, r2
 8002a12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d130      	bne.n	8002a82 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_UART_Transmit_IT+0x26>
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e029      	b.n	8002a84 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Transmit_IT+0x38>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e022      	b.n	8002a84 <HAL_UART_Transmit_IT+0x7e>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	88fa      	ldrh	r2, [r7, #6]
 8002a50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	88fa      	ldrh	r2, [r7, #6]
 8002a56:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2221      	movs	r2, #33	; 0x21
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b20      	cmp	r3, #32
 8002aa8:	d11d      	bne.n	8002ae6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_UART_Receive_IT+0x26>
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e016      	b.n	8002ae8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_UART_Receive_IT+0x38>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e00f      	b.n	8002ae8 <HAL_UART_Receive_IT+0x58>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fb23 	bl	8003128 <UART_Start_Receive_IT>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	e000      	b.n	8002ae8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b0ba      	sub	sp, #232	; 0xe8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10f      	bne.n	8002b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
 8002b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fc07 	bl	8003362 <UART_Receive_IT>
      return;
 8002b54:	e256      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80de 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
 8002b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80d1 	beq.w	8002d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
 8002b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
 8002baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00b      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
 8002bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d011      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
 8002bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d105      	bne.n	8002c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 81ed 	beq.w	8002ffa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
 8002c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fb92 	bl	8003362 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_UART_IRQHandler+0x17a>
 8002c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d04f      	beq.n	8002d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa9a 	bl	80031a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d141      	bne.n	8002d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cba:	e841 2300 	strex	r3, r2, [r1]
 8002cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1d9      	bne.n	8002c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d013      	beq.n	8002cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <HAL_UART_IRQHandler+0x3dc>)
 8002cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fc27 	bl	8001532 <HAL_DMA_Abort_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	e00e      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f990 	bl	8003020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d00:	e00a      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f98c 	bl	8003020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	e006      	b.n	8002d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f988 	bl	8003020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d16:	e170      	b.n	8002ffa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d18:	bf00      	nop
    return;
 8002d1a:	e16e      	b.n	8002ffa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	f040 814a 	bne.w	8002fba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 0310 	and.w	r3, r3, #16
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8143 	beq.w	8002fba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 813c 	beq.w	8002fba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d42:	2300      	movs	r3, #0
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	f040 80b4 	bne.w	8002ed0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8140 	beq.w	8002ffe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d86:	429a      	cmp	r2, r3
 8002d88:	f080 8139 	bcs.w	8002ffe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	f000 8088 	beq.w	8002eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1d9      	bne.n	8002da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	3314      	adds	r3, #20
 8002df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df8:	e853 3f00 	ldrex	r3, [r3]
 8002dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3314      	adds	r3, #20
 8002e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e1      	bne.n	8002dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3314      	adds	r3, #20
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e34:	e853 3f00 	ldrex	r3, [r3]
 8002e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3314      	adds	r3, #20
 8002e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e3      	bne.n	8002e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	330c      	adds	r3, #12
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e82:	f023 0310 	bic.w	r3, r3, #16
 8002e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	330c      	adds	r3, #12
 8002e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e3      	bne.n	8002e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fad0 	bl	8001452 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8b6 	bl	8003034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ec8:	e099      	b.n	8002ffe <HAL_UART_IRQHandler+0x50e>
 8002eca:	bf00      	nop
 8002ecc:	0800326b 	.word	0x0800326b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f000 808b 	beq.w	8003002 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8086 	beq.w	8003002 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	330c      	adds	r3, #12
 8002f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e3      	bne.n	8002ef6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3314      	adds	r3, #20
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3314      	adds	r3, #20
 8002f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f52:	633a      	str	r2, [r7, #48]	; 0x30
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e3      	bne.n	8002f2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0310 	bic.w	r3, r3, #16
 8002f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f98:	61fa      	str	r2, [r7, #28]
 8002f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9c:	69b9      	ldr	r1, [r7, #24]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	e841 2300 	strex	r3, r2, [r1]
 8002fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1e3      	bne.n	8002f74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f83e 	bl	8003034 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fb8:	e023      	b.n	8003002 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x4ea>
 8002fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f95d 	bl	8003292 <UART_Transmit_IT>
    return;
 8002fd8:	e014      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <HAL_UART_IRQHandler+0x514>
 8002fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f99d 	bl	8003332 <UART_EndTransmit_IT>
    return;
 8002ff8:	e004      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
    return;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
      return;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_UART_IRQHandler+0x514>
      return;
 8003002:	bf00      	nop
  }
}
 8003004:	37e8      	adds	r7, #232	; 0xe8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop

0800300c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b090      	sub	sp, #64	; 0x40
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	e050      	b.n	8003100 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003064:	d04c      	beq.n	8003100 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	d007      	beq.n	800307c <UART_WaitOnFlagUntilTimeout+0x30>
 800306c:	f7fe f8b0 	bl	80011d0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003078:	429a      	cmp	r2, r3
 800307a:	d241      	bcs.n	8003100 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	330c      	adds	r3, #12
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	330c      	adds	r3, #12
 800309a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800309c:	637a      	str	r2, [r7, #52]	; 0x34
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3314      	adds	r3, #20
 80030b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	613b      	str	r3, [r7, #16]
   return(result);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3314      	adds	r3, #20
 80030ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030d0:	623a      	str	r2, [r7, #32]
 80030d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	6a3a      	ldr	r2, [r7, #32]
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e5      	bne.n	80030b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e00f      	b.n	8003120 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4013      	ands	r3, r2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	429a      	cmp	r2, r3
 800311c:	d09f      	beq.n	800305e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3740      	adds	r7, #64	; 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2222      	movs	r2, #34	; 0x22
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003174:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0220 	orr.w	r2, r2, #32
 8003194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b095      	sub	sp, #84	; 0x54
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	330c      	adds	r3, #12
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031cc:	643a      	str	r2, [r7, #64]	; 0x40
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80031d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80031d4:	e841 2300 	strex	r3, r2, [r1]
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1e5      	bne.n	80031ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3314      	adds	r3, #20
 80031e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	e853 3f00 	ldrex	r3, [r3]
 80031ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3314      	adds	r3, #20
 80031fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003200:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003208:	e841 2300 	strex	r3, r2, [r1]
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e5      	bne.n	80031e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	2b01      	cmp	r3, #1
 800321a:	d119      	bne.n	8003250 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	330c      	adds	r3, #12
 8003222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	e853 3f00 	ldrex	r3, [r3]
 800322a:	60bb      	str	r3, [r7, #8]
   return(result);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800323c:	61ba      	str	r2, [r7, #24]
 800323e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003240:	6979      	ldr	r1, [r7, #20]
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	e841 2300 	strex	r3, r2, [r1]
 8003248:	613b      	str	r3, [r7, #16]
   return(result);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1e5      	bne.n	800321c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800325e:	bf00      	nop
 8003260:	3754      	adds	r7, #84	; 0x54
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f7ff fecb 	bl	8003020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800328a:	bf00      	nop
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003292:	b480      	push	{r7}
 8003294:	b085      	sub	sp, #20
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b21      	cmp	r3, #33	; 0x21
 80032a4:	d13e      	bne.n	8003324 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	d114      	bne.n	80032da <UART_Transmit_IT+0x48>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d110      	bne.n	80032da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	1c9a      	adds	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	621a      	str	r2, [r3, #32]
 80032d8:	e008      	b.n	80032ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	1c59      	adds	r1, r3, #1
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6211      	str	r1, [r2, #32]
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4619      	mov	r1, r3
 80032fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10f      	bne.n	8003320 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003348:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff fe5a 	bl	800300c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b08c      	sub	sp, #48	; 0x30
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b22      	cmp	r3, #34	; 0x22
 8003374:	f040 80ab 	bne.w	80034ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d117      	bne.n	80033b2 <UART_Receive_IT+0x50>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d113      	bne.n	80033b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	1c9a      	adds	r2, r3, #2
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
 80033b0:	e026      	b.n	8003400 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d007      	beq.n	80033d6 <UART_Receive_IT+0x74>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <UART_Receive_IT+0x82>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	e008      	b.n	80033f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4619      	mov	r1, r3
 800340e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003410:	2b00      	cmp	r3, #0
 8003412:	d15a      	bne.n	80034ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0220 	bic.w	r2, r2, #32
 8003422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0201 	bic.w	r2, r2, #1
 8003442:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	2b01      	cmp	r3, #1
 8003452:	d135      	bne.n	80034c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	613b      	str	r3, [r7, #16]
   return(result);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f023 0310 	bic.w	r3, r3, #16
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347a:	623a      	str	r2, [r7, #32]
 800347c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	69f9      	ldr	r1, [r7, #28]
 8003480:	6a3a      	ldr	r2, [r7, #32]
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	61bb      	str	r3, [r7, #24]
   return(result);
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e5      	bne.n	800345a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d10a      	bne.n	80034b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034b6:	4619      	mov	r1, r3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fdbb 	bl	8003034 <HAL_UARTEx_RxEventCallback>
 80034be:	e002      	b.n	80034c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fd fbc7 	bl	8000c54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e002      	b.n	80034d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	e000      	b.n	80034d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80034ce:	2302      	movs	r3, #2
  }
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3730      	adds	r7, #48	; 0x30
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034dc:	b0c0      	sub	sp, #256	; 0x100
 80034de:	af00      	add	r7, sp, #0
 80034e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f4:	68d9      	ldr	r1, [r3, #12]
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	ea40 0301 	orr.w	r3, r0, r1
 8003500:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	431a      	orrs	r2, r3
 8003510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	431a      	orrs	r2, r3
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003530:	f021 010c 	bic.w	r1, r1, #12
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800353e:	430b      	orrs	r3, r1
 8003540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003552:	6999      	ldr	r1, [r3, #24]
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	ea40 0301 	orr.w	r3, r0, r1
 800355e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4b8f      	ldr	r3, [pc, #572]	; (80037a4 <UART_SetConfig+0x2cc>)
 8003568:	429a      	cmp	r2, r3
 800356a:	d005      	beq.n	8003578 <UART_SetConfig+0xa0>
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <UART_SetConfig+0x2d0>)
 8003574:	429a      	cmp	r2, r3
 8003576:	d104      	bne.n	8003582 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003578:	f7fe fe98 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 800357c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003580:	e003      	b.n	800358a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003582:	f7fe fe7f 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 8003586:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003594:	f040 810c 	bne.w	80037b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800359c:	2200      	movs	r2, #0
 800359e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	1891      	adds	r1, r2, r2
 80035b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80035b2:	415b      	adcs	r3, r3
 80035b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035ba:	4621      	mov	r1, r4
 80035bc:	eb12 0801 	adds.w	r8, r2, r1
 80035c0:	4629      	mov	r1, r5
 80035c2:	eb43 0901 	adc.w	r9, r3, r1
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035da:	4690      	mov	r8, r2
 80035dc:	4699      	mov	r9, r3
 80035de:	4623      	mov	r3, r4
 80035e0:	eb18 0303 	adds.w	r3, r8, r3
 80035e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035e8:	462b      	mov	r3, r5
 80035ea:	eb49 0303 	adc.w	r3, r9, r3
 80035ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003602:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003606:	460b      	mov	r3, r1
 8003608:	18db      	adds	r3, r3, r3
 800360a:	653b      	str	r3, [r7, #80]	; 0x50
 800360c:	4613      	mov	r3, r2
 800360e:	eb42 0303 	adc.w	r3, r2, r3
 8003612:	657b      	str	r3, [r7, #84]	; 0x54
 8003614:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003618:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800361c:	f7fc fe48 	bl	80002b0 <__aeabi_uldivmod>
 8003620:	4602      	mov	r2, r0
 8003622:	460b      	mov	r3, r1
 8003624:	4b61      	ldr	r3, [pc, #388]	; (80037ac <UART_SetConfig+0x2d4>)
 8003626:	fba3 2302 	umull	r2, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	011c      	lsls	r4, r3, #4
 800362e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003632:	2200      	movs	r2, #0
 8003634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003638:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800363c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003640:	4642      	mov	r2, r8
 8003642:	464b      	mov	r3, r9
 8003644:	1891      	adds	r1, r2, r2
 8003646:	64b9      	str	r1, [r7, #72]	; 0x48
 8003648:	415b      	adcs	r3, r3
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003650:	4641      	mov	r1, r8
 8003652:	eb12 0a01 	adds.w	sl, r2, r1
 8003656:	4649      	mov	r1, r9
 8003658:	eb43 0b01 	adc.w	fp, r3, r1
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003668:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800366c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003670:	4692      	mov	sl, r2
 8003672:	469b      	mov	fp, r3
 8003674:	4643      	mov	r3, r8
 8003676:	eb1a 0303 	adds.w	r3, sl, r3
 800367a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800367e:	464b      	mov	r3, r9
 8003680:	eb4b 0303 	adc.w	r3, fp, r3
 8003684:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003694:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003698:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800369c:	460b      	mov	r3, r1
 800369e:	18db      	adds	r3, r3, r3
 80036a0:	643b      	str	r3, [r7, #64]	; 0x40
 80036a2:	4613      	mov	r3, r2
 80036a4:	eb42 0303 	adc.w	r3, r2, r3
 80036a8:	647b      	str	r3, [r7, #68]	; 0x44
 80036aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036b2:	f7fc fdfd 	bl	80002b0 <__aeabi_uldivmod>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <UART_SetConfig+0x2d4>)
 80036be:	fba3 2301 	umull	r2, r3, r3, r1
 80036c2:	095b      	lsrs	r3, r3, #5
 80036c4:	2264      	movs	r2, #100	; 0x64
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	1acb      	subs	r3, r1, r3
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <UART_SetConfig+0x2d4>)
 80036d4:	fba3 2302 	umull	r2, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036e0:	441c      	add	r4, r3
 80036e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80036fc:	415b      	adcs	r3, r3
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003700:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003704:	4641      	mov	r1, r8
 8003706:	1851      	adds	r1, r2, r1
 8003708:	6339      	str	r1, [r7, #48]	; 0x30
 800370a:	4649      	mov	r1, r9
 800370c:	414b      	adcs	r3, r1
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800371c:	4659      	mov	r1, fp
 800371e:	00cb      	lsls	r3, r1, #3
 8003720:	4651      	mov	r1, sl
 8003722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003726:	4651      	mov	r1, sl
 8003728:	00ca      	lsls	r2, r1, #3
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	4603      	mov	r3, r0
 8003730:	4642      	mov	r2, r8
 8003732:	189b      	adds	r3, r3, r2
 8003734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003738:	464b      	mov	r3, r9
 800373a:	460a      	mov	r2, r1
 800373c:	eb42 0303 	adc.w	r3, r2, r3
 8003740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003750:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003754:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003758:	460b      	mov	r3, r1
 800375a:	18db      	adds	r3, r3, r3
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
 800375e:	4613      	mov	r3, r2
 8003760:	eb42 0303 	adc.w	r3, r2, r3
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003766:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800376a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800376e:	f7fc fd9f 	bl	80002b0 <__aeabi_uldivmod>
 8003772:	4602      	mov	r2, r0
 8003774:	460b      	mov	r3, r1
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <UART_SetConfig+0x2d4>)
 8003778:	fba3 1302 	umull	r1, r3, r3, r2
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	2164      	movs	r1, #100	; 0x64
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	3332      	adds	r3, #50	; 0x32
 800378a:	4a08      	ldr	r2, [pc, #32]	; (80037ac <UART_SetConfig+0x2d4>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	095b      	lsrs	r3, r3, #5
 8003792:	f003 0207 	and.w	r2, r3, #7
 8003796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4422      	add	r2, r4
 800379e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037a0:	e105      	b.n	80039ae <UART_SetConfig+0x4d6>
 80037a2:	bf00      	nop
 80037a4:	40011000 	.word	0x40011000
 80037a8:	40011400 	.word	0x40011400
 80037ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037b4:	2200      	movs	r2, #0
 80037b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037c2:	4642      	mov	r2, r8
 80037c4:	464b      	mov	r3, r9
 80037c6:	1891      	adds	r1, r2, r2
 80037c8:	6239      	str	r1, [r7, #32]
 80037ca:	415b      	adcs	r3, r3
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
 80037ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037d2:	4641      	mov	r1, r8
 80037d4:	1854      	adds	r4, r2, r1
 80037d6:	4649      	mov	r1, r9
 80037d8:	eb43 0501 	adc.w	r5, r3, r1
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	00eb      	lsls	r3, r5, #3
 80037e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ea:	00e2      	lsls	r2, r4, #3
 80037ec:	4614      	mov	r4, r2
 80037ee:	461d      	mov	r5, r3
 80037f0:	4643      	mov	r3, r8
 80037f2:	18e3      	adds	r3, r4, r3
 80037f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037f8:	464b      	mov	r3, r9
 80037fa:	eb45 0303 	adc.w	r3, r5, r3
 80037fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800380e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800381e:	4629      	mov	r1, r5
 8003820:	008b      	lsls	r3, r1, #2
 8003822:	4621      	mov	r1, r4
 8003824:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003828:	4621      	mov	r1, r4
 800382a:	008a      	lsls	r2, r1, #2
 800382c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003830:	f7fc fd3e 	bl	80002b0 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4b60      	ldr	r3, [pc, #384]	; (80039bc <UART_SetConfig+0x4e4>)
 800383a:	fba3 2302 	umull	r2, r3, r3, r2
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	011c      	lsls	r4, r3, #4
 8003842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003846:	2200      	movs	r2, #0
 8003848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800384c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003850:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	1891      	adds	r1, r2, r2
 800385a:	61b9      	str	r1, [r7, #24]
 800385c:	415b      	adcs	r3, r3
 800385e:	61fb      	str	r3, [r7, #28]
 8003860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003864:	4641      	mov	r1, r8
 8003866:	1851      	adds	r1, r2, r1
 8003868:	6139      	str	r1, [r7, #16]
 800386a:	4649      	mov	r1, r9
 800386c:	414b      	adcs	r3, r1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800387c:	4659      	mov	r1, fp
 800387e:	00cb      	lsls	r3, r1, #3
 8003880:	4651      	mov	r1, sl
 8003882:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003886:	4651      	mov	r1, sl
 8003888:	00ca      	lsls	r2, r1, #3
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	4603      	mov	r3, r0
 8003890:	4642      	mov	r2, r8
 8003892:	189b      	adds	r3, r3, r2
 8003894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003898:	464b      	mov	r3, r9
 800389a:	460a      	mov	r2, r1
 800389c:	eb42 0303 	adc.w	r3, r2, r3
 80038a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80038ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038bc:	4649      	mov	r1, r9
 80038be:	008b      	lsls	r3, r1, #2
 80038c0:	4641      	mov	r1, r8
 80038c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c6:	4641      	mov	r1, r8
 80038c8:	008a      	lsls	r2, r1, #2
 80038ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038ce:	f7fc fcef 	bl	80002b0 <__aeabi_uldivmod>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4b39      	ldr	r3, [pc, #228]	; (80039bc <UART_SetConfig+0x4e4>)
 80038d8:	fba3 1302 	umull	r1, r3, r3, r2
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	2164      	movs	r1, #100	; 0x64
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	3332      	adds	r3, #50	; 0x32
 80038ea:	4a34      	ldr	r2, [pc, #208]	; (80039bc <UART_SetConfig+0x4e4>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f6:	441c      	add	r4, r3
 80038f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fc:	2200      	movs	r2, #0
 80038fe:	673b      	str	r3, [r7, #112]	; 0x70
 8003900:	677a      	str	r2, [r7, #116]	; 0x74
 8003902:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003906:	4642      	mov	r2, r8
 8003908:	464b      	mov	r3, r9
 800390a:	1891      	adds	r1, r2, r2
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	415b      	adcs	r3, r3
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003916:	4641      	mov	r1, r8
 8003918:	1851      	adds	r1, r2, r1
 800391a:	6039      	str	r1, [r7, #0]
 800391c:	4649      	mov	r1, r9
 800391e:	414b      	adcs	r3, r1
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800392e:	4659      	mov	r1, fp
 8003930:	00cb      	lsls	r3, r1, #3
 8003932:	4651      	mov	r1, sl
 8003934:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003938:	4651      	mov	r1, sl
 800393a:	00ca      	lsls	r2, r1, #3
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	4603      	mov	r3, r0
 8003942:	4642      	mov	r2, r8
 8003944:	189b      	adds	r3, r3, r2
 8003946:	66bb      	str	r3, [r7, #104]	; 0x68
 8003948:	464b      	mov	r3, r9
 800394a:	460a      	mov	r2, r1
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	663b      	str	r3, [r7, #96]	; 0x60
 800395c:	667a      	str	r2, [r7, #100]	; 0x64
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800396a:	4649      	mov	r1, r9
 800396c:	008b      	lsls	r3, r1, #2
 800396e:	4641      	mov	r1, r8
 8003970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003974:	4641      	mov	r1, r8
 8003976:	008a      	lsls	r2, r1, #2
 8003978:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800397c:	f7fc fc98 	bl	80002b0 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <UART_SetConfig+0x4e4>)
 8003986:	fba3 1302 	umull	r1, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2164      	movs	r1, #100	; 0x64
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	3332      	adds	r3, #50	; 0x32
 8003998:	4a08      	ldr	r2, [pc, #32]	; (80039bc <UART_SetConfig+0x4e4>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4422      	add	r2, r4
 80039ac:	609a      	str	r2, [r3, #8]
}
 80039ae:	bf00      	nop
 80039b0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ba:	bf00      	nop
 80039bc:	51eb851f 	.word	0x51eb851f

080039c0 <__errno>:
 80039c0:	4b01      	ldr	r3, [pc, #4]	; (80039c8 <__errno+0x8>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000060 	.word	0x20000060

080039cc <__libc_init_array>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	4d0d      	ldr	r5, [pc, #52]	; (8003a04 <__libc_init_array+0x38>)
 80039d0:	4c0d      	ldr	r4, [pc, #52]	; (8003a08 <__libc_init_array+0x3c>)
 80039d2:	1b64      	subs	r4, r4, r5
 80039d4:	10a4      	asrs	r4, r4, #2
 80039d6:	2600      	movs	r6, #0
 80039d8:	42a6      	cmp	r6, r4
 80039da:	d109      	bne.n	80039f0 <__libc_init_array+0x24>
 80039dc:	4d0b      	ldr	r5, [pc, #44]	; (8003a0c <__libc_init_array+0x40>)
 80039de:	4c0c      	ldr	r4, [pc, #48]	; (8003a10 <__libc_init_array+0x44>)
 80039e0:	f001 f88e 	bl	8004b00 <_init>
 80039e4:	1b64      	subs	r4, r4, r5
 80039e6:	10a4      	asrs	r4, r4, #2
 80039e8:	2600      	movs	r6, #0
 80039ea:	42a6      	cmp	r6, r4
 80039ec:	d105      	bne.n	80039fa <__libc_init_array+0x2e>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f4:	4798      	blx	r3
 80039f6:	3601      	adds	r6, #1
 80039f8:	e7ee      	b.n	80039d8 <__libc_init_array+0xc>
 80039fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fe:	4798      	blx	r3
 8003a00:	3601      	adds	r6, #1
 8003a02:	e7f2      	b.n	80039ea <__libc_init_array+0x1e>
 8003a04:	08004e10 	.word	0x08004e10
 8003a08:	08004e10 	.word	0x08004e10
 8003a0c:	08004e10 	.word	0x08004e10
 8003a10:	08004e14 	.word	0x08004e14

08003a14 <memset>:
 8003a14:	4402      	add	r2, r0
 8003a16:	4603      	mov	r3, r0
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <memset+0xa>
 8003a1c:	4770      	bx	lr
 8003a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a22:	e7f9      	b.n	8003a18 <memset+0x4>

08003a24 <_puts_r>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	460e      	mov	r6, r1
 8003a28:	4605      	mov	r5, r0
 8003a2a:	b118      	cbz	r0, 8003a34 <_puts_r+0x10>
 8003a2c:	6983      	ldr	r3, [r0, #24]
 8003a2e:	b90b      	cbnz	r3, 8003a34 <_puts_r+0x10>
 8003a30:	f000 fa68 	bl	8003f04 <__sinit>
 8003a34:	69ab      	ldr	r3, [r5, #24]
 8003a36:	68ac      	ldr	r4, [r5, #8]
 8003a38:	b913      	cbnz	r3, 8003a40 <_puts_r+0x1c>
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f000 fa62 	bl	8003f04 <__sinit>
 8003a40:	4b2c      	ldr	r3, [pc, #176]	; (8003af4 <_puts_r+0xd0>)
 8003a42:	429c      	cmp	r4, r3
 8003a44:	d120      	bne.n	8003a88 <_puts_r+0x64>
 8003a46:	686c      	ldr	r4, [r5, #4]
 8003a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a4a:	07db      	lsls	r3, r3, #31
 8003a4c:	d405      	bmi.n	8003a5a <_puts_r+0x36>
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	0598      	lsls	r0, r3, #22
 8003a52:	d402      	bmi.n	8003a5a <_puts_r+0x36>
 8003a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a56:	f000 faf3 	bl	8004040 <__retarget_lock_acquire_recursive>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	0719      	lsls	r1, r3, #28
 8003a5e:	d51d      	bpl.n	8003a9c <_puts_r+0x78>
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	b1db      	cbz	r3, 8003a9c <_puts_r+0x78>
 8003a64:	3e01      	subs	r6, #1
 8003a66:	68a3      	ldr	r3, [r4, #8]
 8003a68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60a3      	str	r3, [r4, #8]
 8003a70:	bb39      	cbnz	r1, 8003ac2 <_puts_r+0x9e>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da38      	bge.n	8003ae8 <_puts_r+0xc4>
 8003a76:	4622      	mov	r2, r4
 8003a78:	210a      	movs	r1, #10
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	f000 f868 	bl	8003b50 <__swbuf_r>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d011      	beq.n	8003aa8 <_puts_r+0x84>
 8003a84:	250a      	movs	r5, #10
 8003a86:	e011      	b.n	8003aac <_puts_r+0x88>
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <_puts_r+0xd4>)
 8003a8a:	429c      	cmp	r4, r3
 8003a8c:	d101      	bne.n	8003a92 <_puts_r+0x6e>
 8003a8e:	68ac      	ldr	r4, [r5, #8]
 8003a90:	e7da      	b.n	8003a48 <_puts_r+0x24>
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <_puts_r+0xd8>)
 8003a94:	429c      	cmp	r4, r3
 8003a96:	bf08      	it	eq
 8003a98:	68ec      	ldreq	r4, [r5, #12]
 8003a9a:	e7d5      	b.n	8003a48 <_puts_r+0x24>
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f8a8 	bl	8003bf4 <__swsetup_r>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d0dd      	beq.n	8003a64 <_puts_r+0x40>
 8003aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8003aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003aae:	07da      	lsls	r2, r3, #31
 8003ab0:	d405      	bmi.n	8003abe <_puts_r+0x9a>
 8003ab2:	89a3      	ldrh	r3, [r4, #12]
 8003ab4:	059b      	lsls	r3, r3, #22
 8003ab6:	d402      	bmi.n	8003abe <_puts_r+0x9a>
 8003ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aba:	f000 fac2 	bl	8004042 <__retarget_lock_release_recursive>
 8003abe:	4628      	mov	r0, r5
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da04      	bge.n	8003ad0 <_puts_r+0xac>
 8003ac6:	69a2      	ldr	r2, [r4, #24]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	dc06      	bgt.n	8003ada <_puts_r+0xb6>
 8003acc:	290a      	cmp	r1, #10
 8003ace:	d004      	beq.n	8003ada <_puts_r+0xb6>
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	1c5a      	adds	r2, r3, #1
 8003ad4:	6022      	str	r2, [r4, #0]
 8003ad6:	7019      	strb	r1, [r3, #0]
 8003ad8:	e7c5      	b.n	8003a66 <_puts_r+0x42>
 8003ada:	4622      	mov	r2, r4
 8003adc:	4628      	mov	r0, r5
 8003ade:	f000 f837 	bl	8003b50 <__swbuf_r>
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d1bf      	bne.n	8003a66 <_puts_r+0x42>
 8003ae6:	e7df      	b.n	8003aa8 <_puts_r+0x84>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	250a      	movs	r5, #10
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	6022      	str	r2, [r4, #0]
 8003af0:	701d      	strb	r5, [r3, #0]
 8003af2:	e7db      	b.n	8003aac <_puts_r+0x88>
 8003af4:	08004d94 	.word	0x08004d94
 8003af8:	08004db4 	.word	0x08004db4
 8003afc:	08004d74 	.word	0x08004d74

08003b00 <puts>:
 8003b00:	4b02      	ldr	r3, [pc, #8]	; (8003b0c <puts+0xc>)
 8003b02:	4601      	mov	r1, r0
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f7ff bf8d 	b.w	8003a24 <_puts_r>
 8003b0a:	bf00      	nop
 8003b0c:	20000060 	.word	0x20000060

08003b10 <siprintf>:
 8003b10:	b40e      	push	{r1, r2, r3}
 8003b12:	b500      	push	{lr}
 8003b14:	b09c      	sub	sp, #112	; 0x70
 8003b16:	ab1d      	add	r3, sp, #116	; 0x74
 8003b18:	9002      	str	r0, [sp, #8]
 8003b1a:	9006      	str	r0, [sp, #24]
 8003b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b20:	4809      	ldr	r0, [pc, #36]	; (8003b48 <siprintf+0x38>)
 8003b22:	9107      	str	r1, [sp, #28]
 8003b24:	9104      	str	r1, [sp, #16]
 8003b26:	4909      	ldr	r1, [pc, #36]	; (8003b4c <siprintf+0x3c>)
 8003b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b2c:	9105      	str	r1, [sp, #20]
 8003b2e:	6800      	ldr	r0, [r0, #0]
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	a902      	add	r1, sp, #8
 8003b34:	f000 fc28 	bl	8004388 <_svfiprintf_r>
 8003b38:	9b02      	ldr	r3, [sp, #8]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	b01c      	add	sp, #112	; 0x70
 8003b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b44:	b003      	add	sp, #12
 8003b46:	4770      	bx	lr
 8003b48:	20000060 	.word	0x20000060
 8003b4c:	ffff0208 	.word	0xffff0208

08003b50 <__swbuf_r>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	460e      	mov	r6, r1
 8003b54:	4614      	mov	r4, r2
 8003b56:	4605      	mov	r5, r0
 8003b58:	b118      	cbz	r0, 8003b62 <__swbuf_r+0x12>
 8003b5a:	6983      	ldr	r3, [r0, #24]
 8003b5c:	b90b      	cbnz	r3, 8003b62 <__swbuf_r+0x12>
 8003b5e:	f000 f9d1 	bl	8003f04 <__sinit>
 8003b62:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <__swbuf_r+0x98>)
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d12b      	bne.n	8003bc0 <__swbuf_r+0x70>
 8003b68:	686c      	ldr	r4, [r5, #4]
 8003b6a:	69a3      	ldr	r3, [r4, #24]
 8003b6c:	60a3      	str	r3, [r4, #8]
 8003b6e:	89a3      	ldrh	r3, [r4, #12]
 8003b70:	071a      	lsls	r2, r3, #28
 8003b72:	d52f      	bpl.n	8003bd4 <__swbuf_r+0x84>
 8003b74:	6923      	ldr	r3, [r4, #16]
 8003b76:	b36b      	cbz	r3, 8003bd4 <__swbuf_r+0x84>
 8003b78:	6923      	ldr	r3, [r4, #16]
 8003b7a:	6820      	ldr	r0, [r4, #0]
 8003b7c:	1ac0      	subs	r0, r0, r3
 8003b7e:	6963      	ldr	r3, [r4, #20]
 8003b80:	b2f6      	uxtb	r6, r6
 8003b82:	4283      	cmp	r3, r0
 8003b84:	4637      	mov	r7, r6
 8003b86:	dc04      	bgt.n	8003b92 <__swbuf_r+0x42>
 8003b88:	4621      	mov	r1, r4
 8003b8a:	4628      	mov	r0, r5
 8003b8c:	f000 f926 	bl	8003ddc <_fflush_r>
 8003b90:	bb30      	cbnz	r0, 8003be0 <__swbuf_r+0x90>
 8003b92:	68a3      	ldr	r3, [r4, #8]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	60a3      	str	r3, [r4, #8]
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	6022      	str	r2, [r4, #0]
 8003b9e:	701e      	strb	r6, [r3, #0]
 8003ba0:	6963      	ldr	r3, [r4, #20]
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	4283      	cmp	r3, r0
 8003ba6:	d004      	beq.n	8003bb2 <__swbuf_r+0x62>
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	07db      	lsls	r3, r3, #31
 8003bac:	d506      	bpl.n	8003bbc <__swbuf_r+0x6c>
 8003bae:	2e0a      	cmp	r6, #10
 8003bb0:	d104      	bne.n	8003bbc <__swbuf_r+0x6c>
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f000 f911 	bl	8003ddc <_fflush_r>
 8003bba:	b988      	cbnz	r0, 8003be0 <__swbuf_r+0x90>
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <__swbuf_r+0x9c>)
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	d101      	bne.n	8003bca <__swbuf_r+0x7a>
 8003bc6:	68ac      	ldr	r4, [r5, #8]
 8003bc8:	e7cf      	b.n	8003b6a <__swbuf_r+0x1a>
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <__swbuf_r+0xa0>)
 8003bcc:	429c      	cmp	r4, r3
 8003bce:	bf08      	it	eq
 8003bd0:	68ec      	ldreq	r4, [r5, #12]
 8003bd2:	e7ca      	b.n	8003b6a <__swbuf_r+0x1a>
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f000 f80c 	bl	8003bf4 <__swsetup_r>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d0cb      	beq.n	8003b78 <__swbuf_r+0x28>
 8003be0:	f04f 37ff 	mov.w	r7, #4294967295
 8003be4:	e7ea      	b.n	8003bbc <__swbuf_r+0x6c>
 8003be6:	bf00      	nop
 8003be8:	08004d94 	.word	0x08004d94
 8003bec:	08004db4 	.word	0x08004db4
 8003bf0:	08004d74 	.word	0x08004d74

08003bf4 <__swsetup_r>:
 8003bf4:	4b32      	ldr	r3, [pc, #200]	; (8003cc0 <__swsetup_r+0xcc>)
 8003bf6:	b570      	push	{r4, r5, r6, lr}
 8003bf8:	681d      	ldr	r5, [r3, #0]
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	b125      	cbz	r5, 8003c0a <__swsetup_r+0x16>
 8003c00:	69ab      	ldr	r3, [r5, #24]
 8003c02:	b913      	cbnz	r3, 8003c0a <__swsetup_r+0x16>
 8003c04:	4628      	mov	r0, r5
 8003c06:	f000 f97d 	bl	8003f04 <__sinit>
 8003c0a:	4b2e      	ldr	r3, [pc, #184]	; (8003cc4 <__swsetup_r+0xd0>)
 8003c0c:	429c      	cmp	r4, r3
 8003c0e:	d10f      	bne.n	8003c30 <__swsetup_r+0x3c>
 8003c10:	686c      	ldr	r4, [r5, #4]
 8003c12:	89a3      	ldrh	r3, [r4, #12]
 8003c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c18:	0719      	lsls	r1, r3, #28
 8003c1a:	d42c      	bmi.n	8003c76 <__swsetup_r+0x82>
 8003c1c:	06dd      	lsls	r5, r3, #27
 8003c1e:	d411      	bmi.n	8003c44 <__swsetup_r+0x50>
 8003c20:	2309      	movs	r3, #9
 8003c22:	6033      	str	r3, [r6, #0]
 8003c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003c28:	81a3      	strh	r3, [r4, #12]
 8003c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2e:	e03e      	b.n	8003cae <__swsetup_r+0xba>
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <__swsetup_r+0xd4>)
 8003c32:	429c      	cmp	r4, r3
 8003c34:	d101      	bne.n	8003c3a <__swsetup_r+0x46>
 8003c36:	68ac      	ldr	r4, [r5, #8]
 8003c38:	e7eb      	b.n	8003c12 <__swsetup_r+0x1e>
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <__swsetup_r+0xd8>)
 8003c3c:	429c      	cmp	r4, r3
 8003c3e:	bf08      	it	eq
 8003c40:	68ec      	ldreq	r4, [r5, #12]
 8003c42:	e7e6      	b.n	8003c12 <__swsetup_r+0x1e>
 8003c44:	0758      	lsls	r0, r3, #29
 8003c46:	d512      	bpl.n	8003c6e <__swsetup_r+0x7a>
 8003c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c4a:	b141      	cbz	r1, 8003c5e <__swsetup_r+0x6a>
 8003c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c50:	4299      	cmp	r1, r3
 8003c52:	d002      	beq.n	8003c5a <__swsetup_r+0x66>
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 fa5b 	bl	8004110 <_free_r>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003c64:	81a3      	strh	r3, [r4, #12]
 8003c66:	2300      	movs	r3, #0
 8003c68:	6063      	str	r3, [r4, #4]
 8003c6a:	6923      	ldr	r3, [r4, #16]
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	89a3      	ldrh	r3, [r4, #12]
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	6923      	ldr	r3, [r4, #16]
 8003c78:	b94b      	cbnz	r3, 8003c8e <__swsetup_r+0x9a>
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c84:	d003      	beq.n	8003c8e <__swsetup_r+0x9a>
 8003c86:	4621      	mov	r1, r4
 8003c88:	4630      	mov	r0, r6
 8003c8a:	f000 fa01 	bl	8004090 <__smakebuf_r>
 8003c8e:	89a0      	ldrh	r0, [r4, #12]
 8003c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003c94:	f010 0301 	ands.w	r3, r0, #1
 8003c98:	d00a      	beq.n	8003cb0 <__swsetup_r+0xbc>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60a3      	str	r3, [r4, #8]
 8003c9e:	6963      	ldr	r3, [r4, #20]
 8003ca0:	425b      	negs	r3, r3
 8003ca2:	61a3      	str	r3, [r4, #24]
 8003ca4:	6923      	ldr	r3, [r4, #16]
 8003ca6:	b943      	cbnz	r3, 8003cba <__swsetup_r+0xc6>
 8003ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003cac:	d1ba      	bne.n	8003c24 <__swsetup_r+0x30>
 8003cae:	bd70      	pop	{r4, r5, r6, pc}
 8003cb0:	0781      	lsls	r1, r0, #30
 8003cb2:	bf58      	it	pl
 8003cb4:	6963      	ldrpl	r3, [r4, #20]
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	e7f4      	b.n	8003ca4 <__swsetup_r+0xb0>
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e7f7      	b.n	8003cae <__swsetup_r+0xba>
 8003cbe:	bf00      	nop
 8003cc0:	20000060 	.word	0x20000060
 8003cc4:	08004d94 	.word	0x08004d94
 8003cc8:	08004db4 	.word	0x08004db4
 8003ccc:	08004d74 	.word	0x08004d74

08003cd0 <__sflush_r>:
 8003cd0:	898a      	ldrh	r2, [r1, #12]
 8003cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd6:	4605      	mov	r5, r0
 8003cd8:	0710      	lsls	r0, r2, #28
 8003cda:	460c      	mov	r4, r1
 8003cdc:	d458      	bmi.n	8003d90 <__sflush_r+0xc0>
 8003cde:	684b      	ldr	r3, [r1, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	dc05      	bgt.n	8003cf0 <__sflush_r+0x20>
 8003ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	dc02      	bgt.n	8003cf0 <__sflush_r+0x20>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003cf2:	2e00      	cmp	r6, #0
 8003cf4:	d0f9      	beq.n	8003cea <__sflush_r+0x1a>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003cfc:	682f      	ldr	r7, [r5, #0]
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	d032      	beq.n	8003d68 <__sflush_r+0x98>
 8003d02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d04:	89a3      	ldrh	r3, [r4, #12]
 8003d06:	075a      	lsls	r2, r3, #29
 8003d08:	d505      	bpl.n	8003d16 <__sflush_r+0x46>
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	1ac0      	subs	r0, r0, r3
 8003d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d10:	b10b      	cbz	r3, 8003d16 <__sflush_r+0x46>
 8003d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d14:	1ac0      	subs	r0, r0, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	4602      	mov	r2, r0
 8003d1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d1c:	6a21      	ldr	r1, [r4, #32]
 8003d1e:	4628      	mov	r0, r5
 8003d20:	47b0      	blx	r6
 8003d22:	1c43      	adds	r3, r0, #1
 8003d24:	89a3      	ldrh	r3, [r4, #12]
 8003d26:	d106      	bne.n	8003d36 <__sflush_r+0x66>
 8003d28:	6829      	ldr	r1, [r5, #0]
 8003d2a:	291d      	cmp	r1, #29
 8003d2c:	d82c      	bhi.n	8003d88 <__sflush_r+0xb8>
 8003d2e:	4a2a      	ldr	r2, [pc, #168]	; (8003dd8 <__sflush_r+0x108>)
 8003d30:	40ca      	lsrs	r2, r1
 8003d32:	07d6      	lsls	r6, r2, #31
 8003d34:	d528      	bpl.n	8003d88 <__sflush_r+0xb8>
 8003d36:	2200      	movs	r2, #0
 8003d38:	6062      	str	r2, [r4, #4]
 8003d3a:	04d9      	lsls	r1, r3, #19
 8003d3c:	6922      	ldr	r2, [r4, #16]
 8003d3e:	6022      	str	r2, [r4, #0]
 8003d40:	d504      	bpl.n	8003d4c <__sflush_r+0x7c>
 8003d42:	1c42      	adds	r2, r0, #1
 8003d44:	d101      	bne.n	8003d4a <__sflush_r+0x7a>
 8003d46:	682b      	ldr	r3, [r5, #0]
 8003d48:	b903      	cbnz	r3, 8003d4c <__sflush_r+0x7c>
 8003d4a:	6560      	str	r0, [r4, #84]	; 0x54
 8003d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d4e:	602f      	str	r7, [r5, #0]
 8003d50:	2900      	cmp	r1, #0
 8003d52:	d0ca      	beq.n	8003cea <__sflush_r+0x1a>
 8003d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d002      	beq.n	8003d62 <__sflush_r+0x92>
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 f9d7 	bl	8004110 <_free_r>
 8003d62:	2000      	movs	r0, #0
 8003d64:	6360      	str	r0, [r4, #52]	; 0x34
 8003d66:	e7c1      	b.n	8003cec <__sflush_r+0x1c>
 8003d68:	6a21      	ldr	r1, [r4, #32]
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	47b0      	blx	r6
 8003d70:	1c41      	adds	r1, r0, #1
 8003d72:	d1c7      	bne.n	8003d04 <__sflush_r+0x34>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0c4      	beq.n	8003d04 <__sflush_r+0x34>
 8003d7a:	2b1d      	cmp	r3, #29
 8003d7c:	d001      	beq.n	8003d82 <__sflush_r+0xb2>
 8003d7e:	2b16      	cmp	r3, #22
 8003d80:	d101      	bne.n	8003d86 <__sflush_r+0xb6>
 8003d82:	602f      	str	r7, [r5, #0]
 8003d84:	e7b1      	b.n	8003cea <__sflush_r+0x1a>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	e7ad      	b.n	8003cec <__sflush_r+0x1c>
 8003d90:	690f      	ldr	r7, [r1, #16]
 8003d92:	2f00      	cmp	r7, #0
 8003d94:	d0a9      	beq.n	8003cea <__sflush_r+0x1a>
 8003d96:	0793      	lsls	r3, r2, #30
 8003d98:	680e      	ldr	r6, [r1, #0]
 8003d9a:	bf08      	it	eq
 8003d9c:	694b      	ldreq	r3, [r1, #20]
 8003d9e:	600f      	str	r7, [r1, #0]
 8003da0:	bf18      	it	ne
 8003da2:	2300      	movne	r3, #0
 8003da4:	eba6 0807 	sub.w	r8, r6, r7
 8003da8:	608b      	str	r3, [r1, #8]
 8003daa:	f1b8 0f00 	cmp.w	r8, #0
 8003dae:	dd9c      	ble.n	8003cea <__sflush_r+0x1a>
 8003db0:	6a21      	ldr	r1, [r4, #32]
 8003db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003db4:	4643      	mov	r3, r8
 8003db6:	463a      	mov	r2, r7
 8003db8:	4628      	mov	r0, r5
 8003dba:	47b0      	blx	r6
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	dc06      	bgt.n	8003dce <__sflush_r+0xfe>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dcc:	e78e      	b.n	8003cec <__sflush_r+0x1c>
 8003dce:	4407      	add	r7, r0
 8003dd0:	eba8 0800 	sub.w	r8, r8, r0
 8003dd4:	e7e9      	b.n	8003daa <__sflush_r+0xda>
 8003dd6:	bf00      	nop
 8003dd8:	20400001 	.word	0x20400001

08003ddc <_fflush_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	690b      	ldr	r3, [r1, #16]
 8003de0:	4605      	mov	r5, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	b913      	cbnz	r3, 8003dec <_fflush_r+0x10>
 8003de6:	2500      	movs	r5, #0
 8003de8:	4628      	mov	r0, r5
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	b118      	cbz	r0, 8003df6 <_fflush_r+0x1a>
 8003dee:	6983      	ldr	r3, [r0, #24]
 8003df0:	b90b      	cbnz	r3, 8003df6 <_fflush_r+0x1a>
 8003df2:	f000 f887 	bl	8003f04 <__sinit>
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <_fflush_r+0x6c>)
 8003df8:	429c      	cmp	r4, r3
 8003dfa:	d11b      	bne.n	8003e34 <_fflush_r+0x58>
 8003dfc:	686c      	ldr	r4, [r5, #4]
 8003dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0ef      	beq.n	8003de6 <_fflush_r+0xa>
 8003e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e08:	07d0      	lsls	r0, r2, #31
 8003e0a:	d404      	bmi.n	8003e16 <_fflush_r+0x3a>
 8003e0c:	0599      	lsls	r1, r3, #22
 8003e0e:	d402      	bmi.n	8003e16 <_fflush_r+0x3a>
 8003e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e12:	f000 f915 	bl	8004040 <__retarget_lock_acquire_recursive>
 8003e16:	4628      	mov	r0, r5
 8003e18:	4621      	mov	r1, r4
 8003e1a:	f7ff ff59 	bl	8003cd0 <__sflush_r>
 8003e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e20:	07da      	lsls	r2, r3, #31
 8003e22:	4605      	mov	r5, r0
 8003e24:	d4e0      	bmi.n	8003de8 <_fflush_r+0xc>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	059b      	lsls	r3, r3, #22
 8003e2a:	d4dd      	bmi.n	8003de8 <_fflush_r+0xc>
 8003e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e2e:	f000 f908 	bl	8004042 <__retarget_lock_release_recursive>
 8003e32:	e7d9      	b.n	8003de8 <_fflush_r+0xc>
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <_fflush_r+0x70>)
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d101      	bne.n	8003e3e <_fflush_r+0x62>
 8003e3a:	68ac      	ldr	r4, [r5, #8]
 8003e3c:	e7df      	b.n	8003dfe <_fflush_r+0x22>
 8003e3e:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <_fflush_r+0x74>)
 8003e40:	429c      	cmp	r4, r3
 8003e42:	bf08      	it	eq
 8003e44:	68ec      	ldreq	r4, [r5, #12]
 8003e46:	e7da      	b.n	8003dfe <_fflush_r+0x22>
 8003e48:	08004d94 	.word	0x08004d94
 8003e4c:	08004db4 	.word	0x08004db4
 8003e50:	08004d74 	.word	0x08004d74

08003e54 <std>:
 8003e54:	2300      	movs	r3, #0
 8003e56:	b510      	push	{r4, lr}
 8003e58:	4604      	mov	r4, r0
 8003e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e62:	6083      	str	r3, [r0, #8]
 8003e64:	8181      	strh	r1, [r0, #12]
 8003e66:	6643      	str	r3, [r0, #100]	; 0x64
 8003e68:	81c2      	strh	r2, [r0, #14]
 8003e6a:	6183      	str	r3, [r0, #24]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	2208      	movs	r2, #8
 8003e70:	305c      	adds	r0, #92	; 0x5c
 8003e72:	f7ff fdcf 	bl	8003a14 <memset>
 8003e76:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <std+0x38>)
 8003e78:	6263      	str	r3, [r4, #36]	; 0x24
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <std+0x3c>)
 8003e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <std+0x40>)
 8003e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <std+0x44>)
 8003e84:	6224      	str	r4, [r4, #32]
 8003e86:	6323      	str	r3, [r4, #48]	; 0x30
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	bf00      	nop
 8003e8c:	080048d1 	.word	0x080048d1
 8003e90:	080048f3 	.word	0x080048f3
 8003e94:	0800492b 	.word	0x0800492b
 8003e98:	0800494f 	.word	0x0800494f

08003e9c <_cleanup_r>:
 8003e9c:	4901      	ldr	r1, [pc, #4]	; (8003ea4 <_cleanup_r+0x8>)
 8003e9e:	f000 b8af 	b.w	8004000 <_fwalk_reent>
 8003ea2:	bf00      	nop
 8003ea4:	08003ddd 	.word	0x08003ddd

08003ea8 <__sfmoreglue>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	2268      	movs	r2, #104	; 0x68
 8003eac:	1e4d      	subs	r5, r1, #1
 8003eae:	4355      	muls	r5, r2
 8003eb0:	460e      	mov	r6, r1
 8003eb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003eb6:	f000 f997 	bl	80041e8 <_malloc_r>
 8003eba:	4604      	mov	r4, r0
 8003ebc:	b140      	cbz	r0, 8003ed0 <__sfmoreglue+0x28>
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	e9c0 1600 	strd	r1, r6, [r0]
 8003ec4:	300c      	adds	r0, #12
 8003ec6:	60a0      	str	r0, [r4, #8]
 8003ec8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003ecc:	f7ff fda2 	bl	8003a14 <memset>
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}

08003ed4 <__sfp_lock_acquire>:
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <__sfp_lock_acquire+0x8>)
 8003ed6:	f000 b8b3 	b.w	8004040 <__retarget_lock_acquire_recursive>
 8003eda:	bf00      	nop
 8003edc:	20000171 	.word	0x20000171

08003ee0 <__sfp_lock_release>:
 8003ee0:	4801      	ldr	r0, [pc, #4]	; (8003ee8 <__sfp_lock_release+0x8>)
 8003ee2:	f000 b8ae 	b.w	8004042 <__retarget_lock_release_recursive>
 8003ee6:	bf00      	nop
 8003ee8:	20000171 	.word	0x20000171

08003eec <__sinit_lock_acquire>:
 8003eec:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <__sinit_lock_acquire+0x8>)
 8003eee:	f000 b8a7 	b.w	8004040 <__retarget_lock_acquire_recursive>
 8003ef2:	bf00      	nop
 8003ef4:	20000172 	.word	0x20000172

08003ef8 <__sinit_lock_release>:
 8003ef8:	4801      	ldr	r0, [pc, #4]	; (8003f00 <__sinit_lock_release+0x8>)
 8003efa:	f000 b8a2 	b.w	8004042 <__retarget_lock_release_recursive>
 8003efe:	bf00      	nop
 8003f00:	20000172 	.word	0x20000172

08003f04 <__sinit>:
 8003f04:	b510      	push	{r4, lr}
 8003f06:	4604      	mov	r4, r0
 8003f08:	f7ff fff0 	bl	8003eec <__sinit_lock_acquire>
 8003f0c:	69a3      	ldr	r3, [r4, #24]
 8003f0e:	b11b      	cbz	r3, 8003f18 <__sinit+0x14>
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	f7ff bff0 	b.w	8003ef8 <__sinit_lock_release>
 8003f18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f1c:	6523      	str	r3, [r4, #80]	; 0x50
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <__sinit+0x68>)
 8003f20:	4a13      	ldr	r2, [pc, #76]	; (8003f70 <__sinit+0x6c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f26:	42a3      	cmp	r3, r4
 8003f28:	bf04      	itt	eq
 8003f2a:	2301      	moveq	r3, #1
 8003f2c:	61a3      	streq	r3, [r4, #24]
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f000 f820 	bl	8003f74 <__sfp>
 8003f34:	6060      	str	r0, [r4, #4]
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 f81c 	bl	8003f74 <__sfp>
 8003f3c:	60a0      	str	r0, [r4, #8]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 f818 	bl	8003f74 <__sfp>
 8003f44:	2200      	movs	r2, #0
 8003f46:	60e0      	str	r0, [r4, #12]
 8003f48:	2104      	movs	r1, #4
 8003f4a:	6860      	ldr	r0, [r4, #4]
 8003f4c:	f7ff ff82 	bl	8003e54 <std>
 8003f50:	68a0      	ldr	r0, [r4, #8]
 8003f52:	2201      	movs	r2, #1
 8003f54:	2109      	movs	r1, #9
 8003f56:	f7ff ff7d 	bl	8003e54 <std>
 8003f5a:	68e0      	ldr	r0, [r4, #12]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	2112      	movs	r1, #18
 8003f60:	f7ff ff78 	bl	8003e54 <std>
 8003f64:	2301      	movs	r3, #1
 8003f66:	61a3      	str	r3, [r4, #24]
 8003f68:	e7d2      	b.n	8003f10 <__sinit+0xc>
 8003f6a:	bf00      	nop
 8003f6c:	08004d70 	.word	0x08004d70
 8003f70:	08003e9d 	.word	0x08003e9d

08003f74 <__sfp>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	4607      	mov	r7, r0
 8003f78:	f7ff ffac 	bl	8003ed4 <__sfp_lock_acquire>
 8003f7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <__sfp+0x84>)
 8003f7e:	681e      	ldr	r6, [r3, #0]
 8003f80:	69b3      	ldr	r3, [r6, #24]
 8003f82:	b913      	cbnz	r3, 8003f8a <__sfp+0x16>
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7ff ffbd 	bl	8003f04 <__sinit>
 8003f8a:	3648      	adds	r6, #72	; 0x48
 8003f8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	d503      	bpl.n	8003f9c <__sfp+0x28>
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	b30b      	cbz	r3, 8003fdc <__sfp+0x68>
 8003f98:	6836      	ldr	r6, [r6, #0]
 8003f9a:	e7f7      	b.n	8003f8c <__sfp+0x18>
 8003f9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fa0:	b9d5      	cbnz	r5, 8003fd8 <__sfp+0x64>
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <__sfp+0x88>)
 8003fa4:	60e3      	str	r3, [r4, #12]
 8003fa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003faa:	6665      	str	r5, [r4, #100]	; 0x64
 8003fac:	f000 f847 	bl	800403e <__retarget_lock_init_recursive>
 8003fb0:	f7ff ff96 	bl	8003ee0 <__sfp_lock_release>
 8003fb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003fb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003fbc:	6025      	str	r5, [r4, #0]
 8003fbe:	61a5      	str	r5, [r4, #24]
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003fc8:	f7ff fd24 	bl	8003a14 <memset>
 8003fcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003fd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd8:	3468      	adds	r4, #104	; 0x68
 8003fda:	e7d9      	b.n	8003f90 <__sfp+0x1c>
 8003fdc:	2104      	movs	r1, #4
 8003fde:	4638      	mov	r0, r7
 8003fe0:	f7ff ff62 	bl	8003ea8 <__sfmoreglue>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	6030      	str	r0, [r6, #0]
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d1d5      	bne.n	8003f98 <__sfp+0x24>
 8003fec:	f7ff ff78 	bl	8003ee0 <__sfp_lock_release>
 8003ff0:	230c      	movs	r3, #12
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	e7ee      	b.n	8003fd4 <__sfp+0x60>
 8003ff6:	bf00      	nop
 8003ff8:	08004d70 	.word	0x08004d70
 8003ffc:	ffff0001 	.word	0xffff0001

08004000 <_fwalk_reent>:
 8004000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004004:	4606      	mov	r6, r0
 8004006:	4688      	mov	r8, r1
 8004008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800400c:	2700      	movs	r7, #0
 800400e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004012:	f1b9 0901 	subs.w	r9, r9, #1
 8004016:	d505      	bpl.n	8004024 <_fwalk_reent+0x24>
 8004018:	6824      	ldr	r4, [r4, #0]
 800401a:	2c00      	cmp	r4, #0
 800401c:	d1f7      	bne.n	800400e <_fwalk_reent+0xe>
 800401e:	4638      	mov	r0, r7
 8004020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004024:	89ab      	ldrh	r3, [r5, #12]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d907      	bls.n	800403a <_fwalk_reent+0x3a>
 800402a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800402e:	3301      	adds	r3, #1
 8004030:	d003      	beq.n	800403a <_fwalk_reent+0x3a>
 8004032:	4629      	mov	r1, r5
 8004034:	4630      	mov	r0, r6
 8004036:	47c0      	blx	r8
 8004038:	4307      	orrs	r7, r0
 800403a:	3568      	adds	r5, #104	; 0x68
 800403c:	e7e9      	b.n	8004012 <_fwalk_reent+0x12>

0800403e <__retarget_lock_init_recursive>:
 800403e:	4770      	bx	lr

08004040 <__retarget_lock_acquire_recursive>:
 8004040:	4770      	bx	lr

08004042 <__retarget_lock_release_recursive>:
 8004042:	4770      	bx	lr

08004044 <__swhatbuf_r>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	460e      	mov	r6, r1
 8004048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800404c:	2900      	cmp	r1, #0
 800404e:	b096      	sub	sp, #88	; 0x58
 8004050:	4614      	mov	r4, r2
 8004052:	461d      	mov	r5, r3
 8004054:	da08      	bge.n	8004068 <__swhatbuf_r+0x24>
 8004056:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	602a      	str	r2, [r5, #0]
 800405e:	061a      	lsls	r2, r3, #24
 8004060:	d410      	bmi.n	8004084 <__swhatbuf_r+0x40>
 8004062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004066:	e00e      	b.n	8004086 <__swhatbuf_r+0x42>
 8004068:	466a      	mov	r2, sp
 800406a:	f000 fc97 	bl	800499c <_fstat_r>
 800406e:	2800      	cmp	r0, #0
 8004070:	dbf1      	blt.n	8004056 <__swhatbuf_r+0x12>
 8004072:	9a01      	ldr	r2, [sp, #4]
 8004074:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004078:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800407c:	425a      	negs	r2, r3
 800407e:	415a      	adcs	r2, r3
 8004080:	602a      	str	r2, [r5, #0]
 8004082:	e7ee      	b.n	8004062 <__swhatbuf_r+0x1e>
 8004084:	2340      	movs	r3, #64	; 0x40
 8004086:	2000      	movs	r0, #0
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	b016      	add	sp, #88	; 0x58
 800408c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004090 <__smakebuf_r>:
 8004090:	898b      	ldrh	r3, [r1, #12]
 8004092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004094:	079d      	lsls	r5, r3, #30
 8004096:	4606      	mov	r6, r0
 8004098:	460c      	mov	r4, r1
 800409a:	d507      	bpl.n	80040ac <__smakebuf_r+0x1c>
 800409c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	6123      	str	r3, [r4, #16]
 80040a4:	2301      	movs	r3, #1
 80040a6:	6163      	str	r3, [r4, #20]
 80040a8:	b002      	add	sp, #8
 80040aa:	bd70      	pop	{r4, r5, r6, pc}
 80040ac:	ab01      	add	r3, sp, #4
 80040ae:	466a      	mov	r2, sp
 80040b0:	f7ff ffc8 	bl	8004044 <__swhatbuf_r>
 80040b4:	9900      	ldr	r1, [sp, #0]
 80040b6:	4605      	mov	r5, r0
 80040b8:	4630      	mov	r0, r6
 80040ba:	f000 f895 	bl	80041e8 <_malloc_r>
 80040be:	b948      	cbnz	r0, 80040d4 <__smakebuf_r+0x44>
 80040c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c4:	059a      	lsls	r2, r3, #22
 80040c6:	d4ef      	bmi.n	80040a8 <__smakebuf_r+0x18>
 80040c8:	f023 0303 	bic.w	r3, r3, #3
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	81a3      	strh	r3, [r4, #12]
 80040d2:	e7e3      	b.n	800409c <__smakebuf_r+0xc>
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <__smakebuf_r+0x7c>)
 80040d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	6020      	str	r0, [r4, #0]
 80040dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e0:	81a3      	strh	r3, [r4, #12]
 80040e2:	9b00      	ldr	r3, [sp, #0]
 80040e4:	6163      	str	r3, [r4, #20]
 80040e6:	9b01      	ldr	r3, [sp, #4]
 80040e8:	6120      	str	r0, [r4, #16]
 80040ea:	b15b      	cbz	r3, 8004104 <__smakebuf_r+0x74>
 80040ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 fc65 	bl	80049c0 <_isatty_r>
 80040f6:	b128      	cbz	r0, 8004104 <__smakebuf_r+0x74>
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	89a0      	ldrh	r0, [r4, #12]
 8004106:	4305      	orrs	r5, r0
 8004108:	81a5      	strh	r5, [r4, #12]
 800410a:	e7cd      	b.n	80040a8 <__smakebuf_r+0x18>
 800410c:	08003e9d 	.word	0x08003e9d

08004110 <_free_r>:
 8004110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004112:	2900      	cmp	r1, #0
 8004114:	d044      	beq.n	80041a0 <_free_r+0x90>
 8004116:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800411a:	9001      	str	r0, [sp, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f1a1 0404 	sub.w	r4, r1, #4
 8004122:	bfb8      	it	lt
 8004124:	18e4      	addlt	r4, r4, r3
 8004126:	f000 fc95 	bl	8004a54 <__malloc_lock>
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <_free_r+0x94>)
 800412c:	9801      	ldr	r0, [sp, #4]
 800412e:	6813      	ldr	r3, [r2, #0]
 8004130:	b933      	cbnz	r3, 8004140 <_free_r+0x30>
 8004132:	6063      	str	r3, [r4, #4]
 8004134:	6014      	str	r4, [r2, #0]
 8004136:	b003      	add	sp, #12
 8004138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800413c:	f000 bc90 	b.w	8004a60 <__malloc_unlock>
 8004140:	42a3      	cmp	r3, r4
 8004142:	d908      	bls.n	8004156 <_free_r+0x46>
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1961      	adds	r1, r4, r5
 8004148:	428b      	cmp	r3, r1
 800414a:	bf01      	itttt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	1949      	addeq	r1, r1, r5
 8004152:	6021      	streq	r1, [r4, #0]
 8004154:	e7ed      	b.n	8004132 <_free_r+0x22>
 8004156:	461a      	mov	r2, r3
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b10b      	cbz	r3, 8004160 <_free_r+0x50>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d9fa      	bls.n	8004156 <_free_r+0x46>
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	1855      	adds	r5, r2, r1
 8004164:	42a5      	cmp	r5, r4
 8004166:	d10b      	bne.n	8004180 <_free_r+0x70>
 8004168:	6824      	ldr	r4, [r4, #0]
 800416a:	4421      	add	r1, r4
 800416c:	1854      	adds	r4, r2, r1
 800416e:	42a3      	cmp	r3, r4
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	d1e0      	bne.n	8004136 <_free_r+0x26>
 8004174:	681c      	ldr	r4, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	6053      	str	r3, [r2, #4]
 800417a:	4421      	add	r1, r4
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	e7da      	b.n	8004136 <_free_r+0x26>
 8004180:	d902      	bls.n	8004188 <_free_r+0x78>
 8004182:	230c      	movs	r3, #12
 8004184:	6003      	str	r3, [r0, #0]
 8004186:	e7d6      	b.n	8004136 <_free_r+0x26>
 8004188:	6825      	ldr	r5, [r4, #0]
 800418a:	1961      	adds	r1, r4, r5
 800418c:	428b      	cmp	r3, r1
 800418e:	bf04      	itt	eq
 8004190:	6819      	ldreq	r1, [r3, #0]
 8004192:	685b      	ldreq	r3, [r3, #4]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	bf04      	itt	eq
 8004198:	1949      	addeq	r1, r1, r5
 800419a:	6021      	streq	r1, [r4, #0]
 800419c:	6054      	str	r4, [r2, #4]
 800419e:	e7ca      	b.n	8004136 <_free_r+0x26>
 80041a0:	b003      	add	sp, #12
 80041a2:	bd30      	pop	{r4, r5, pc}
 80041a4:	20000174 	.word	0x20000174

080041a8 <sbrk_aligned>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	4e0e      	ldr	r6, [pc, #56]	; (80041e4 <sbrk_aligned+0x3c>)
 80041ac:	460c      	mov	r4, r1
 80041ae:	6831      	ldr	r1, [r6, #0]
 80041b0:	4605      	mov	r5, r0
 80041b2:	b911      	cbnz	r1, 80041ba <sbrk_aligned+0x12>
 80041b4:	f000 fb7c 	bl	80048b0 <_sbrk_r>
 80041b8:	6030      	str	r0, [r6, #0]
 80041ba:	4621      	mov	r1, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 fb77 	bl	80048b0 <_sbrk_r>
 80041c2:	1c43      	adds	r3, r0, #1
 80041c4:	d00a      	beq.n	80041dc <sbrk_aligned+0x34>
 80041c6:	1cc4      	adds	r4, r0, #3
 80041c8:	f024 0403 	bic.w	r4, r4, #3
 80041cc:	42a0      	cmp	r0, r4
 80041ce:	d007      	beq.n	80041e0 <sbrk_aligned+0x38>
 80041d0:	1a21      	subs	r1, r4, r0
 80041d2:	4628      	mov	r0, r5
 80041d4:	f000 fb6c 	bl	80048b0 <_sbrk_r>
 80041d8:	3001      	adds	r0, #1
 80041da:	d101      	bne.n	80041e0 <sbrk_aligned+0x38>
 80041dc:	f04f 34ff 	mov.w	r4, #4294967295
 80041e0:	4620      	mov	r0, r4
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	20000178 	.word	0x20000178

080041e8 <_malloc_r>:
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	1ccd      	adds	r5, r1, #3
 80041ee:	f025 0503 	bic.w	r5, r5, #3
 80041f2:	3508      	adds	r5, #8
 80041f4:	2d0c      	cmp	r5, #12
 80041f6:	bf38      	it	cc
 80041f8:	250c      	movcc	r5, #12
 80041fa:	2d00      	cmp	r5, #0
 80041fc:	4607      	mov	r7, r0
 80041fe:	db01      	blt.n	8004204 <_malloc_r+0x1c>
 8004200:	42a9      	cmp	r1, r5
 8004202:	d905      	bls.n	8004210 <_malloc_r+0x28>
 8004204:	230c      	movs	r3, #12
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	2600      	movs	r6, #0
 800420a:	4630      	mov	r0, r6
 800420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004210:	4e2e      	ldr	r6, [pc, #184]	; (80042cc <_malloc_r+0xe4>)
 8004212:	f000 fc1f 	bl	8004a54 <__malloc_lock>
 8004216:	6833      	ldr	r3, [r6, #0]
 8004218:	461c      	mov	r4, r3
 800421a:	bb34      	cbnz	r4, 800426a <_malloc_r+0x82>
 800421c:	4629      	mov	r1, r5
 800421e:	4638      	mov	r0, r7
 8004220:	f7ff ffc2 	bl	80041a8 <sbrk_aligned>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	4604      	mov	r4, r0
 8004228:	d14d      	bne.n	80042c6 <_malloc_r+0xde>
 800422a:	6834      	ldr	r4, [r6, #0]
 800422c:	4626      	mov	r6, r4
 800422e:	2e00      	cmp	r6, #0
 8004230:	d140      	bne.n	80042b4 <_malloc_r+0xcc>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	4631      	mov	r1, r6
 8004236:	4638      	mov	r0, r7
 8004238:	eb04 0803 	add.w	r8, r4, r3
 800423c:	f000 fb38 	bl	80048b0 <_sbrk_r>
 8004240:	4580      	cmp	r8, r0
 8004242:	d13a      	bne.n	80042ba <_malloc_r+0xd2>
 8004244:	6821      	ldr	r1, [r4, #0]
 8004246:	3503      	adds	r5, #3
 8004248:	1a6d      	subs	r5, r5, r1
 800424a:	f025 0503 	bic.w	r5, r5, #3
 800424e:	3508      	adds	r5, #8
 8004250:	2d0c      	cmp	r5, #12
 8004252:	bf38      	it	cc
 8004254:	250c      	movcc	r5, #12
 8004256:	4629      	mov	r1, r5
 8004258:	4638      	mov	r0, r7
 800425a:	f7ff ffa5 	bl	80041a8 <sbrk_aligned>
 800425e:	3001      	adds	r0, #1
 8004260:	d02b      	beq.n	80042ba <_malloc_r+0xd2>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	442b      	add	r3, r5
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	e00e      	b.n	8004288 <_malloc_r+0xa0>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	1b52      	subs	r2, r2, r5
 800426e:	d41e      	bmi.n	80042ae <_malloc_r+0xc6>
 8004270:	2a0b      	cmp	r2, #11
 8004272:	d916      	bls.n	80042a2 <_malloc_r+0xba>
 8004274:	1961      	adds	r1, r4, r5
 8004276:	42a3      	cmp	r3, r4
 8004278:	6025      	str	r5, [r4, #0]
 800427a:	bf18      	it	ne
 800427c:	6059      	strne	r1, [r3, #4]
 800427e:	6863      	ldr	r3, [r4, #4]
 8004280:	bf08      	it	eq
 8004282:	6031      	streq	r1, [r6, #0]
 8004284:	5162      	str	r2, [r4, r5]
 8004286:	604b      	str	r3, [r1, #4]
 8004288:	4638      	mov	r0, r7
 800428a:	f104 060b 	add.w	r6, r4, #11
 800428e:	f000 fbe7 	bl	8004a60 <__malloc_unlock>
 8004292:	f026 0607 	bic.w	r6, r6, #7
 8004296:	1d23      	adds	r3, r4, #4
 8004298:	1af2      	subs	r2, r6, r3
 800429a:	d0b6      	beq.n	800420a <_malloc_r+0x22>
 800429c:	1b9b      	subs	r3, r3, r6
 800429e:	50a3      	str	r3, [r4, r2]
 80042a0:	e7b3      	b.n	800420a <_malloc_r+0x22>
 80042a2:	6862      	ldr	r2, [r4, #4]
 80042a4:	42a3      	cmp	r3, r4
 80042a6:	bf0c      	ite	eq
 80042a8:	6032      	streq	r2, [r6, #0]
 80042aa:	605a      	strne	r2, [r3, #4]
 80042ac:	e7ec      	b.n	8004288 <_malloc_r+0xa0>
 80042ae:	4623      	mov	r3, r4
 80042b0:	6864      	ldr	r4, [r4, #4]
 80042b2:	e7b2      	b.n	800421a <_malloc_r+0x32>
 80042b4:	4634      	mov	r4, r6
 80042b6:	6876      	ldr	r6, [r6, #4]
 80042b8:	e7b9      	b.n	800422e <_malloc_r+0x46>
 80042ba:	230c      	movs	r3, #12
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4638      	mov	r0, r7
 80042c0:	f000 fbce 	bl	8004a60 <__malloc_unlock>
 80042c4:	e7a1      	b.n	800420a <_malloc_r+0x22>
 80042c6:	6025      	str	r5, [r4, #0]
 80042c8:	e7de      	b.n	8004288 <_malloc_r+0xa0>
 80042ca:	bf00      	nop
 80042cc:	20000174 	.word	0x20000174

080042d0 <__ssputs_r>:
 80042d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042d4:	688e      	ldr	r6, [r1, #8]
 80042d6:	429e      	cmp	r6, r3
 80042d8:	4682      	mov	sl, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	4690      	mov	r8, r2
 80042de:	461f      	mov	r7, r3
 80042e0:	d838      	bhi.n	8004354 <__ssputs_r+0x84>
 80042e2:	898a      	ldrh	r2, [r1, #12]
 80042e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042e8:	d032      	beq.n	8004350 <__ssputs_r+0x80>
 80042ea:	6825      	ldr	r5, [r4, #0]
 80042ec:	6909      	ldr	r1, [r1, #16]
 80042ee:	eba5 0901 	sub.w	r9, r5, r1
 80042f2:	6965      	ldr	r5, [r4, #20]
 80042f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042fc:	3301      	adds	r3, #1
 80042fe:	444b      	add	r3, r9
 8004300:	106d      	asrs	r5, r5, #1
 8004302:	429d      	cmp	r5, r3
 8004304:	bf38      	it	cc
 8004306:	461d      	movcc	r5, r3
 8004308:	0553      	lsls	r3, r2, #21
 800430a:	d531      	bpl.n	8004370 <__ssputs_r+0xa0>
 800430c:	4629      	mov	r1, r5
 800430e:	f7ff ff6b 	bl	80041e8 <_malloc_r>
 8004312:	4606      	mov	r6, r0
 8004314:	b950      	cbnz	r0, 800432c <__ssputs_r+0x5c>
 8004316:	230c      	movs	r3, #12
 8004318:	f8ca 3000 	str.w	r3, [sl]
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	f04f 30ff 	mov.w	r0, #4294967295
 8004328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432c:	6921      	ldr	r1, [r4, #16]
 800432e:	464a      	mov	r2, r9
 8004330:	f000 fb68 	bl	8004a04 <memcpy>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800433a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433e:	81a3      	strh	r3, [r4, #12]
 8004340:	6126      	str	r6, [r4, #16]
 8004342:	6165      	str	r5, [r4, #20]
 8004344:	444e      	add	r6, r9
 8004346:	eba5 0509 	sub.w	r5, r5, r9
 800434a:	6026      	str	r6, [r4, #0]
 800434c:	60a5      	str	r5, [r4, #8]
 800434e:	463e      	mov	r6, r7
 8004350:	42be      	cmp	r6, r7
 8004352:	d900      	bls.n	8004356 <__ssputs_r+0x86>
 8004354:	463e      	mov	r6, r7
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	4632      	mov	r2, r6
 800435a:	4641      	mov	r1, r8
 800435c:	f000 fb60 	bl	8004a20 <memmove>
 8004360:	68a3      	ldr	r3, [r4, #8]
 8004362:	1b9b      	subs	r3, r3, r6
 8004364:	60a3      	str	r3, [r4, #8]
 8004366:	6823      	ldr	r3, [r4, #0]
 8004368:	4433      	add	r3, r6
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	2000      	movs	r0, #0
 800436e:	e7db      	b.n	8004328 <__ssputs_r+0x58>
 8004370:	462a      	mov	r2, r5
 8004372:	f000 fb7b 	bl	8004a6c <_realloc_r>
 8004376:	4606      	mov	r6, r0
 8004378:	2800      	cmp	r0, #0
 800437a:	d1e1      	bne.n	8004340 <__ssputs_r+0x70>
 800437c:	6921      	ldr	r1, [r4, #16]
 800437e:	4650      	mov	r0, sl
 8004380:	f7ff fec6 	bl	8004110 <_free_r>
 8004384:	e7c7      	b.n	8004316 <__ssputs_r+0x46>
	...

08004388 <_svfiprintf_r>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	4698      	mov	r8, r3
 800438e:	898b      	ldrh	r3, [r1, #12]
 8004390:	061b      	lsls	r3, r3, #24
 8004392:	b09d      	sub	sp, #116	; 0x74
 8004394:	4607      	mov	r7, r0
 8004396:	460d      	mov	r5, r1
 8004398:	4614      	mov	r4, r2
 800439a:	d50e      	bpl.n	80043ba <_svfiprintf_r+0x32>
 800439c:	690b      	ldr	r3, [r1, #16]
 800439e:	b963      	cbnz	r3, 80043ba <_svfiprintf_r+0x32>
 80043a0:	2140      	movs	r1, #64	; 0x40
 80043a2:	f7ff ff21 	bl	80041e8 <_malloc_r>
 80043a6:	6028      	str	r0, [r5, #0]
 80043a8:	6128      	str	r0, [r5, #16]
 80043aa:	b920      	cbnz	r0, 80043b6 <_svfiprintf_r+0x2e>
 80043ac:	230c      	movs	r3, #12
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	e0d1      	b.n	800455a <_svfiprintf_r+0x1d2>
 80043b6:	2340      	movs	r3, #64	; 0x40
 80043b8:	616b      	str	r3, [r5, #20]
 80043ba:	2300      	movs	r3, #0
 80043bc:	9309      	str	r3, [sp, #36]	; 0x24
 80043be:	2320      	movs	r3, #32
 80043c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c8:	2330      	movs	r3, #48	; 0x30
 80043ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004574 <_svfiprintf_r+0x1ec>
 80043ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043d2:	f04f 0901 	mov.w	r9, #1
 80043d6:	4623      	mov	r3, r4
 80043d8:	469a      	mov	sl, r3
 80043da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043de:	b10a      	cbz	r2, 80043e4 <_svfiprintf_r+0x5c>
 80043e0:	2a25      	cmp	r2, #37	; 0x25
 80043e2:	d1f9      	bne.n	80043d8 <_svfiprintf_r+0x50>
 80043e4:	ebba 0b04 	subs.w	fp, sl, r4
 80043e8:	d00b      	beq.n	8004402 <_svfiprintf_r+0x7a>
 80043ea:	465b      	mov	r3, fp
 80043ec:	4622      	mov	r2, r4
 80043ee:	4629      	mov	r1, r5
 80043f0:	4638      	mov	r0, r7
 80043f2:	f7ff ff6d 	bl	80042d0 <__ssputs_r>
 80043f6:	3001      	adds	r0, #1
 80043f8:	f000 80aa 	beq.w	8004550 <_svfiprintf_r+0x1c8>
 80043fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043fe:	445a      	add	r2, fp
 8004400:	9209      	str	r2, [sp, #36]	; 0x24
 8004402:	f89a 3000 	ldrb.w	r3, [sl]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80a2 	beq.w	8004550 <_svfiprintf_r+0x1c8>
 800440c:	2300      	movs	r3, #0
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
 8004412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004416:	f10a 0a01 	add.w	sl, sl, #1
 800441a:	9304      	str	r3, [sp, #16]
 800441c:	9307      	str	r3, [sp, #28]
 800441e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004422:	931a      	str	r3, [sp, #104]	; 0x68
 8004424:	4654      	mov	r4, sl
 8004426:	2205      	movs	r2, #5
 8004428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442c:	4851      	ldr	r0, [pc, #324]	; (8004574 <_svfiprintf_r+0x1ec>)
 800442e:	f7fb feef 	bl	8000210 <memchr>
 8004432:	9a04      	ldr	r2, [sp, #16]
 8004434:	b9d8      	cbnz	r0, 800446e <_svfiprintf_r+0xe6>
 8004436:	06d0      	lsls	r0, r2, #27
 8004438:	bf44      	itt	mi
 800443a:	2320      	movmi	r3, #32
 800443c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004440:	0711      	lsls	r1, r2, #28
 8004442:	bf44      	itt	mi
 8004444:	232b      	movmi	r3, #43	; 0x2b
 8004446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800444a:	f89a 3000 	ldrb.w	r3, [sl]
 800444e:	2b2a      	cmp	r3, #42	; 0x2a
 8004450:	d015      	beq.n	800447e <_svfiprintf_r+0xf6>
 8004452:	9a07      	ldr	r2, [sp, #28]
 8004454:	4654      	mov	r4, sl
 8004456:	2000      	movs	r0, #0
 8004458:	f04f 0c0a 	mov.w	ip, #10
 800445c:	4621      	mov	r1, r4
 800445e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004462:	3b30      	subs	r3, #48	; 0x30
 8004464:	2b09      	cmp	r3, #9
 8004466:	d94e      	bls.n	8004506 <_svfiprintf_r+0x17e>
 8004468:	b1b0      	cbz	r0, 8004498 <_svfiprintf_r+0x110>
 800446a:	9207      	str	r2, [sp, #28]
 800446c:	e014      	b.n	8004498 <_svfiprintf_r+0x110>
 800446e:	eba0 0308 	sub.w	r3, r0, r8
 8004472:	fa09 f303 	lsl.w	r3, r9, r3
 8004476:	4313      	orrs	r3, r2
 8004478:	9304      	str	r3, [sp, #16]
 800447a:	46a2      	mov	sl, r4
 800447c:	e7d2      	b.n	8004424 <_svfiprintf_r+0x9c>
 800447e:	9b03      	ldr	r3, [sp, #12]
 8004480:	1d19      	adds	r1, r3, #4
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	9103      	str	r1, [sp, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	bfbb      	ittet	lt
 800448a:	425b      	neglt	r3, r3
 800448c:	f042 0202 	orrlt.w	r2, r2, #2
 8004490:	9307      	strge	r3, [sp, #28]
 8004492:	9307      	strlt	r3, [sp, #28]
 8004494:	bfb8      	it	lt
 8004496:	9204      	strlt	r2, [sp, #16]
 8004498:	7823      	ldrb	r3, [r4, #0]
 800449a:	2b2e      	cmp	r3, #46	; 0x2e
 800449c:	d10c      	bne.n	80044b8 <_svfiprintf_r+0x130>
 800449e:	7863      	ldrb	r3, [r4, #1]
 80044a0:	2b2a      	cmp	r3, #42	; 0x2a
 80044a2:	d135      	bne.n	8004510 <_svfiprintf_r+0x188>
 80044a4:	9b03      	ldr	r3, [sp, #12]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	9203      	str	r2, [sp, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bfb8      	it	lt
 80044b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80044b4:	3402      	adds	r4, #2
 80044b6:	9305      	str	r3, [sp, #20]
 80044b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004584 <_svfiprintf_r+0x1fc>
 80044bc:	7821      	ldrb	r1, [r4, #0]
 80044be:	2203      	movs	r2, #3
 80044c0:	4650      	mov	r0, sl
 80044c2:	f7fb fea5 	bl	8000210 <memchr>
 80044c6:	b140      	cbz	r0, 80044da <_svfiprintf_r+0x152>
 80044c8:	2340      	movs	r3, #64	; 0x40
 80044ca:	eba0 000a 	sub.w	r0, r0, sl
 80044ce:	fa03 f000 	lsl.w	r0, r3, r0
 80044d2:	9b04      	ldr	r3, [sp, #16]
 80044d4:	4303      	orrs	r3, r0
 80044d6:	3401      	adds	r4, #1
 80044d8:	9304      	str	r3, [sp, #16]
 80044da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044de:	4826      	ldr	r0, [pc, #152]	; (8004578 <_svfiprintf_r+0x1f0>)
 80044e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044e4:	2206      	movs	r2, #6
 80044e6:	f7fb fe93 	bl	8000210 <memchr>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d038      	beq.n	8004560 <_svfiprintf_r+0x1d8>
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <_svfiprintf_r+0x1f4>)
 80044f0:	bb1b      	cbnz	r3, 800453a <_svfiprintf_r+0x1b2>
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	3307      	adds	r3, #7
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	3308      	adds	r3, #8
 80044fc:	9303      	str	r3, [sp, #12]
 80044fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004500:	4433      	add	r3, r6
 8004502:	9309      	str	r3, [sp, #36]	; 0x24
 8004504:	e767      	b.n	80043d6 <_svfiprintf_r+0x4e>
 8004506:	fb0c 3202 	mla	r2, ip, r2, r3
 800450a:	460c      	mov	r4, r1
 800450c:	2001      	movs	r0, #1
 800450e:	e7a5      	b.n	800445c <_svfiprintf_r+0xd4>
 8004510:	2300      	movs	r3, #0
 8004512:	3401      	adds	r4, #1
 8004514:	9305      	str	r3, [sp, #20]
 8004516:	4619      	mov	r1, r3
 8004518:	f04f 0c0a 	mov.w	ip, #10
 800451c:	4620      	mov	r0, r4
 800451e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004522:	3a30      	subs	r2, #48	; 0x30
 8004524:	2a09      	cmp	r2, #9
 8004526:	d903      	bls.n	8004530 <_svfiprintf_r+0x1a8>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0c5      	beq.n	80044b8 <_svfiprintf_r+0x130>
 800452c:	9105      	str	r1, [sp, #20]
 800452e:	e7c3      	b.n	80044b8 <_svfiprintf_r+0x130>
 8004530:	fb0c 2101 	mla	r1, ip, r1, r2
 8004534:	4604      	mov	r4, r0
 8004536:	2301      	movs	r3, #1
 8004538:	e7f0      	b.n	800451c <_svfiprintf_r+0x194>
 800453a:	ab03      	add	r3, sp, #12
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	462a      	mov	r2, r5
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <_svfiprintf_r+0x1f8>)
 8004542:	a904      	add	r1, sp, #16
 8004544:	4638      	mov	r0, r7
 8004546:	f3af 8000 	nop.w
 800454a:	1c42      	adds	r2, r0, #1
 800454c:	4606      	mov	r6, r0
 800454e:	d1d6      	bne.n	80044fe <_svfiprintf_r+0x176>
 8004550:	89ab      	ldrh	r3, [r5, #12]
 8004552:	065b      	lsls	r3, r3, #25
 8004554:	f53f af2c 	bmi.w	80043b0 <_svfiprintf_r+0x28>
 8004558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800455a:	b01d      	add	sp, #116	; 0x74
 800455c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004560:	ab03      	add	r3, sp, #12
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	462a      	mov	r2, r5
 8004566:	4b06      	ldr	r3, [pc, #24]	; (8004580 <_svfiprintf_r+0x1f8>)
 8004568:	a904      	add	r1, sp, #16
 800456a:	4638      	mov	r0, r7
 800456c:	f000 f87a 	bl	8004664 <_printf_i>
 8004570:	e7eb      	b.n	800454a <_svfiprintf_r+0x1c2>
 8004572:	bf00      	nop
 8004574:	08004dd4 	.word	0x08004dd4
 8004578:	08004dde 	.word	0x08004dde
 800457c:	00000000 	.word	0x00000000
 8004580:	080042d1 	.word	0x080042d1
 8004584:	08004dda 	.word	0x08004dda

08004588 <_printf_common>:
 8004588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	4616      	mov	r6, r2
 800458e:	4699      	mov	r9, r3
 8004590:	688a      	ldr	r2, [r1, #8]
 8004592:	690b      	ldr	r3, [r1, #16]
 8004594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004598:	4293      	cmp	r3, r2
 800459a:	bfb8      	it	lt
 800459c:	4613      	movlt	r3, r2
 800459e:	6033      	str	r3, [r6, #0]
 80045a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045a4:	4607      	mov	r7, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	b10a      	cbz	r2, 80045ae <_printf_common+0x26>
 80045aa:	3301      	adds	r3, #1
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	0699      	lsls	r1, r3, #26
 80045b2:	bf42      	ittt	mi
 80045b4:	6833      	ldrmi	r3, [r6, #0]
 80045b6:	3302      	addmi	r3, #2
 80045b8:	6033      	strmi	r3, [r6, #0]
 80045ba:	6825      	ldr	r5, [r4, #0]
 80045bc:	f015 0506 	ands.w	r5, r5, #6
 80045c0:	d106      	bne.n	80045d0 <_printf_common+0x48>
 80045c2:	f104 0a19 	add.w	sl, r4, #25
 80045c6:	68e3      	ldr	r3, [r4, #12]
 80045c8:	6832      	ldr	r2, [r6, #0]
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	42ab      	cmp	r3, r5
 80045ce:	dc26      	bgt.n	800461e <_printf_common+0x96>
 80045d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045d4:	1e13      	subs	r3, r2, #0
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	bf18      	it	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	0692      	lsls	r2, r2, #26
 80045de:	d42b      	bmi.n	8004638 <_printf_common+0xb0>
 80045e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045e4:	4649      	mov	r1, r9
 80045e6:	4638      	mov	r0, r7
 80045e8:	47c0      	blx	r8
 80045ea:	3001      	adds	r0, #1
 80045ec:	d01e      	beq.n	800462c <_printf_common+0xa4>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	68e5      	ldr	r5, [r4, #12]
 80045f2:	6832      	ldr	r2, [r6, #0]
 80045f4:	f003 0306 	and.w	r3, r3, #6
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	bf08      	it	eq
 80045fc:	1aad      	subeq	r5, r5, r2
 80045fe:	68a3      	ldr	r3, [r4, #8]
 8004600:	6922      	ldr	r2, [r4, #16]
 8004602:	bf0c      	ite	eq
 8004604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004608:	2500      	movne	r5, #0
 800460a:	4293      	cmp	r3, r2
 800460c:	bfc4      	itt	gt
 800460e:	1a9b      	subgt	r3, r3, r2
 8004610:	18ed      	addgt	r5, r5, r3
 8004612:	2600      	movs	r6, #0
 8004614:	341a      	adds	r4, #26
 8004616:	42b5      	cmp	r5, r6
 8004618:	d11a      	bne.n	8004650 <_printf_common+0xc8>
 800461a:	2000      	movs	r0, #0
 800461c:	e008      	b.n	8004630 <_printf_common+0xa8>
 800461e:	2301      	movs	r3, #1
 8004620:	4652      	mov	r2, sl
 8004622:	4649      	mov	r1, r9
 8004624:	4638      	mov	r0, r7
 8004626:	47c0      	blx	r8
 8004628:	3001      	adds	r0, #1
 800462a:	d103      	bne.n	8004634 <_printf_common+0xac>
 800462c:	f04f 30ff 	mov.w	r0, #4294967295
 8004630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004634:	3501      	adds	r5, #1
 8004636:	e7c6      	b.n	80045c6 <_printf_common+0x3e>
 8004638:	18e1      	adds	r1, r4, r3
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	2030      	movs	r0, #48	; 0x30
 800463e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004642:	4422      	add	r2, r4
 8004644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800464c:	3302      	adds	r3, #2
 800464e:	e7c7      	b.n	80045e0 <_printf_common+0x58>
 8004650:	2301      	movs	r3, #1
 8004652:	4622      	mov	r2, r4
 8004654:	4649      	mov	r1, r9
 8004656:	4638      	mov	r0, r7
 8004658:	47c0      	blx	r8
 800465a:	3001      	adds	r0, #1
 800465c:	d0e6      	beq.n	800462c <_printf_common+0xa4>
 800465e:	3601      	adds	r6, #1
 8004660:	e7d9      	b.n	8004616 <_printf_common+0x8e>
	...

08004664 <_printf_i>:
 8004664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004668:	7e0f      	ldrb	r7, [r1, #24]
 800466a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800466c:	2f78      	cmp	r7, #120	; 0x78
 800466e:	4691      	mov	r9, r2
 8004670:	4680      	mov	r8, r0
 8004672:	460c      	mov	r4, r1
 8004674:	469a      	mov	sl, r3
 8004676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800467a:	d807      	bhi.n	800468c <_printf_i+0x28>
 800467c:	2f62      	cmp	r7, #98	; 0x62
 800467e:	d80a      	bhi.n	8004696 <_printf_i+0x32>
 8004680:	2f00      	cmp	r7, #0
 8004682:	f000 80d8 	beq.w	8004836 <_printf_i+0x1d2>
 8004686:	2f58      	cmp	r7, #88	; 0x58
 8004688:	f000 80a3 	beq.w	80047d2 <_printf_i+0x16e>
 800468c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004694:	e03a      	b.n	800470c <_printf_i+0xa8>
 8004696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800469a:	2b15      	cmp	r3, #21
 800469c:	d8f6      	bhi.n	800468c <_printf_i+0x28>
 800469e:	a101      	add	r1, pc, #4	; (adr r1, 80046a4 <_printf_i+0x40>)
 80046a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046a4:	080046fd 	.word	0x080046fd
 80046a8:	08004711 	.word	0x08004711
 80046ac:	0800468d 	.word	0x0800468d
 80046b0:	0800468d 	.word	0x0800468d
 80046b4:	0800468d 	.word	0x0800468d
 80046b8:	0800468d 	.word	0x0800468d
 80046bc:	08004711 	.word	0x08004711
 80046c0:	0800468d 	.word	0x0800468d
 80046c4:	0800468d 	.word	0x0800468d
 80046c8:	0800468d 	.word	0x0800468d
 80046cc:	0800468d 	.word	0x0800468d
 80046d0:	0800481d 	.word	0x0800481d
 80046d4:	08004741 	.word	0x08004741
 80046d8:	080047ff 	.word	0x080047ff
 80046dc:	0800468d 	.word	0x0800468d
 80046e0:	0800468d 	.word	0x0800468d
 80046e4:	0800483f 	.word	0x0800483f
 80046e8:	0800468d 	.word	0x0800468d
 80046ec:	08004741 	.word	0x08004741
 80046f0:	0800468d 	.word	0x0800468d
 80046f4:	0800468d 	.word	0x0800468d
 80046f8:	08004807 	.word	0x08004807
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	1d1a      	adds	r2, r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	602a      	str	r2, [r5, #0]
 8004704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800470c:	2301      	movs	r3, #1
 800470e:	e0a3      	b.n	8004858 <_printf_i+0x1f4>
 8004710:	6820      	ldr	r0, [r4, #0]
 8004712:	6829      	ldr	r1, [r5, #0]
 8004714:	0606      	lsls	r6, r0, #24
 8004716:	f101 0304 	add.w	r3, r1, #4
 800471a:	d50a      	bpl.n	8004732 <_printf_i+0xce>
 800471c:	680e      	ldr	r6, [r1, #0]
 800471e:	602b      	str	r3, [r5, #0]
 8004720:	2e00      	cmp	r6, #0
 8004722:	da03      	bge.n	800472c <_printf_i+0xc8>
 8004724:	232d      	movs	r3, #45	; 0x2d
 8004726:	4276      	negs	r6, r6
 8004728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800472c:	485e      	ldr	r0, [pc, #376]	; (80048a8 <_printf_i+0x244>)
 800472e:	230a      	movs	r3, #10
 8004730:	e019      	b.n	8004766 <_printf_i+0x102>
 8004732:	680e      	ldr	r6, [r1, #0]
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	f010 0f40 	tst.w	r0, #64	; 0x40
 800473a:	bf18      	it	ne
 800473c:	b236      	sxthne	r6, r6
 800473e:	e7ef      	b.n	8004720 <_printf_i+0xbc>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	6820      	ldr	r0, [r4, #0]
 8004744:	1d19      	adds	r1, r3, #4
 8004746:	6029      	str	r1, [r5, #0]
 8004748:	0601      	lsls	r1, r0, #24
 800474a:	d501      	bpl.n	8004750 <_printf_i+0xec>
 800474c:	681e      	ldr	r6, [r3, #0]
 800474e:	e002      	b.n	8004756 <_printf_i+0xf2>
 8004750:	0646      	lsls	r6, r0, #25
 8004752:	d5fb      	bpl.n	800474c <_printf_i+0xe8>
 8004754:	881e      	ldrh	r6, [r3, #0]
 8004756:	4854      	ldr	r0, [pc, #336]	; (80048a8 <_printf_i+0x244>)
 8004758:	2f6f      	cmp	r7, #111	; 0x6f
 800475a:	bf0c      	ite	eq
 800475c:	2308      	moveq	r3, #8
 800475e:	230a      	movne	r3, #10
 8004760:	2100      	movs	r1, #0
 8004762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004766:	6865      	ldr	r5, [r4, #4]
 8004768:	60a5      	str	r5, [r4, #8]
 800476a:	2d00      	cmp	r5, #0
 800476c:	bfa2      	ittt	ge
 800476e:	6821      	ldrge	r1, [r4, #0]
 8004770:	f021 0104 	bicge.w	r1, r1, #4
 8004774:	6021      	strge	r1, [r4, #0]
 8004776:	b90e      	cbnz	r6, 800477c <_printf_i+0x118>
 8004778:	2d00      	cmp	r5, #0
 800477a:	d04d      	beq.n	8004818 <_printf_i+0x1b4>
 800477c:	4615      	mov	r5, r2
 800477e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004782:	fb03 6711 	mls	r7, r3, r1, r6
 8004786:	5dc7      	ldrb	r7, [r0, r7]
 8004788:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800478c:	4637      	mov	r7, r6
 800478e:	42bb      	cmp	r3, r7
 8004790:	460e      	mov	r6, r1
 8004792:	d9f4      	bls.n	800477e <_printf_i+0x11a>
 8004794:	2b08      	cmp	r3, #8
 8004796:	d10b      	bne.n	80047b0 <_printf_i+0x14c>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	07de      	lsls	r6, r3, #31
 800479c:	d508      	bpl.n	80047b0 <_printf_i+0x14c>
 800479e:	6923      	ldr	r3, [r4, #16]
 80047a0:	6861      	ldr	r1, [r4, #4]
 80047a2:	4299      	cmp	r1, r3
 80047a4:	bfde      	ittt	le
 80047a6:	2330      	movle	r3, #48	; 0x30
 80047a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047b0:	1b52      	subs	r2, r2, r5
 80047b2:	6122      	str	r2, [r4, #16]
 80047b4:	f8cd a000 	str.w	sl, [sp]
 80047b8:	464b      	mov	r3, r9
 80047ba:	aa03      	add	r2, sp, #12
 80047bc:	4621      	mov	r1, r4
 80047be:	4640      	mov	r0, r8
 80047c0:	f7ff fee2 	bl	8004588 <_printf_common>
 80047c4:	3001      	adds	r0, #1
 80047c6:	d14c      	bne.n	8004862 <_printf_i+0x1fe>
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	b004      	add	sp, #16
 80047ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d2:	4835      	ldr	r0, [pc, #212]	; (80048a8 <_printf_i+0x244>)
 80047d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047d8:	6829      	ldr	r1, [r5, #0]
 80047da:	6823      	ldr	r3, [r4, #0]
 80047dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80047e0:	6029      	str	r1, [r5, #0]
 80047e2:	061d      	lsls	r5, r3, #24
 80047e4:	d514      	bpl.n	8004810 <_printf_i+0x1ac>
 80047e6:	07df      	lsls	r7, r3, #31
 80047e8:	bf44      	itt	mi
 80047ea:	f043 0320 	orrmi.w	r3, r3, #32
 80047ee:	6023      	strmi	r3, [r4, #0]
 80047f0:	b91e      	cbnz	r6, 80047fa <_printf_i+0x196>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	f023 0320 	bic.w	r3, r3, #32
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	2310      	movs	r3, #16
 80047fc:	e7b0      	b.n	8004760 <_printf_i+0xfc>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	f043 0320 	orr.w	r3, r3, #32
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	2378      	movs	r3, #120	; 0x78
 8004808:	4828      	ldr	r0, [pc, #160]	; (80048ac <_printf_i+0x248>)
 800480a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800480e:	e7e3      	b.n	80047d8 <_printf_i+0x174>
 8004810:	0659      	lsls	r1, r3, #25
 8004812:	bf48      	it	mi
 8004814:	b2b6      	uxthmi	r6, r6
 8004816:	e7e6      	b.n	80047e6 <_printf_i+0x182>
 8004818:	4615      	mov	r5, r2
 800481a:	e7bb      	b.n	8004794 <_printf_i+0x130>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	6826      	ldr	r6, [r4, #0]
 8004820:	6961      	ldr	r1, [r4, #20]
 8004822:	1d18      	adds	r0, r3, #4
 8004824:	6028      	str	r0, [r5, #0]
 8004826:	0635      	lsls	r5, r6, #24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	d501      	bpl.n	8004830 <_printf_i+0x1cc>
 800482c:	6019      	str	r1, [r3, #0]
 800482e:	e002      	b.n	8004836 <_printf_i+0x1d2>
 8004830:	0670      	lsls	r0, r6, #25
 8004832:	d5fb      	bpl.n	800482c <_printf_i+0x1c8>
 8004834:	8019      	strh	r1, [r3, #0]
 8004836:	2300      	movs	r3, #0
 8004838:	6123      	str	r3, [r4, #16]
 800483a:	4615      	mov	r5, r2
 800483c:	e7ba      	b.n	80047b4 <_printf_i+0x150>
 800483e:	682b      	ldr	r3, [r5, #0]
 8004840:	1d1a      	adds	r2, r3, #4
 8004842:	602a      	str	r2, [r5, #0]
 8004844:	681d      	ldr	r5, [r3, #0]
 8004846:	6862      	ldr	r2, [r4, #4]
 8004848:	2100      	movs	r1, #0
 800484a:	4628      	mov	r0, r5
 800484c:	f7fb fce0 	bl	8000210 <memchr>
 8004850:	b108      	cbz	r0, 8004856 <_printf_i+0x1f2>
 8004852:	1b40      	subs	r0, r0, r5
 8004854:	6060      	str	r0, [r4, #4]
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	2300      	movs	r3, #0
 800485c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004860:	e7a8      	b.n	80047b4 <_printf_i+0x150>
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	462a      	mov	r2, r5
 8004866:	4649      	mov	r1, r9
 8004868:	4640      	mov	r0, r8
 800486a:	47d0      	blx	sl
 800486c:	3001      	adds	r0, #1
 800486e:	d0ab      	beq.n	80047c8 <_printf_i+0x164>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	079b      	lsls	r3, r3, #30
 8004874:	d413      	bmi.n	800489e <_printf_i+0x23a>
 8004876:	68e0      	ldr	r0, [r4, #12]
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	4298      	cmp	r0, r3
 800487c:	bfb8      	it	lt
 800487e:	4618      	movlt	r0, r3
 8004880:	e7a4      	b.n	80047cc <_printf_i+0x168>
 8004882:	2301      	movs	r3, #1
 8004884:	4632      	mov	r2, r6
 8004886:	4649      	mov	r1, r9
 8004888:	4640      	mov	r0, r8
 800488a:	47d0      	blx	sl
 800488c:	3001      	adds	r0, #1
 800488e:	d09b      	beq.n	80047c8 <_printf_i+0x164>
 8004890:	3501      	adds	r5, #1
 8004892:	68e3      	ldr	r3, [r4, #12]
 8004894:	9903      	ldr	r1, [sp, #12]
 8004896:	1a5b      	subs	r3, r3, r1
 8004898:	42ab      	cmp	r3, r5
 800489a:	dcf2      	bgt.n	8004882 <_printf_i+0x21e>
 800489c:	e7eb      	b.n	8004876 <_printf_i+0x212>
 800489e:	2500      	movs	r5, #0
 80048a0:	f104 0619 	add.w	r6, r4, #25
 80048a4:	e7f5      	b.n	8004892 <_printf_i+0x22e>
 80048a6:	bf00      	nop
 80048a8:	08004de5 	.word	0x08004de5
 80048ac:	08004df6 	.word	0x08004df6

080048b0 <_sbrk_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d06      	ldr	r5, [pc, #24]	; (80048cc <_sbrk_r+0x1c>)
 80048b4:	2300      	movs	r3, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fc fb36 	bl	8000f2c <_sbrk>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_sbrk_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_sbrk_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	2000017c 	.word	0x2000017c

080048d0 <__sread>:
 80048d0:	b510      	push	{r4, lr}
 80048d2:	460c      	mov	r4, r1
 80048d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048d8:	f000 f8f8 	bl	8004acc <_read_r>
 80048dc:	2800      	cmp	r0, #0
 80048de:	bfab      	itete	ge
 80048e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048e2:	89a3      	ldrhlt	r3, [r4, #12]
 80048e4:	181b      	addge	r3, r3, r0
 80048e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ea:	bfac      	ite	ge
 80048ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80048ee:	81a3      	strhlt	r3, [r4, #12]
 80048f0:	bd10      	pop	{r4, pc}

080048f2 <__swrite>:
 80048f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	461f      	mov	r7, r3
 80048f8:	898b      	ldrh	r3, [r1, #12]
 80048fa:	05db      	lsls	r3, r3, #23
 80048fc:	4605      	mov	r5, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	4616      	mov	r6, r2
 8004902:	d505      	bpl.n	8004910 <__swrite+0x1e>
 8004904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004908:	2302      	movs	r3, #2
 800490a:	2200      	movs	r2, #0
 800490c:	f000 f868 	bl	80049e0 <_lseek_r>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	4632      	mov	r2, r6
 800491e:	463b      	mov	r3, r7
 8004920:	4628      	mov	r0, r5
 8004922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004926:	f000 b817 	b.w	8004958 <_write_r>

0800492a <__sseek>:
 800492a:	b510      	push	{r4, lr}
 800492c:	460c      	mov	r4, r1
 800492e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004932:	f000 f855 	bl	80049e0 <_lseek_r>
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	89a3      	ldrh	r3, [r4, #12]
 800493a:	bf15      	itete	ne
 800493c:	6560      	strne	r0, [r4, #84]	; 0x54
 800493e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004946:	81a3      	strheq	r3, [r4, #12]
 8004948:	bf18      	it	ne
 800494a:	81a3      	strhne	r3, [r4, #12]
 800494c:	bd10      	pop	{r4, pc}

0800494e <__sclose>:
 800494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004952:	f000 b813 	b.w	800497c <_close_r>
	...

08004958 <_write_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d07      	ldr	r5, [pc, #28]	; (8004978 <_write_r+0x20>)
 800495c:	4604      	mov	r4, r0
 800495e:	4608      	mov	r0, r1
 8004960:	4611      	mov	r1, r2
 8004962:	2200      	movs	r2, #0
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f7fc fa8f 	bl	8000e8a <_write>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	d102      	bne.n	8004976 <_write_r+0x1e>
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	b103      	cbz	r3, 8004976 <_write_r+0x1e>
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	bd38      	pop	{r3, r4, r5, pc}
 8004978:	2000017c 	.word	0x2000017c

0800497c <_close_r>:
 800497c:	b538      	push	{r3, r4, r5, lr}
 800497e:	4d06      	ldr	r5, [pc, #24]	; (8004998 <_close_r+0x1c>)
 8004980:	2300      	movs	r3, #0
 8004982:	4604      	mov	r4, r0
 8004984:	4608      	mov	r0, r1
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	f7fc fa9b 	bl	8000ec2 <_close>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_close_r+0x1a>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	b103      	cbz	r3, 8004996 <_close_r+0x1a>
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	2000017c 	.word	0x2000017c

0800499c <_fstat_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4d07      	ldr	r5, [pc, #28]	; (80049bc <_fstat_r+0x20>)
 80049a0:	2300      	movs	r3, #0
 80049a2:	4604      	mov	r4, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	f7fc fa96 	bl	8000eda <_fstat>
 80049ae:	1c43      	adds	r3, r0, #1
 80049b0:	d102      	bne.n	80049b8 <_fstat_r+0x1c>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	b103      	cbz	r3, 80049b8 <_fstat_r+0x1c>
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	bd38      	pop	{r3, r4, r5, pc}
 80049ba:	bf00      	nop
 80049bc:	2000017c 	.word	0x2000017c

080049c0 <_isatty_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d06      	ldr	r5, [pc, #24]	; (80049dc <_isatty_r+0x1c>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	602b      	str	r3, [r5, #0]
 80049cc:	f7fc fa95 	bl	8000efa <_isatty>
 80049d0:	1c43      	adds	r3, r0, #1
 80049d2:	d102      	bne.n	80049da <_isatty_r+0x1a>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	b103      	cbz	r3, 80049da <_isatty_r+0x1a>
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	bd38      	pop	{r3, r4, r5, pc}
 80049dc:	2000017c 	.word	0x2000017c

080049e0 <_lseek_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d07      	ldr	r5, [pc, #28]	; (8004a00 <_lseek_r+0x20>)
 80049e4:	4604      	mov	r4, r0
 80049e6:	4608      	mov	r0, r1
 80049e8:	4611      	mov	r1, r2
 80049ea:	2200      	movs	r2, #0
 80049ec:	602a      	str	r2, [r5, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	f7fc fa8e 	bl	8000f10 <_lseek>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_lseek_r+0x1e>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_lseek_r+0x1e>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	2000017c 	.word	0x2000017c

08004a04 <memcpy>:
 8004a04:	440a      	add	r2, r1
 8004a06:	4291      	cmp	r1, r2
 8004a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a0c:	d100      	bne.n	8004a10 <memcpy+0xc>
 8004a0e:	4770      	bx	lr
 8004a10:	b510      	push	{r4, lr}
 8004a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a1a:	4291      	cmp	r1, r2
 8004a1c:	d1f9      	bne.n	8004a12 <memcpy+0xe>
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <memmove>:
 8004a20:	4288      	cmp	r0, r1
 8004a22:	b510      	push	{r4, lr}
 8004a24:	eb01 0402 	add.w	r4, r1, r2
 8004a28:	d902      	bls.n	8004a30 <memmove+0x10>
 8004a2a:	4284      	cmp	r4, r0
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	d807      	bhi.n	8004a40 <memmove+0x20>
 8004a30:	1e43      	subs	r3, r0, #1
 8004a32:	42a1      	cmp	r1, r4
 8004a34:	d008      	beq.n	8004a48 <memmove+0x28>
 8004a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a3e:	e7f8      	b.n	8004a32 <memmove+0x12>
 8004a40:	4402      	add	r2, r0
 8004a42:	4601      	mov	r1, r0
 8004a44:	428a      	cmp	r2, r1
 8004a46:	d100      	bne.n	8004a4a <memmove+0x2a>
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a52:	e7f7      	b.n	8004a44 <memmove+0x24>

08004a54 <__malloc_lock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	; (8004a5c <__malloc_lock+0x8>)
 8004a56:	f7ff baf3 	b.w	8004040 <__retarget_lock_acquire_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	20000170 	.word	0x20000170

08004a60 <__malloc_unlock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	; (8004a68 <__malloc_unlock+0x8>)
 8004a62:	f7ff baee 	b.w	8004042 <__retarget_lock_release_recursive>
 8004a66:	bf00      	nop
 8004a68:	20000170 	.word	0x20000170

08004a6c <_realloc_r>:
 8004a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a70:	4680      	mov	r8, r0
 8004a72:	4614      	mov	r4, r2
 8004a74:	460e      	mov	r6, r1
 8004a76:	b921      	cbnz	r1, 8004a82 <_realloc_r+0x16>
 8004a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	f7ff bbb3 	b.w	80041e8 <_malloc_r>
 8004a82:	b92a      	cbnz	r2, 8004a90 <_realloc_r+0x24>
 8004a84:	f7ff fb44 	bl	8004110 <_free_r>
 8004a88:	4625      	mov	r5, r4
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a90:	f000 f82e 	bl	8004af0 <_malloc_usable_size_r>
 8004a94:	4284      	cmp	r4, r0
 8004a96:	4607      	mov	r7, r0
 8004a98:	d802      	bhi.n	8004aa0 <_realloc_r+0x34>
 8004a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a9e:	d812      	bhi.n	8004ac6 <_realloc_r+0x5a>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f7ff fba0 	bl	80041e8 <_malloc_r>
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	2800      	cmp	r0, #0
 8004aac:	d0ed      	beq.n	8004a8a <_realloc_r+0x1e>
 8004aae:	42bc      	cmp	r4, r7
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	bf28      	it	cs
 8004ab6:	463a      	movcs	r2, r7
 8004ab8:	f7ff ffa4 	bl	8004a04 <memcpy>
 8004abc:	4631      	mov	r1, r6
 8004abe:	4640      	mov	r0, r8
 8004ac0:	f7ff fb26 	bl	8004110 <_free_r>
 8004ac4:	e7e1      	b.n	8004a8a <_realloc_r+0x1e>
 8004ac6:	4635      	mov	r5, r6
 8004ac8:	e7df      	b.n	8004a8a <_realloc_r+0x1e>
	...

08004acc <_read_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	; (8004aec <_read_r+0x20>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fc f9b8 	bl	8000e50 <_read>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_read_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_read_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	2000017c 	.word	0x2000017c

08004af0 <_malloc_usable_size_r>:
 8004af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004af4:	1f18      	subs	r0, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	bfbc      	itt	lt
 8004afa:	580b      	ldrlt	r3, [r1, r0]
 8004afc:	18c0      	addlt	r0, r0, r3
 8004afe:	4770      	bx	lr

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	bf00      	nop
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	bf00      	nop
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
